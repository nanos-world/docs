"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[54392],{16901:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"july-2025","metadata":{"permalink":"/pt-BR/blog/july-2025","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2025-08-06-july.md","title":"Jul: Forge, Accelerated CEF & Coroutines!","description":"Forge Plugin, Accelerated CEF, Coroutine Fixes, Vehicle Updates & more!","date":"2025-08-06T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":8.84,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"july-2025","title":"Jul: Forge, Accelerated CEF & Coroutines!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-july/july-news.webp"},"unlisted":false,"nextItem":{"title":"Jun: Ticks, Netcode & Traces!","permalink":"/pt-BR/blog/june-2025"}},"content":"**Forge Plugin, Accelerated CEF, Coroutine Fixes, Vehicle Updates & more!**\\n\\n![](/img/blog/2023-july/july-news.webp)\\n\\nWelcome to our roundup of the latest updates from the past month! This blog comes slightly later than usual, as announced on Discord earlier this month. Moving forward, our news blogs will return to their regular schedule, ensuring they reflect the progress made in the previous month.\\n\\n\x3c!--truncate--\x3e\\n\\n## CEF Experimental Features\\n\\n![](/img/blog/2025-july/cef.webp)\\n\\nWe are excited to introduce several new **CEF** features that have been highly requested for a long time. From Hardware Acceleration to new Dev Tools features!\\n\\n### Hardware Acceleration\\n\\nWe implemented a ability to enable **Hardware Acceleration** on CEF! This is a feature that allows the WebUI to utilize your GPU for rendering instead of the CPU. Allowing complex animations to run smoothly while offloading work from the CPU.\\n\\n:::tip Recommendation\\n\\nEven with Hardware Acceleration enabled, avoid using overly complex animations in your UI. Not all players will have this setting enabled, so it\'s advisable to provide fallback animations for them.\\n\\n:::\\n\\n### Acelera\xe7\xe3o de Pintura\\n\\nCurrently, CEF renders WebUI pages into a buffer, which is then copied to an Unreal texture for on-screen rendering, all handled by the CPU.\\n\\n**Accelerated Painting** shifts this process to the GPU, directly copying the rendered texture (DirectX Texture) to the Unreal texture, reducing CPU workload.\\n\\n:::warning Performance Note\\n\\nWhile this feature is highly anticipated, it may not improve performance in all cases.\\n\\nFor example, if your PC is GPU-bound, enabling Hardware Acceleration and Accelerated Painting could negatively impact the responsiveness of the WebUIs.\\n\\n:::\\n\\n### New WebUI Settings\\n\\nWe\'ve exposed several new settings to help you experiment with these new features:\\n\\n![](/img/blog/2025-july/cef-settings.webp)\\n\\n<MediaLegend>New CEF/WebUI Settings</MediaLegend>\\n\\n#### Hardware Acceleration & Accelerated Painting\\n\\nAllows you enabling those features previously mentioned. Note that Accelerated Painting requires Hardware Accelerated enabled.\\n\\n#### Max Resolution\\n\\nWe\'ve added a setting to limit the maximum WebUI resolution. This can be a performance saver if you run the game at 4K resolution, allowing you to cap WebUI resolution at 1080p, for example.\\n\\n#### Message Loop Schedule\\n\\nThis is an internal CEF setting that may improve the CEF performance by reducing unnecessary CEF loop calls when it\'s idling.\\n\\n### New Dev Tools\\n\\nWe\'re introducing the in-game **Dev Tools**, similar to what you find in browsers!\\n\\n![](/img/blog/2025-july/cef-debug.webp)\\n\\n<MediaLegend>Debugging with Dev Tools</MediaLegend>\\n\\nPreviously, we\'ve had the Remote Debugging feature as our only option for runtime debugging, but it was disabled due to security concerns and issues with Windows Defender blocking it.\\n\\nNow with the new **Dev Tools** you can debug your WebUI directly in-game using the new methods: <MethodReference type=\\"Class\\" class_name=\\"WebUI\\" method=\\"OpenDevTools\\" show_class_name /> and <MethodReference type=\\"Class\\" class_name=\\"WebUI\\" method=\\"CloseDevTools\\" show_class_name />.\\n\\nIt launches a new window pop-up integrated with the game to inspect and debug the HTML elements from the page!\\n\\n### Other WebUI Improvs\\n\\n- **DPI Scaling:** WebUI pages now scale properly with the monitor\'s DPI, fixing issues where Windows resolution scaling affected WebUI resolution.\\n- **Smooth Scrolling:** We\'ve implemented native smooth scrolling for WebUIs, replacing the previous simulation.\\n- **Print Command Disabled:** The `print` command in JavaScript, which opened an external print popup, has been disabled.\\n- **Multi-Instance Fix:** Resolved an issue preventing two game instances from displaying WebUI simultaneously.\\n\\n## Introducing... The Forge!\\n\\nnanos world Forge is a new **community-made plugin** for Unreal Engine designed to simplify asset creation for nanos world. It comes with built-in **tools** and **cooking automation** to increase your productivity!\\n\\n![](/img/blog/2025-july/forge.webp)\\n\\n<MediaLegend>New Forge Plugin!</MediaLegend>\\n\\nWhile still under development, it is recommended as a complementary tool to the current ADK, as it automates various processes like **cooking**, **scripting**, and, in the future\u2122, **uploading** assets to the Vault.\\n\\n:::tip note\\n\\nThis plugin is being developed by a dedicated community member, **NegativeName**, and will be distributed for free alongside the ADK!\\n\\nSince this is a voluntary project, please consider supporting him and this project by buying him a coffee: https://ko-fi.com/negativename.\\n\\n:::\\n\\n### Cook Handler\\n\\nThe **Cook Handler** is a feature that automatically copies your cooked assets after they are cooked, it moves them to the configured `ServerPath/Assets/` directory, so you don\'t have to copy them manually every time you cook.\\n\\nAnd putting together with the [Asset Pack Auto Reload](/blog/june-2025#asset-pack-auto-reload) feature, it drastically speeds up the iterating process of re-cooking and testing your assets!\\n\\nIt also generates an **Assets.toml** file in each asset pack folder, listing all its assets automatically.\\n\\n### Other Tools & Features\\n\\nForge includes a variety of tools to enhance your asset creation experience:\\n\\n- **Object2Lua**: Converts Unreal Engine blueprint assets into Lua tables.\\n- **Foliage2Lua**: Transforms foliage actors into Lua table representations.\\n- **Material Picker**: Quickly identify materials by clicking on them in the viewport.\\n- **Placeholders**: Place actors in your map and export them to Lua code.\\n- **Quick Instancer**: Converts Static Mesh actors into Instanced Static Mesh actors.\\n- **StaticMeshToFoliage**: Converts static mesh actors into foliage types.\\n- **Thumbnail Generator**: Creates high-quality PNG thumbnails for assets, with bulk processing support.\\n\\nFor a detailed list of tools and instructions on how to download it, visit the Forge page:\\n\\n<ReferenceLink href=\\"assets-modding/forge/setup\\">Forge Setup</ReferenceLink>\\n\\n### Future Development\\n\\nThe Forge is still under development, if you have any suggestion or find any bug, don\'t hesitate to contact us or NegativeName directly!\\n\\nWe are still working together to keep expanding the Forge possibilities, we have plans to make a way solid workflow for **creating**, **managing** and **upload** Assets Packs directly from the Forge!\\n\\nAlso, in the next days, we will be updating our ADK tutorials and the ADK project to reduce the redundant tools and simplify it even more! Stay tuned for updates!\\n\\n## Vehicle Updates\\n\\nWe\'ve made significant improvements to **Vehicles**, adding missing methods and enhancing procedural hand placement on steering wheels.\\n\\n### Hand Placements\\n\\nCharacters\' hands now adapt **procedurally** to the steering wheel\'s position. To achieve this, you must specify the steering wheel\'s position when configuring <MethodReference type=\\"Class\\" class_name=\\"VehicleWheeled\\" method=\\"SetSteeringWheelSetup\\" show_class_name />.\\n\\nPreviously, we used the character\'s relative position, which caused inconsistencies across different characters and meshes. With this update, all characters and meshes will behave consistently.\\n\\nWe also added a new parameter to <MethodReference type=\\"Class\\" class_name=\\"VehicleWheeled\\" method=\\"SetSteeringWheelSetup\\" show_class_name />: `rotation`. This refactor ensures that the parameters passed to it are relative to the vehicle\'s root bone. As a result, all vehicles will need to be reconfigured using this new relative location.\\n\\n<VideoExternal path=\\"/blog/2025-july/procedural-vehicle-hands.webm\\" />\\n\\n<MediaLegend>Characters procedurally adapting their hand positions based on the steering wheel and seat location</MediaLegend>\\n\\n### Torque Curve\\n\\nYou can now configure the **Vehicle\'s Torque Curve**! We added a new parameter to <MethodReference type=\\"Class\\" class_name=\\"VehicleWheeled\\" method=\\"SetEngineSetup\\" show_class_name />: `torque_curve` to allow customizing it through scripting:\\n\\n```lua title=\\"Server/Index.lua\\"\\nlocal torque_curve = {\\n\\t[   0.0] = 0.5,\\n\\t[ 800.0] = 0.9,\\n\\t[2000.0] = 1.0,\\n\\t[4000.0] = 0.9,\\n\\t[5000.0] = 0.0,\\n}\\n\\nmy_vehicle:SetEngineSetup(600, 5000, 900, 0.2, 5, 600, torque_curve)\\n```\\n\\n### New Vehicle Methods\\n\\nWe introduced a new method: <MethodReference type=\\"Class\\" class_name=\\"VehicleWheeled\\" method=\\"SetDifferentialSetup\\" show_class_name />. Allowing you to configure the vehicle\'s differential by passing a custom <Enums>DifferentialType</Enums>.\\n\\nAlso, we exposed a new parameter to change the shape used for calculating wheel suspension to <MethodReference type=\\"Class\\" class_name=\\"VehicleWheeled\\" method=\\"SetWheel\\" />: `suspension_sweep_shape` (<Enums>SuspensionSweepShape</Enums>).\\n\\n## Lua Coroutine Fixes\\n\\n![](/img/blog/2025-july/lua.webp)\\n\\nWe\'ve finally managed to solve most of the known issues with **Lua Coroutines**, fixing numerous crashes and ensuring it works with various scripting calls and methods.\\n\\nFor example, `Package.Require` and async callbacks from <Classes.Database /> or <Classes.File /> operations now work seamlessly within coroutine executions.\\n\\nThanks to all the testers who helped reproduce these bugs and crashes!\\n\\n## Linux Server Requirements\\n\\nWe\'ve reviewed the minimum required versions for running a **Linux server**. The officially supported versions are now **Ubuntu 22** and **24**, and **Debian 12**.\\n\\nWe\'ve also improved the build process to include necessary libraries (e.g., glibc) for older machines, resolving compatibility issues. However, Debian 11 is no longer officially supported.\\n\\nFor more details, visit the updated Server Installation Guide:\\n\\n<ReferenceLink href=\\"core-concepts/server-manual/server-installation\\">Server Installation Guide</ReferenceLink>\\n\\n## Vault Maintenance\\n\\n![](/img/blog/2025-july/store-wip.webp)\\n\\n<MediaLegend>Vault Maintenance in Progress</MediaLegend>\\n\\nEarlier this month, we [announced](https://discord.com/channels/124107916432113666/385425494864035849/1390643797557383229) a maintenance period for the Vault/Store. We\'re working on a new version of the Vault that will better meet our needs, so having a complete backend refactor.\\n\\nWhile we don\'t have a release date yet, progress is moving quickly. For now, the game will still provide default packages (`sandbox`, `default-weapons`, and `default-vehicles`) for download via the in-game Vault and CLI.\\n\\n## Account System Migration\\n\\nIn addition to Vault maintenance, we\'re also improving our account system backends, integrating them with the new Vault system. We\'ve paused new tester invites for a few weeks while we finalize these migrations. We should be ready really soon\u2122.\\n\\nIf you encounter login errors during this transition, please let us know!\\n\\n## Conclusion\\n\\nThis was a \\"2-month\\" update packed with several exciting features and improvements. The introduction of the community-created **Forge** is the beginning of our vision for a more solid Asset Development Kit (ADK), simplifying the asset creation process. While there is still much to improve, this is a significant first step. Thank you again [@NegativeName](https://ko-fi.com/negativename) for taking this initiative!\\n\\nThe highly requested **CEF Hardware Acceleration** feature has been integrated, it was not an easy integration, and hopefully you can make great usage of it! Now let\'s test its stability and ensure it works as expected!\\n\\nThe **Lua Coroutines** issues have been haunting us for a really long time, and thanks to your reports and persistence, we managed to fix most of the issues it had!\\n\\nWe are also working tirelessly to create a new ecosystem for the **Vault** and **Account System**, we are already migrating accounts to a new system and developing a backend for the Vault that meets all our needs. These changes are being rolled out gradually to minimize friction. Many updates have already been implemented seamlessly, we are trying to do it without any downtime to make this transition as smooth as possible!\\n\\nWe appreciate your patience and support during these transitions. Your feedback is invaluable in helping us improving. Stay tuned for more updates, and thank you for being part of the nanos world community! \ud83d\udc96\\n\\nAlso thank you for everyone supporting me on [Ko-fi \u2615](https://ko-fi.com/I2I3537D1), you have no idea how motivated I get to see your desire to support, and how this is reassuring to me! \ud83d\udc99\\n\\n<KofiButton />"},{"id":"june-2025","metadata":{"permalink":"/pt-BR/blog/june-2025","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2025-06-11-june.md","title":"Jun: Ticks, Netcode & Traces!","description":"Ticks, Netcode & Traces!","date":"2025-06-11T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":9.23,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"june-2025","title":"Jun: Ticks, Netcode & Traces!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-june/june-news.webp"},"unlisted":false,"prevItem":{"title":"Jul: Forge, Accelerated CEF & Coroutines!","permalink":"/pt-BR/blog/july-2025"},"nextItem":{"title":"May: Big House Keeping","permalink":"/pt-BR/blog/may-2025"}},"content":"**Ticks, Netcode & Traces!**\\n\\n![](/img/blog/2023-june/june-news.webp)\\n\\nWelcome to our roundup of the latest updates from the last month!\\n\\n\x3c!--truncate--\x3e\\n\\n## Ticking\\n\\nTicking is the beating heart of a game, it\'s where we process inputs, network callbacks, scripting events, and everything else.\\n\\nWe\'ve massively improved our tick loop and our Timer system, on both sides:\\n\\n### Server-Side\\n\\nWe completely reworked the core tick loop, by implementing a more precise timing algorithm. This new algorithm eliminates the small but cumulative timing errors that used to affect internal timers and even the Timer class.\\n\\nWith that, we changed the Config.toml config from `tick_rate` to `max_tick_rate`, now in `Hertz (Hz)`, instead of Milliseconds. The default value is now `30 Hz` (i.e. `33.33ms` per frame), matching the client side for better synchronization.\\n\\nWe also improved the logs for High Tick durations, displaying better diagnostics like this:\\n\\n```\\nWARNING  Server Tick time extremely high! Server may be very overloaded or stuck.\\nTick Duration: 117.90ms (8/s). Average: 39.07ms (25/s). Configured: 33.33ms (30/s).\\n```\\n\\n### Client Side\\n\\nPreviously, all nanos world processing happened after physics simulation. This included networking, snapshots, interpolation, Lua event handling, CEF painting, 3D Debug Drawing, etc.\\n\\nIt worked... but we realized it could be way better.\\n\\nWe\'ve now reordered and prioritized internal ticks so low-latency tasks (like networking sync and inputs) happen ASAP in the frame and things that need the frame to be fully read executes after we have the data ready to be consumed.\\n\\nThis makes sure the correct logic happens when the frame is ready for that, fixing having on \\"old\\" frame data to work with.\\n\\nThe result? A dramatic boost in perceived smoothness and responsiveness. Here\'s a before-and-after comparison using the PhysicsGun:\\n\\n<VideoExternal path=\\"/blog/2025-june/tick-physics-bef.webm\\" />\\n\\n<MediaLegend>Sandbox PhysicsGun before, with lots of jittering and desync on the texts and Particle location</MediaLegend>\\n\\n<VideoExternal path=\\"/blog/2025-june/tick-physics-aft.webm\\" />\\n\\n<MediaLegend>Sandbox PhysicsGun after, with no jittering and ghosting anymore</MediaLegend>\\n\\nThis huge improvement just by adjusting the order of the algorithms are processed.\\n\\n### Timers\\n\\nTimers previously relied on delta times between frames. Over time, this caused slight inaccuracies, it was really subtle, but enough to accumulate.\\n\\nWe now use a real-clock-based algorithm to track elapsed time with far greater accuracy.\\n\\nIt\'s really noticeable when comparing Timers and the Lua `clock` methods, they being nearly perfectly in sync.\\n\\n:::note\\n\\nTimers and Tick events still inherit the margin of error from the configured frametime (e.g. 33ms).\\n\\n:::\\n\\nWe also fixed a long-standing bug in Interval Timers, which weren\'t compensating for execution overhead. Now, a timer set to fire every 1 second will fire every 1 second exactly, no matter what and with no delays in sequential calls.\\n\\n## Netcode Improvements\\n\\nAlso, thanks to the Ticking improvements, and other internal low level networking improvements, our network latency has dropped significantly! The quality feeling of playing with someone on the other side of the world increased dramatically!\\n\\nWe even lowered the threshold for Debug Drawing colors to detect delays more accurately. Here you can notice how better and evenly spaced are the packets being received now:\\n\\n<VideoExternal path=\\"/blog/2025-june/network-latency-bef.webm\\" />\\n\\n<MediaLegend>Network Snapshot Packets being received before: too big corrections (big arrows) and delays (yellow)</MediaLegend>\\n\\n<VideoExternal path=\\"/blog/2025-june/network-latency-aft.webm\\" />\\n\\n<MediaLegend>Network Snapshot Packets being received now: evenly spaced, mostly green and small</MediaLegend>\\n\\n:::tip\\n\\nThe bigger the arrow, the bigger the \\"error\\" from the local interpolation and the received network real location.\\n\\nAlso yellow arrows means a packet took more than 2 frames (66ms) to be received. This threshold was reduced from the old value 450ms, and even so we barely see them yellow now!\\n\\n:::\\n\\nRead more about Network Debugging and what each color/arrow means at:\\n\\n<ReferenceLink href=\\"core-concepts/scripting/authority-concepts#debugging-network--network-authority\\">\ud83e\uddd1\u200d\ud83d\udcbb Authority Concepts</ReferenceLink>\\n\\n## Traces\\n\\nSome great improvements on internal Traces handling.\\n\\n### Trace Visibility\\n\\n![](/img/blog/2025-june/traces-broken.webp)\\n\\nOur trace functions used Unreal\'s `TraceByObjectTypes`, which doesn\'t care about the collision trace channels. That worked fine for nanos world entities and custom created maps, that were created with gameplay purposes in mind.\\n\\nBut we found that some user-made maps (or FAB maps) had objects (like WorldStatic) set to ignore collisions on the Visibility channel, but with Query Collisions still enabled. These objects were still being detected by our traces, even when they shouldn\'t be, breaking some aspects of the gameplay, like Sandbox\'s PhysicsGun or Spawn Menu not working properly.\\n\\nTo fix this, we added a new `TraceMode.TraceOnlyVisibility` to the <Enums>TraceMode</Enums> enum.\\n\\nThis new TraceMode ensures the traces only return objects that match the object types passed **and** have the Visibility channel blocking, making it a must for our Sandbox common traces and fixing all the issues we were having with custom FAB maps.\\n\\n### Impact Point\\n\\nAs a request from the community, we are also adding a new information to our Trace returns: `ImpactPoint`, this is the contact point in which a trace collided with the impacted object!\\n\\n## Asset Pack Auto Reload\\n\\nA frequent issue in development environments was that developers could modify the Asset files while the server was still running, making all the precomputed hashes technically invalid, causing clients to mismatch local files, and in some cases, request newer files from the server using outdated hashes, resulting in download errors and preventing them from connecting until a full server restart is made.\\n\\nWe\'re introducing a new **Asset Pack Auto Reload** system! This new system detects real-time file changes inside asset folders and queues an automatic reload of the affected Asset Pack. It recalculates all hashes (just like on server start), allowing updates to Asset Packs while the server remains online.\\n\\n:::note\\n\\nThis is not a Hot Download system. Connected players will still need to reconnect to download the updated files.\\n\\n:::\\n\\nThis system aims to eliminate many problems during development, such as inconsistent hashes, silent desyncs, or mysterious crashes.\\n\\nWhile an Asset Pack is reloading, new player connections will be temporarily blocked until it\'s fully ready.\\n\\n## Loading Screen Data\\n\\nWe\'ve revised the structure of the `LoadingScreen` JavaScript object. Now, `server` and `player` information are neatly split:\\n\\n```javascript title=\\"index.js\\"\\nvar LoadingScreen = {\\n\\tserver: {\\n\\t\\tip,\\n\\t\\tport,\\n\\t\\tname,\\n\\t\\tdescription,\\n\\t},\\n\\tplayer: {\\n\\t\\tnanos_id,\\n\\t\\tnanos_username,\\n\\t\\tsteam_id,\\n\\t}\\n}\\n```\\n\\n:::note\\n\\nThe old format is now deprecated and will show warnings if used.\\n\\n:::\\n\\n## New System Stats\\n\\n![](/img/blog/2025-june/system-stats.webp)\\n\\nWe\'ve added a small but useful debug feature: **System Stats**. It appears alongside the Frame Timings panel when enabled and shows real-time RAM and VRAM usage.\\n\\nYou can enable it in the Debug Settings!\\n\\nWe intend to expand this stats to display more information in the future.\\n\\n## Changelog Markdown\\n\\nWe\'ve added a new in-game **Markdown** parser that converts Markdown into Unreal Rich Text. This means changelogs are now properly formatted and beautifully displayed inside the menu:\\n\\n![](/img/blog/2025-june/changelog-md.webp)\\n\\n<MediaLegend>Game Menu Changelog Widget displaying header and bold texts</MediaLegend>\\n\\nNo more plain text or weird broken tags!\\n\\n## Fixed River\\n\\n![](/img/blog/2025-june/river.webp)\\n\\nIt\'s becoming a bit of a tradition: from time to time, our rivers (or water in general) break completely. \ud83d\ude05\\n\\nFor quite a while, a visual bug caused rivers to appear totally broken unless you manually saved the settings. This affected every river on every map, and until now, we couldn\'t find a reliable fix.\\n\\nBut we managed to implement a workaround to mitigate the issue! So rivers can flow properly again without the glitchy rendering gaps.\\n\\n## UI Responsiveness\\n\\nWe fixed several UI screens that were breaking in non-16:9 aspect ratios (like 4:3 or 16:10). The Vault, Settings, Find Servers, New Game and more are all now fixed!\\n\\nEverything should now scale correctly across common screen formats:\\n\\n![](/img/blog/2025-june/responsive-43.webp)\\n\\n<MediaLegend>Vault Screen displaying properly on 4:3</MediaLegend>\\n\\n![](/img/blog/2025-june/responsive-169.webp)\\n\\n<MediaLegend>Vault Screen displaying properly on 16:9</MediaLegend>\\n\\n## Other Improvements\\n\\n### File Transfer Overhaul\\n\\nWe\'ve made multiple improvements to the file transfer system, again! We\'ve drastically revamped our internal systems to improve the parallel downloading, fixing all the stutter/hitches happening while downloading each file.\\n\\nWe also improved the robustness of the system as a whole, to prevent crashes and improve the stability of the downloads!\\n\\n### Lua Internal Stack\\n\\nWe\'ve made a structural improvement to our Lua implementation to ensure that API calls now behave more like native Lua function calls. Now the Lua stack is preserved during API calls, as before it was always being cleared. While this didn\'t cause major issues before, it prevented tools like hooks from accessing correct stack information on API calls.\\n\\nRelated [Issue#932](https://github.com/nanos-world/issues/issues/932)\\n\\n### Lua Internal Memory\\n\\nWe\'ve enhanced Lua\'s internal memory management, addressing issues where the garbage collector failed to properly clean up the Environment and some Userdata after they were unloaded, resulting in potential memory leaks.\\n\\nAll entities and environments are now correctly flushed from memory, resolving problems that previously caused Files and Databases to remain open, and even crashes.\\n\\n### Firewall Alert\\n\\n![](/img/blog/2025-june/firewall.webp)\\n\\n<MediaLegend>Windows Firewall Popup</MediaLegend>\\n\\nWe\'ve improved Steam installation process to auto add all executables automatically to Firewall when installing nanos world. No more popups asking your permissions when opening special WebUI pages or launching the server!\\n\\n### Fatal Errors\\n\\nWe fixed a lot of Fatal Errors of `Failed to send Message` that were annoying us for some long time due an internal bug. They happened in both Client and Server and were flooding our logs and our crash reporter.\\n\\n## Conclusion\\n\\nThis was another month of polish and core improvements, I\'ve been fully focused on making nanos world and all its internal systems as stable as possible, aiming to a state with almost no crashes or chronic issues. This foundation is essential before diving deep into major new features and being able to focus on them without distractions.\\n\\nThese improvements are crucial for building a solid structure for the game: smooth gameplay, consistent behavior, and fewer bugs. That reliability is key to getting the trust of both players and developers to keep working and creating awesome content on it!\\n\\nMore GitHub issues were resolved, and there are still a few more I plan to address before I can consider this round of housekeeping complete. Our new internal crash-handling implementation have already proven really effective, it gives me valuable insights to solve some rare errors and crashes. If you\'re experiencing a crash and know how to reproduce it, please let us know! This speeds up a LOT the time to fix them!\\n\\nThere are already many exciting things being worked on behind the scenes, and I\'ve been receiving great support that will allow me to bring amazing updates very soon.\\n\\nThank you everyone for more this month of tests and polishing! Also, thank you to everyone who donated to my [Ko-fi](https://ko-fi.com/gtnardy), your support means a lot and helps keep this going! See you next month!! \ud83d\ude04\\n\\n<KofiButton />"},{"id":"may-2025","metadata":{"permalink":"/pt-BR/blog/may-2025","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2025-05-07-may.md","title":"May: Big House Keeping","description":"Big House Keeping! Tons of Fixes and Improvements!","date":"2025-05-07T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":10.93,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"may-2025","title":"May: Big House Keeping","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-may/may-news.webp"},"unlisted":false,"prevItem":{"title":"Jun: Ticks, Netcode & Traces!","permalink":"/pt-BR/blog/june-2025"},"nextItem":{"title":"Apr: Performance & Optimization!","permalink":"/pt-BR/blog/april-2025"}},"content":"**Big House Keeping! Tons of Fixes and Improvements!**\\n\\n![](/img/blog/2023-may/may-news.webp)\\n\\nWelcome to our roundup of the latest updates from the last month!\\n\\n\x3c!--truncate--\x3e\\n\\n![](/img/blog/2025-may/house-keeping.webp)\\n\\n## New Local Event Behavior\\n\\nWe are introducing a new behavior for some events. Now actions that are triggered by the client (e.g. changing the View Mode) that execute some kind of event (e.g. <EventReference type=\\"Class\\" class_name=\\"Character\\" event=\\"ViewModeChange\\" />) will have it\'s event being called immediately on the client which triggered it first.\\n\\nThis means if you are possessing a character and press `V` (to switch the <Enums>ViewMode</Enums>), or then press Shift (to run), you will have the corresponding events <EventReference type=\\"Class\\" class_name=\\"Character\\" event=\\"ViewModeChange\\" /> or <EventReference type=\\"Class\\" class_name=\\"Character\\" event=\\"StanceModeChange\\" /> called on the client immediately, before having it to be called on servers then synced with all players (including you).\\n\\nAll events that already have this new behavior implemented are:\\n\\n- <EventReference type=\\"Class\\" class_name=\\"Character\\" event=\\"ViewModeChange\\" show_class_name />\\n- <EventReference type=\\"Class\\" class_name=\\"Character\\" event=\\"StanceModeChange\\" show_class_name />\\n- <EventReference type=\\"Class\\" class_name=\\"Character\\" event=\\"WeaponAimModeChange\\" show_class_name />\\n- <EventReference type=\\"Class\\" class_name=\\"Character\\" event=\\"FallingModeChange\\" show_class_name />\\n- <EventReference type=\\"Class\\" class_name=\\"Character\\" event=\\"GaitModeChange\\" show_class_name />\\n- <EventReference type=\\"Class\\" class_name=\\"Character\\" event=\\"SwimmingModeChange\\" show_class_name />\\n\\n:::tip\\n\\nMore events will be added in the future.\\n\\n:::\\n\\nRelated [Issue#779](https://github.com/nanos-world/issues/issues/779).\\n\\n## Cables System Rework\\n\\n<VideoExternal path=\\"/blog/2025-may/prop-physics.webm\\" />\\n\\n<MediaLegend>New Cables Constraint in action with Props</MediaLegend>\\n\\nCables in nanos world had been in a rough state for a while: the physics were odd and the infamous \\"_Virus Bug_\\" was becoming a pandemic, they didn\'t behave like real ropes, and the visual representation didn\'t match the actual constraints being applied.\\n\\nBut now, after a deep refactor and a ton of under-the-hood improvements, We\'re proud to say: **cables are finally great again**! They now behave exactly how you\'d expect realistic cables or ropes to behave! \ud83c\udf89\\n\\nWe\'ve also introduced several other improvements around them. Some highlights:\\n\\n- Added support for a new parameter to <MethodReference type=\\"Class\\" class_name=\\"Cable\\" method=\\"SetCableSettings\\" show_class_name />: `enable_stiffness`.\\n- Improved error logging, now shows entity names and IDs to make debugging easier.\\n- Picking up Pickables will now automatically detach any attached cables, and trying to attach a cable to a non-simulating object will throw an error (since Unreal doesn\'t like that).\\n- Resizing Vehicles or Weapons will not break the Cable Physics anymore.\\n\\nRelated [Issue#975](https://github.com/nanos-world/issues/issues/975), [Issue#992](https://github.com/nanos-world/issues/issues/992) and [Issue#993](https://github.com/nanos-world/issues/issues/993).\\n\\n## AI Improvements\\n\\n### MoveTo\\n\\nThe <MethodReference type=\\"Class\\" class_name=\\"Pawn\\" method=\\"MoveTo\\" show_class_name /> system was heavily improved to ensure more consistency and reliability, especially regarding event handling.\\n\\nPreviously, we had issues where multiple <EventReference type=\\"Class\\" class_name=\\"Pawn\\" event=\\"MoveComplete\\" show_class_name /> events was being fired for a single MoveTo call, along with desyncs and movement data not persisting properly across sessions.\\n\\nNow, every `MoveTo` call is associated with a **unique ID**, which internally helps track whether a movement has already completed, preventing duplicate `MoveComplete` calls.\\n\\nWe\'ve also fixed cases where `MoveTo` wouldn\'t resume if a player reconnected during a movement.\\n\\nAlso we\'ve fixed `MoveTo` values are now properly **synced** to the client, allowing you to access movement data via scripting on both server and client sides, and a bunch of Debug and Verbose logs were added to help debugging your AI implementation.\\n\\nRelated [Issue#714](https://github.com/nanos-world/issues/issues/714).\\n\\n### AI Vehicle Avoidance\\n\\n<VideoExternal path=\\"/blog/2025-may/ai-vehicle-reaction.webm\\" />\\n\\n<MediaLegend>NPCs reacting and moving away from Vehicle</MediaLegend>\\n\\nWe\'ve improved how AI Characters interact with vehicles!\\n\\nDue to how our ragdoll system works, we have to disable collisions between vehicles and characters to prevent vehicles from abruptly stopping when hitting a character, this way when a vehicle overlaps the character, the ragdoll mode is activated and the vehicle only hits the ragdoll mesh during physics simulation.\\n\\nHowever, this sometimes caused characters to clip through vehicles.\\n\\nTo mitigate this, we\'ve implemented a new system that automatically pushes characters away when vehicles get too close. And if the vehicle is moving at high speed, ragdoll is triggered as expected, creating a much more natural and realistic reaction!\\n\\n:::note\\n\\nNote that it is still possible to experience characters clipping through vehicles, but this has been greatly mitigated now.\\n\\n:::\\n\\nRelated [Issue#672](https://github.com/nanos-world/issues/issues/672).\\n\\n## Prop Grabbing\\n\\n<VideoExternal path=\\"/blog/2025-may/prop-grabbing.webm\\" />\\n\\n<MediaLegend>Smoother Soft Prop Grabbing Physics Simulation</MediaLegend>\\n\\nWe are doing some experimental changes on how Props are Grabbed, before we were using \\"hard constraints\\" which was moving the Props at all costs while a character was grabbing it, making the Grabbed Prop physics to go insane and flickery in some cases.\\n\\nSo we decided to change it to use \\"soft constraints\\" instead, which would make them physically more accurate while being grabbed, even making you able to loose it if you don\'t grab it properly or get too far.\\n\\nWe are testing this new way to see if it works good. We also did several improvements in the Grabbing max distance and location to make it more realistic.\\n\\nRelated [Issue#711](https://github.com/nanos-world/issues/issues/711).\\n\\n## Spectating is back!\\n\\nOur Spectator Mode (<MethodReference type=\\"Class\\" class_name=\\"Player\\" method=\\"Spectate\\" show_class_name />) had been left on the sidelines for a while, and a few issues started popping in: like the camera attaching incorrectly (it was attaching to the feet while in third person), and in first person the weapon appeared stiff and unresponsive, with no crosshair or blood screen syncing.\\n\\nWe\'ve now fixed all of these problems and also implemented proper syncing for **Crosshairs** and **Blood Screen effects** while spectating!\\n\\nThere\'s still more work to be done, but this is a initial first step toward getting Spectator Mode fully back on track!\\n\\nRelated [Issue#978](https://github.com/nanos-world/issues/issues/978).\\n\\n## Water Related\\n\\n### Swimming Movement\\n\\n<VideoExternal path=\\"/blog/2025-may/swimming.webm\\" />\\n\\n<MediaLegend>Swimming Direction being affected by camera</MediaLegend>\\n\\nWe\'ve added a small but cool improvement to the swimming mechanic: now your camera angle will influence the character\'s swimming direction, allowing you to swim upward or downward based on where you\'re looking (in addition to the existing mode)!\\n\\n### Way Better Pontoons\\n\\nOne major change was in the calculation of **pontoons**: these are the invisible spheres that simulate buoyancy and allow objects to float in water. We\'ve improved how pontoons are generated and attached, resulting in much better floating behavior across various entities sizes and weights.\\n\\nRelated [Issue#958](https://github.com/nanos-world/issues/issues/958).\\n\\n### AI Swimming\\n\\n<VideoExternal path=\\"/blog/2025-may/npc-water.webm\\" />\\n\\n<MediaLegend>NPCs swimming in the surface</MediaLegend>\\n\\nNow NPCs will always swim toward the surface instead of diving endlessly to the bottom of the ocean as it was happening before.\\n\\nRelated [Issue#891](https://github.com/nanos-world/issues/issues/891).\\n\\n#### Other Water Fixes & Improvements\\n\\nWe also got some bugs fixed:\\n\\n- Before grabbing Props under the water was making the Prop physics to go insane, we\'ve fixed that and Prop will be grabbed more properly while under the water.\\n- We\'ve fixed Grenades with no buoyancy at all, now will float properly.\\n\\n## File Transfer\\n\\nOur file transfer system has gone through many improvements and overhauls over time, and we improved it further!\\n\\nNow, after each file is downloaded, the client will validate its integrity to ensure it wasn\'t corrupted during transfer, helping to prevent inconsistencies. If any file fails to download, the log now will list which files failed or were still pending, helping debugging.\\n\\nWe\'ve also refactored a part of the server-side logic to try and eliminate a rare bug where file packets could be sent to the wrong player during gameplay, causing Fatal Errors logs.\\n\\nRelated [Issue#947](https://github.com/nanos-world/issues/issues/947) and [Issue#946](https://github.com/nanos-world/issues/issues/946).\\n\\n## Package Load/Reload\\n\\nWe\'ve made significant improvements to the package reload system. Previously, in extreme cases where multiple `package load/reload/unload` operations were triggered in quick succession, you might have seen console errors like `\\"Package not found to HotUnload\\"` or even inconsistencies in how the packages were being loaded and unloaded.\\n\\nTo fix this, we\'ve implemented a **queueing system** that ensures all load/reload/unload requests are handled in order (and in a unique way - e.g. calling `unload` after a `load/reload` will remove the package from the load list).\\n\\nIt prevents any package from being processed multiple times sequentially, especially while file transfers are still in progress. This has resolved several errors and issues that were occurring during runtime package reloads.\\n\\nWe also fixed a common client-side issue where a \\"default map\\" package couldn\'t be found when executing `package reload all`.\\n\\nRelated [Issue#968](https://github.com/nanos-world/issues/issues/968).\\n\\n## Ragdoll Sync\\n\\n<VideoExternal path=\\"/blog/2025-may/ragdoll-sync.webm\\" />\\n\\n<MediaLegend>Ragdoll location and rotation being networked</MediaLegend>\\n\\nSince some recent Unreal updates, ragdoll syncing became too rigid and resulted in strange movement. So we tweaked it to make the synchronization smoother and more natural when networked to other players.\\n\\nAdditionally, we\'ve improved the rotation syncing, significantly reducing those harsh \\"snap\\" rotations that could happen when a ragdoll was standing back up (from other players perspective).\\n\\n:::note\\n\\nRagdoll syncing is always a technical challenge, syncing it to other players will never be as natural as when it happens locally, but we try to achieve the best networking synchronization as possible when dealing with ragdolls.\\n\\n:::\\n\\n## Other Improvements\\n\\n### Character Falling\\n\\n![](/img/blog/2025-may/character-falling-in-place.webp)\\n\\n<MediaLegend>Character Falling in Place</MediaLegend>\\n\\nThe infamous issue where characters would randomly _fall in place_ has haunted us for years, and we finally found the culprit and fixed it!\\n\\nRelated [Issue#809](https://github.com/nanos-world/issues/issues/809).\\n\\n### Props Net. Autoridade\\n\\n<VideoExternal path=\\"/blog/2025-may/explosion-net-auth.webm\\" />\\n\\n<MediaLegend>Explosion affecting non Network Authority Props (marked as white)</MediaLegend>\\n\\nWe\'ve improved how **network authority** is handled for Props. Previously, if someone who wasn\'t the network authority shot or threw a grenade at a Prop, it wouldn\'t react at all, only the authority could affect it.\\n\\nNow, the system properly transfers **network authority** to the player causing the damage (like shooting or throwing a grenade), making Props fly away as expected when they are damaged.\\n\\n### Weapon Cadence\\n\\nWe\'ve improved the weapon\'s cadence across different frame-rates, fixing inconsistent firing rates.\\n\\nWe did this by compensating the cooldown between shots with the time spent in the last frame, which was not being taken into consideration before.\\n\\n:::tip\\n\\nNote that in extreme low fps cases, the weapon will still be limited by the FPS. We always recommend setting the Weapon cadence value to a minimum of `0.05`, this will make sure that even someone at 20 fps will be able to shoot properly.\\n\\n:::\\n\\nRelated [Issue#730](https://github.com/nanos-world/issues/issues/730).\\n\\n### Logs Overridden\\n\\nWe\'ve fixed an issue where **asynchronous logs** were overriding other log entries in both the console and log files when logs were being written from separate async threads.\\n\\nNow, all logs are properly **synchronized** and appended in sequence, ensuring they are not overlapped.\\n\\n### New Plugins Enabled\\n\\nWe enabled two new Plugins: `CommonUI` and `ModelViewViewModel` for UGC usage.\\n\\n## Conclusion\\n\\nThis month was all about fixing long standing issues, improving existing systems and doing some good old housekeeping.\\n\\nOur [GitHub Issues](https://issues.nanos-world.com/) had been abandoned for quite some time, a lot of reports were collecting dust and had gone unresolved for way too long. So this month I decided to cleanup it: I went through most of every single issue, closing outdated ones and working on the ones that were still relevant.\\n\\nI\'m proud to say I managed to get through over 40 issues this month! Most of the relevant ones got a proper fix, and a few were moved over to the [Feedback Board](http://feedback.nanos-world.com/), since they were more about missing features than actual bugs. There are still more issues already in my plans to be worked soon, my goal is to reach zero open issues!\\n\\nAnd with this cleanup, we\'ve officially passed the 1,000 closed issues milestone (with most of those properly fixed)! \ud83c\udf89 And we are not even counting the many bugs reported casually on Discord.\\n\\n![](/img/blog/2025-may/github-issues.webp)\\n\\n<MediaLegend>GitHub Issues count reached 1000 closed issues</MediaLegend>\\n\\nThere\'s still a lot I want to improve. Some technical parts of the game aren\'t yet at the level of quality I desire, and we\'re undergoing many internal structural and organizational changes that will keep improving nanos world even further!\\n\\nAh, if you find any bugs, please post them on our [GitHub Issues](https://issues.nanos-world.com/), and if you have suggestions for improvements or new scripting features you\'d love to see, drop them on our [Feedback Board](https://feedback.nanos-world.com/)!\\n\\nThank you so much for the whole support! There\'s plenty more being worked on behind the scenes that we haven\'t announced just yet. So stay tuned, because more exciting stuff is coming!\\n\\n<KofiButton />"},{"id":"april-2025","metadata":{"permalink":"/pt-BR/blog/april-2025","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2025-04-09-april.md","title":"Apr: Performance & Optimization!","description":"Performance & Optimization!","date":"2025-04-09T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":11.03,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"april-2025","title":"Apr: Performance & Optimization!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-april/april-news.webp"},"unlisted":false,"prevItem":{"title":"May: Big House Keeping","permalink":"/pt-BR/blog/may-2025"},"nextItem":{"title":"Mar: New Roadmap & Coffee!","permalink":"/pt-BR/blog/march-2025"}},"content":"**Performance & Optimization!**\\n\\n![](/img/blog/2023-april/april-news.webp)\\n\\nWelcome to our roundup of the latest updates from the last month!\\n\\n\x3c!--truncate--\x3e\\n\\n## Scripting Improvements\\n\\nHere\'s the Scripting Improvements of this month!\\n\\n### AI Avoidance Method\\n\\n<VideoExternal path=\\"/blog/2025-april/rvo.webm\\" />\\n\\n<MediaLegend>Epic\'s RVO Video Example</MediaLegend>\\n\\nThis was a request from the community, we\'ve added a new method to control the [RVO](https://dev.epicgames.com/documentation/en-us/unreal-engine/using-avoidance-with-the-navigation-system-in-unreal-engine) (Reciprocal Velocity Obstacles) of Characters.\\n\\nThis is an AI system that works by doing extra calculations to determine the the velocity and direction of NPCs based on other NPCs (or RVO actors) around, making them to avoid colliding with each other while they are moving.\\n\\nWe had this enabled by default, but we exposed a way to disable it on demand, with a new method <MethodReference type=\\"Class\\" class_name=\\"Pawn\\" method=\\"SetAIAvoidanceSettings\\" is_base show_class_name /> to allow customizing this behavior.\\n\\n### Escape Key Override\\n\\nMany of you requested a way to handle the Escape key better, especially for menu navigation. We\'ve now made it possible to register the Escape key in scripts.\\n\\n```lua\\nInput.Bind(\\"Menu\\", InputEvent.Pressed, function()\\n\\t-- Example code of usage\\n\\tif (is_my_menu_open) then\\n\\t\\tCloseCustomMenu()\\n\\t\\treturn false\\n\\tend\\nend)\\n```\\n\\nIf the player keeps holding ESC for a few time, the game menu will still open as usual, ensuring they are not locked inside your server.\\n\\n## DLSS 4 Full Integration\\n\\nRecently we upgraded our DLSS Integration to the latest [DLSS 4](https://www.nvidia.com/en-us/geforce/news/dlss4-multi-frame-generation-ai-innovations/), which brings a lot of improvements to the existing technologies and a the new feature Multi Frame Generation (although only supported on the new RTX 50).\\n\\nAnd to take the pack with, I\'ve take the time to finish the DLSS integration into nanos world, as we were only supporting Super Resolution and Frame Generation (2x) settings before.\\n\\nSo we now have fully integrated:\\n\\n![](/img/blog/2025-april/dlss-settings.webp)\\n\\n<MediaLegend>New DLSS & Reflex Settings</MediaLegend>\\n\\n### Super Resolution\\n\\nAll DLSS Super Resolution settings are now fully integrated into the UI. Enabling SR will automatically disable resolution scaling and anti-aliasing, as SR handles these internally.\\n\\nYou can see the difference in performance by comparing the Ultra Performance mode (recommended only for 8k resolution) and it turned Off:\\n\\n<ComparisonSlider\\n img_left=\\"/img/blog/2025-april/dlss-off.webp\\"\\n label_left=\\"DLSS SR Off\\"\\n img_right = \\"/img/blog/2025-april/dlss-perf.webp\\"\\n label_right=\\"DLSS SR On (Ultra Performance)\\"\\n legend=\\"Comparison DLSS Super Resolution (SR) Ultra Performance Mode\\"\\n/>\\n\\n### Frame Generation\\n\\nWe\'ve properly integrated Frame Generation into the UI (requiring VSync OFF and Reflex ON). Multi Frame Generation is also supported\u2014if you have an RTX 50, let us know how it works for you! \ud83d\ude05\\n\\nYou can see in the comparison, it almost doubles the frames presented (we display it in a separate line as it only doubles the presented frame - and not the game frame):\\n\\n<ComparisonSlider\\n img_left=\\"/img/blog/2025-april/dlss-quality.webp\\"\\n label_left=\\"DLSS FG Off\\"\\n img_right = \\"/img/blog/2025-april/dlss-quality-2x.webp\\"\\n label_right=\\"DLSS FG On (2x)\\"\\n legend=\\"Comparison DLSS Frame Generation (2x)\\"\\n/>\\n\\n### Ray Reconstruction\\n\\nThis is a new integration that improves the image quality in scenes with complex lighting and shadows, you can see the shadow artifacts going away when having it enabled, note it has a small performance cost:\\n\\n<ComparisonSlider\\n img_left=\\"/img/blog/2025-april/dlss-perf-ray-off.webp\\"\\n label_left=\\"DLSS RR Off\\"\\n img_right = \\"/img/blog/2025-april/dlss-perf-ray-on.webp\\"\\n label_right=\\"DLSS RR On\\"\\n legend=\\"Comparison DLSS Ray Reconstruction (RR) + DLSS Ultra Performance\\"\\n zoom_direction=\\"center\\"\\n/>\\n\\n### Sharpness\\n\\nWe also added a new slider for adjusting the DLSS sharpness, if desired.\\n\\n### Reflex Low Latency\\n\\nReflex Low Latency reduces input lag, making gameplay feel smoother and more responsive, you can see the difference in the input lag:\\n\\n<ComparisonSlider\\n img_left=\\"/img/blog/2025-april/reflex-off.webp\\"\\n label_left=\\"Reflex Off\\"\\n img_right = \\"/img/blog/2025-april/reflex-on.webp\\"\\n label_right=\\"Reflex On\\"\\n legend=\\"Comparison Reflex Off vs On\\"\\n enable_zoom={false}\\n max_width=\\"400px\\"\\n caption_on_bottom={false}\\n/>\\n\\n## Crashes & Sentry\\n\\nAs with any game in development, crashes happen, but we need to be aware of them to fix them. You\'ve probably encountered the Unreal Crash Reporter screen before, but we\'ve now integrated a new SDK to catch the crashes with the new [Sentry](https://sentry.io/) for Unreal Plugin.\\n\\nSentry is a tool that logs game crashes, fatal errors and context information and sends it to our own server.\\n\\nWe already used Sentry on both client and server before, but now we are integrating it more natively in the client side, helping me to track and receive the game crashes and errors with more useful information.\\n\\nWith this new integration we are getting rid of that generic ugly Unreal Crash Reporter, and _for now_ we have this new ~~another ugly~~ popup that will show up when a crash happen:\\n\\n![](/img/blog/2025-april/crash-helper.webp)\\n\\n<MediaLegend>New Crash Popup displayed just after the game crashed</MediaLegend>\\n\\nWe are now able to get more rich and contextual information that helps even more tracking the real causes of crashes. Without needing ~~that much~~ keep asking for reproducible steps.\\n\\n## Profiling\\n\\nUnreal has an awesome tool called [Unreal Insights](https://dev.epicgames.com/documentation/en-us/unreal-engine/unreal-insights-in-unreal-engine). It is a telemetry tool that capture and analyzes each frame of the game, telling us exactly the bottlenecks and which methods are bottlenecking.\\n\\nI\'ve started using it as I was finding nanos world was with some bottlenecks, and I could find a lot, which helped fixing several performance problems:\\n\\n![](/img/blog/2025-april/unreal-insights.webp)\\n\\n<MediaLegend>Unreal Insights Application dissecting a nanos world frame</MediaLegend>\\n\\n### Profiling Debug\\n\\nI\'ve improved the Profiling Debug section, now it displays the time per second an operation is spending, the amount of calls, the average time each call takes and the max time an operation took in the last second (peaks).\\n\\nAlso, I\'ve hooked Unreal\'s timings to also display the Unreal Global Tick and Slate Tick times:\\n\\n![](/img/blog/2025-april/debug-screen.webp)\\n\\n<MediaLegend>\\n\\tNew \\"frame timings\\" section displaying frame, game, render, rhi and input times<br />\\n\\tAlso \\"profiling\\" section with new timing columns and new Unreal entries (World Tick and Slate Tick)\\n</MediaLegend>\\n\\n### FPS Timings\\n\\nI\'ve integrated our own pane for displaying FPS and timings, replacing the Unreal\'s green overlay. This can be activated in a new dropdown in Debug Settings:\\n\\n![](/img/blog/2025-april/frametimes.webp)\\n\\n<MediaLegend>New Frame Times Settings</MediaLegend>\\n\\nAs you could see in [Profiling Debug](#profiling-debug) above, now you can see all the timings and threads that run in the game:\\n\\n- **Game**: Time the main execution thread (Unreal Ticks, Timers, Networking, Lua Code, UI, etc) spent to run the frame.\\n- **Render**: Time the render thread spent preparing commands for RHI thread\\n- **RHI**: (Render Hardware Interface) Time the DX11 or DX12 thread spent sending operations to GPU.\\n- **GPU**: Time GPU spent rendering the frame.\\n- **Input times**: Delay between pressing an input and the game responding to it.\\n\\nThe game thread will always wait for the other threads to finish (waiting to catch up to either one or two frames behind from the render thread), so you can identify which thread your game-mode is bottlenecking by analyzing which timing is the one equal to the frame time.\\n\\n:::tip\\n\\nYou can learn more about those timings and Unreal Threads in the [Threading Overview](https://dev.epicgames.com/documentation/en-us/unreal-engine/parallel-rendering-overview-for-unreal-engine) Epic\'s documentation page.\\n\\n:::\\n\\n## Game Performance++\\n\\nThanks to Unreal Insights and the new profiling timings, I\'ve managed to identify and fix several performance issues we had:\\n\\n### Console Freeze Fix\\n\\nThe console no longer stutters when opening! We had cases where it froze the game for several seconds, but that\'s now fixed!\\n\\n![](/img/blog/2025-april/console.webp)\\n\\n### Testing Map NavMesh\\n\\nSince some time ago, our `default-testing-map` (which is already aged \ud83d\ude05), started to underperforming very badly. The FPS wasn\'t great and we could clearly see that the GPU wasn\'t being used at it\'s most (we had a main thread (CPU) bottleneck).\\n\\nBy analyzing the frame, I could see that the culprit was it\'s NavMesh being recalculated every frame (as we use Dynamic Nav Mesh generation), and it was spending HUGE time on game thread.\\n\\nThen I ended up figuring out that the reason was some objects in the map causing that:\\n\\n#### That Static Boat\\n\\n![](/img/blog/2025-april/boat-lag.webp)\\n\\n<MediaLegend>Static Boat in the Cabin of Testing Map</MediaLegend>\\n\\nThis Boat is just an Actor in the map with buoyancy enabled, but it had the \\"Can Even Affect Navigation\\" setting enabled, and it was causing all the NavMesh around it being recalculated every frame.\\n\\n#### Props\\n\\n![](/img/blog/2025-april/props-navmesh.webp)\\n\\n<MediaLegend>Props not affecting Nav Mesh anymore</MediaLegend>\\n\\nAnother escalating entity that was also affecting the NavMesh was the Prop. It also had the Affect Navigation toggle enabled, and the performance was being drastically drained when we had a bunch of Props in the map.\\n\\nOf course it could cause some drawbacks, like NPCs walking through Props and kicking them away, but the performance gain is immensurable. And also I\'m studying the possibility to add a new method to programmatically enable/disable Props from affecting the Nav Mesh, so if you really need it, you can enable per Prop.\\n\\nThis fix is absolutely a huge improvement, it\'s very noticeable how smoother is playing on Testing Map now.\\n\\n:::tip\\n\\nThose improvements will not only improve the testing-map, but also all other maps in the game, including yours!\\n\\n:::\\n\\n### Testing Map Shadows\\n\\nAnother issue we were having was with the lighting/shadows of the testing map, we had Dynamic Shadows enabled for all grass meshes, which is usually a bad decision as it consumes a lot of GPU performance.\\n\\nSo I changed all grass shadows to use the Contact Shadows method, which is way efficient, and the visual results were quite very similar:\\n\\n<ComparisonSlider\\n img_left=\\"/img/blog/2025-april/shadows-bef.webp\\"\\n label_left=\\"Before (Dynamic Shadows)\\"\\n img_right = \\"/img/blog/2025-april/shadows-aft.webp\\"\\n label_right=\\"After (Contact Shadows)\\"\\n legend=\\"Comparison Before (with Dynamic Shadows ON) and After (with Contact Shadows ON) focusing on Grass\\"\\n zoom_direction=\\"bottom\\"\\n/>\\n\\nAlso, our Torches were causing huge FPS loss when getting close to it, you can see almost 4ms was spent when looking directly to it.\\n\\nAnd with the change of contact shadows, we could notice a huge performance gain (the Shadow Depths pass went from \xb14.35ms to \xb12.26ms), which frees a lot of GPU usage:\\n\\n<ComparisonSlider\\n img_left=\\"/img/blog/2025-april/shadows-torch-bef.webp\\"\\n label_left=\\"Before (Dynamic Shadows)\\"\\n img_right = \\"/img/blog/2025-april/shadows-torch-aft.webp\\"\\n label_right=\\"After (Contact Shadows)\\"\\n legend=\\"Performance Comparison when near the Torches\\"\\n zoom_direction=\\"top left\\"\\n/>\\n\\n### Actor Ticks\\n\\nAlso, I\'ve found that in the game tick, there were a lot of actors and components ticking every frame, even though they were not being active or being used, and this was taking some considerable percentage of the main thread frame time.\\n\\nJust to mention a few examples:\\n\\n- **Weapons** had several Ticks enabled all the time, to calculate things like blood debounce or the firing cadence, and it has been improved by only activating them when we have the weapon picked up.\\n- **Pawns** (Character & CharacterSimple) had a bunch of components and other meshes active and ticking, such as Parachute or Physics Handles for non authority players, so now they are enabled/disabled on demand based on the need.\\n\\nAmong other small changes, the performance and optimization is way further improved now, allowing even more entities spawned at the same time.\\n\\n## Testing Map Improvs.\\n\\nOther Testing Map improvements made:\\n\\n### Torches On/Off\\n\\n![](/img/blog/2025-april/torches.webp)\\n\\nThe old day/night Torches system was fixed, now it automatically switches ON/OFF based on the time of the day.\\n\\nIt works by hooking the Ultra Dynamic Sky\'s time to detect if it\'s day or night.\\n\\n### Ambiance Sound\\n\\nThe old Ambiance Sounds was also fixed and put in place again, automatically cycling the Day\'s and Night\'s sound based on the time of the day.\\n\\n### Reduced Trees\\n\\n![](/img/blog/2025-april/reduced-trees.webp)\\n\\nI\'ve reduced the amount of trees the Testing Map had, as in some areas it was causing bad visual clarity and even negatively affecting the performance.\\n\\n## Minor Honorable Mentions\\n\\nSome small improvements made:\\n\\n### Main Menu FPS\\n\\nThe Main Menu is now capped to your monitor\'s refresh rate (was previously capped at 120).\\n\\n### Unreal Updated 5.4.4\\n\\nThe Unreal version was updated to the latest patch version 5.4.4, no cooked asset should break in this update.\\n\\n## Conclusion\\n\\nThis month was a great advance for optimization lovers (like me), several low and high-level performance issues were tackled, not to mention the new DLSS features which adds another layer of optimization over everything.\\n\\nA huge THANK YOU to everyone who contributed to reach our \\"Keep the Dev Awake Fund\\" [Ko-fi\'s Goal](https://ko-fi.com/gtnardy/goal) \u2615! Your absolutely rocked it! Your support keeps this project flourishing, and keeps me caffeinated too. \ud83d\ude05\\n\\nAlso, since Ko-fi donations accumulate over time, I\'ve updated it to be a \\"monthly based\\" goal.\\n\\nThere\'s a lot cooking under the hood, and some big things are coming soon\u2122! As always, thank you for being part of this journey! \ud83d\udc99\\n\\nUntil next time!\\n\\n<KofiButton />"},{"id":"march-2025","metadata":{"permalink":"/pt-BR/blog/march-2025","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2025-03-05-march.md","title":"Mar: New Roadmap & Coffee!","description":"New Roadmap & Coffee!","date":"2025-03-05T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":4.71,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"march-2025","title":"Mar: New Roadmap & Coffee!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-march/march-news.webp"},"unlisted":false,"prevItem":{"title":"Apr: Performance & Optimization!","permalink":"/pt-BR/blog/april-2025"},"nextItem":{"title":"Feb: More Profiling & Better Interpolation!","permalink":"/pt-BR/blog/february-2025"}},"content":"import ThemedImage from \'@theme/ThemedImage\';\\n\\n**New Roadmap & Coffee!**\\n\\n![](/img/blog/2023-march/march-news.webp)\\n\\nWelcome to our roundup of the latest updates from the last month!\\n\\n\x3c!--truncate--\x3e\\n\\n## New Roadmap!\\n\\nIntroducing... Our official new **[Roadmap](/roadmap)** page!\\n\\n![](/img/blog/2025-march/roadmap.webp)\\n\\n<MediaLegend>Roadmap Page</MediaLegend>\\n\\nI\'m proudly presenting our new Roadmap page to keep everyone updated on nanos world\'s future plans. This page also catalogs all past implemented features, serving as a great way to reflect on our progress!\\n\\nThe roadmap is divided into four sections:\\n\\n- **\ud83c\udfaf Planned Must-Have Features**: non-negotiable features required for the game\'s release\\n- **\ud83d\udc4d Planned Should-Have Features**: important additions that will improve the game but are not critical for launch\\n- **\ud83d\udcad Under Analysis Features**: desirable features in review and not guaranteed to be worked on\\n- **\u2705 All Released Features**: completed features that are already available in the game\\n\\nYou also can see more details by clicking on each feature:\\n\\n![](/img/blog/2025-march/roadmap-feature.webp)\\n\\n<MediaLegend>Roadmap Feature Description</MediaLegend>\\n\\nThis is just the initial version, and it will continuously be updated with new planned and past features (for sure some were forgotten).\\n\\nAgain I invite everyone that has ideas for new features, please share them on our [Feedback](https://feedback.nanos-world.com), as they are very likely to be included in our Roadmap!\\n\\n<ReferenceLink href=\\"https://docs.nanos-world.com/roadmap\\">\ud83d\udee3\ufe0f Features & Roadmap</ReferenceLink>\\n\\n## Buy me a Ko-fi\\n\\n![](/img/docs/kofi.webp)\\n\\nOver the past years (+5), I\'ve poured my passion and countless hours into developing nanos world. It\'s been a journey fueled by dedication and, admittedly, a fair amount of coffee!\\n\\n:::info\\n\\nNot sure if many of you know, but I\'m really passionate about espresso coffee, and I\'m that guy which use fancy tricks to brew my coffee as beautiful as possible, and I have all those ~~unnecessary~~ accessories from Aliexpress to make an espresso! \ud83d\ude05\\n\\n:::\\n\\n<VideoExternal path=\\"/blog/2025-march/coffee.webm\\" style={{ maxWidth: \\"250px\\" }}/>\\n\\n<MediaLegend>Me brewing espresso coffee</MediaLegend>\\n\\nSo, if you enjoy nanos world and wish to support me and its ongoing development, I\'ve set up a **[Ko-fi](https://ko-fi.com/gtnardy)** page, a website which you can buy me coffee - literally.\\n\\nContributions are entirely voluntary and come with no obligations, but deeply appreciated! You can buy me a \u2615 coffee (or more) whenever you feel like it!\\n\\nIn addition to that, if you want to continuously contribute to my work, there are recurring membership options:\\n\\n![](/img/blog/2025-march/kofi.webp)\\n\\n<MediaLegend>Ko-fi Membership Tiers</MediaLegend>\\n\\n- **\u2615 Single Shot**: A small recurring donation, like buying a single coffee per month.\\n- **\u2b50 Coffee Supplier**: A bigger commitment to supporting me and nanos world, with a special Discord role as a token of appreciation!\\n\\n<KofiButton />\\n\\n## Scripting Improvements\\n\\nAlthough this month had a big focus on organizing our Roadmap, we also had some improvements in scripting!\\n\\n### PlayerConnect Event\\n\\nYour requests were listened! This was indeed a common issue in the community, and we got a solution for you:\\n\\nPreviously, when a player attempted to connect, the server only received a basic connection event through <EventReference type=\\"StaticClass\\" class_name=\\"Server\\" event=\\"PlayerConnect\\" is_static />. with the option to return `false` to block them.\\n\\nNow, we\'re introducing two new methods, that can be called from inside the PlayerConnect event:\\n\\n- <MethodReference type=\\"StaticClass\\" class_name=\\"Server\\" method=\\"KickByAccountID\\" is_static show_class_name /> to Kick a player by their account ID.\\n- <MethodReference type=\\"StaticClass\\" class_name=\\"Server\\" method=\\"BanByAccountID\\" is_static show_class_name /> to Ban a player by their account ID.\\n\\n:::tip\\n\\nThose new methods can be used anywhere in your code, not just inside that event!\\n\\n:::\\n\\n### IsPackageLoaded()\\n\\nWe are introducing a new method for both Client and Server: <MethodReference type=\\"StaticClass\\" class_name=\\"Server\\" method=\\"IsPackageLoaded\\" is_static /> to retrieve if a package is currently loaded.\\n\\n### Merged Methods\\n\\nWe are getting some improvements on Pawn and Character methods:\\n\\n#### Actor.GetSocketTransform()\\n\\nThe Character.GetBoneTransform() method is now deprecated in favor of the new Actor method <MethodReference type=\\"Class\\" class_name=\\"Actor\\" method=\\"GetSocketTransform\\" is_base show_class_name />.\\n\\nThis method is now available for all <Classes.Actor /> classes that have a mesh (<Classes.Character />, <Classes.CharacterSimple />, <Classes.Vehicle />, <Classes.Weapon />, <Classes.StaticMesh />, <Classes.Prop />, etc)!\\n\\n#### Pawn.GetCapsuleSize()\\n\\nThe method <MethodReference type=\\"Class\\" class_name=\\"Pawn\\" method=\\"GetCapsuleSize\\" is_base show_class_name /> is moving to the Base Pawn entity, making it available for both <Classes.Character /> and <Classes.CharacterSimple /> in a more organized way!\\n\\n## Docs Improvements\\n\\n### Navbar\\n\\nThe docs navbar was refined, transforming external links (Issues, Account, etc.) into icons and moving them to the right. Now, only internal navigation tabs remain on the left.\\n\\n![](/img/blog/2025-march/navbar.webp)\\n\\n<MediaLegend>New Docs navbar</MediaLegend>\\n\\n### Changelog\\n\\nOur changelog page also has been improved! We\'ve added a new Markdown renderer to properly format our changelog notes, making it much easier to read:\\n\\n![](/img/blog/2025-march/changelog.webp)\\n\\n<MediaLegend>New Docs Changelog Markdown Renderer</MediaLegend>\\n\\n<ReferenceLink href=\\"https://docs.nanos-world.com/changelog\\">\ud83d\udcc3 Changelog</ReferenceLink>\\n\\n## Conclusion\\n\\nThis month was all about getting organized! I\'ve put a big focus on the Roadmap, arranging all future goals and objectives for nanos world, also I had a little work collecting all the past updates and their timeline to create a cool feature history, although there are still things missing that will be added as they are remembered, just to keep it up to date.\\n\\nI also launched the Ko-fi page as a simple and optional way for those who want to support the me and nanos world. It\'s a nice way to keep the motivation flowing while giving you, the community, another way to be involved!\\n\\nThere\'s also a lot happening behind the scenes, with new features being developed, tested, and refined. I\'ll be rolling out more exciting updates in future blog posts, so stay tuned! And as always, thanks a ton for all the support, you guys are amazing!"},{"id":"february-2025","metadata":{"permalink":"/pt-BR/blog/february-2025","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2025-02-05-february.md","title":"Feb: More Profiling & Better Interpolation!","description":"New Profiling Tools & Better Interpolation!","date":"2025-02-05T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":3.55,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"february-2025","title":"Feb: More Profiling & Better Interpolation!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-february/february-news.webp"},"unlisted":false,"prevItem":{"title":"Mar: New Roadmap & Coffee!","permalink":"/pt-BR/blog/march-2025"},"nextItem":{"title":"Jan: Unreal Engine 5.5 & Enhanced Input!","permalink":"/pt-BR/blog/january-2025"}},"content":"**New Profiling Tools & Better Interpolation!**\\n\\n![](/img/blog/2023-february/february-news.webp)\\n\\nWelcome to our roundup of the latest updates from the last month!\\n\\n\x3c!--truncate--\x3e\\n\\n## Unreal Engine 5.5\\n\\n![](/img/blog/2025-january/ue55.webp)\\n\\nEpic has finally released the long-awaited hotfix **5.5.2** for Unreal! And in the **1.71.0** update, nanos world has been updated to Unreal 5.5 as well!\\n\\nThe Steam branch `bleeding-edge` is now running on 5.5, while `main` remains on 5.4 for now. We strongly recommend that you update your assets as soon as possible to ensure compatibility!\\n\\n## New Profiling Tools\\n\\nWe\'ve introduced several new features and improvements to our profiling toolset!\\n\\n### Network Stats\\n\\nWe\'ve implemented a new profiling feature that displays the amount of network data being used per class during a game session:\\n\\n![](/img/blog/2025-february/entities-network-stats.webp)\\n\\n<MediaLegend>Client Network Stats displaying accumulated bytes usage per class in this session</MediaLegend>\\n\\nOn the server side, a debug message will be output every minute, providing details on the number of bytes sent and received:\\n\\n![](/img/blog/2025-february/network-stats.webp)\\n\\n<MediaLegend>Server Profiling displaying Network stats over the last minute</MediaLegend>\\n\\nTo enable this feature on the client, toggle both `profiling` and `display network stats in the screen` settings.\\n\\nFor the server, start it with the `--profiling` command-line flag.\\n\\n### Network Invokes\\n\\nBy enabling in-game profiling, you can now view the time spent on individual class methods being called:\\n\\n![](/img/blog/2025-february/network-invoke-client.webp)\\n\\n<MediaLegend>Client Profiling Network on Screen now displays Network Invokes times</MediaLegend>\\n\\n## Network Interp Stutters\\n\\nRecent Unreal updates caused issues with network interpolation in poor connection scenarios. Every packet loss or small delay resulted in visible stutters or hitches, as shown in the video below:\\n\\n<VideoExternal path=\\"/blog/2025-february/interp-before.webm\\" />\\n\\n<MediaLegend>Old Interpolation with occasional packet loss, causing stutters/hitches</MediaLegend>\\n\\nWe have significantly improved the client-side interpolation/extrapolation system, preventing these stutters even on weak connections:\\n\\n<VideoExternal path=\\"/blog/2025-february/interp-after.webm\\" />\\n\\n<MediaLegend>New Interpolation with packet loss but no stutters/hitches</MediaLegend>\\n\\nThis improvement currently applies to character movement. We plan to revisit interpolation for physics-based objects soon\u2122.\\n\\n## Cached Vault API\\n\\nWe have implemented an experimental cache system for our Vault, as we know that it\'s currently extremely slow to load the Vault assets, so we implemented an intermediary cache system that speeds a lot the Vault requests:\\n\\n<VideoExternal path=\\"/blog/2025-february/vault-api.webm\\" />\\n\\n<MediaLegend>Vault Loading time reduced down to a second</MediaLegend>\\n\\n:::note\\n\\nAs this is a cache system, the results are internally updated at a frequent rate, expect some seconds delay when updating your content in the Vault and seeing it in game.\\n\\n:::\\n\\n## Docs Improvements\\n\\n### Instala\xe7\xe3o do Servidor\\n\\nWe\'ve updated our [Server Installation](/docs/next/core-concepts/server-manual/server-installation) page with revised minimal OS requirements for setting up a nanos world server on Linux.\\n\\n### API References Pop-up\\n\\nWe\'ve enhanced our documentation with a new component that displays detailed method and event information when hovering over them, improving tutorials and examples:\\n\\n- **Method Reference** example: <MethodReference type=\\"Class\\" class_name=\\"Actor\\" method=\\"SetLocation\\" is_base show_class_name />.\\n- **Event Reference** example: <EventReference type=\\"Class\\" class_name=\\"Entity\\" event=\\"Destroy\\" is_base />.\\n\\n## New Assets Thumbnails\\n\\nWe\'ve refreshed all asset thumbnails photos and fixed missing ones:\\n\\n![](/img/blog/2025-february/new-thumbnails.webp)\\n\\n<MediaLegend>Sandbox Spawn Menu with all thumbnails updated</MediaLegend>\\n\\n## Loading Screen Improvs\\n\\n#### Async Callbacks\\n\\nThe \\"waiting for async callbacks\\" step now displays the number of pending tasks:\\n\\n![](/img/blog/2025-february/loading-screen-amount.webp)\\n\\n#### Smooth Progress\\n\\nAlso, now the progress bars update smoothly instead of jumping between values.\\n\\n## Updated Dependencies\\n\\nWe\'ve updated our internal dependencies to ensure stability and performance:\\n\\n- **CEF** updated to version `132`.\\n- **Ultra Dynamic Sky** Plugin updated to version `8.6` - make sure to update yours too.\\n\\n## Enabled Plugins\\n\\nWe\'ve enabled the **MotionTrajectory** plugin for use in your UGC projects.\\n\\n## Conclusion\\n\\nHope you enjoyed this month\'s updates!\\n\\nI\'m working on putting together a clearer development roadmap and restructuring some parts of the project to make everything run even smoother. Exciting things are on the horizon, and I can\'t wait to share more soon!\\n\\nBig thanks to all of you for your continued support and feedback. It really keeps me motivated. Stay tuned for more awesome updates next month!"},{"id":"january-2025","metadata":{"permalink":"/pt-BR/blog/january-2025","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2025-01-08-january.md","title":"Jan: Unreal Engine 5.5 & Enhanced Input!","description":"Unreal Engine 5.5 & Enhanced Input System!","date":"2025-01-08T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":4.42,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"january-2025","title":"Jan: Unreal Engine 5.5 & Enhanced Input!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-january/january-news.webp"},"unlisted":false,"prevItem":{"title":"Feb: More Profiling & Better Interpolation!","permalink":"/pt-BR/blog/february-2025"},"nextItem":{"title":"Oct: Unreal Engine 5.4 & Loadings!","permalink":"/pt-BR/blog/october-2024"}},"content":"**Unreal Engine 5.5 & Enhanced Input System!**\\n\\n![](/img/blog/2023-january/january-news.webp)\\n\\nWelcome to our roundup of the latest updates from the last months!\\n\\n\x3c!--truncate--\x3e\\n\\n## Unreal Engine 5.5\\n\\n![](/img/blog/2025-january/ue55.webp)\\n\\nAlthough it may feel like just yesterday that we transitioned to 5.4, we decided that we should already upgrade to **5.5** instead of waiting several months for the next 5.6. So we\'ve already started preparing for the transition to Unreal Engine 5.5 and are quite ready for the update!\\n\\nHowever, after several testing, we\'ve decided to hold off until hotfix **5.5.2** is released. The current version (5.5.1) has some known issues, particularly with packaging and user-generated content which are already being addressed by Epic in their [Bug Tracker](https://issues.unrealengine.com/issue/UE-228884).\\n\\nOnce they release this hotfix, we\'ll move forward with the update and allow more space for broad tests with you!\\n\\n## Enhanced Input System\\n\\nWe have finally implemented the new Unreal\'s [Enhanced Input System](https://dev.epicgames.com/documentation/en-us/unreal-engine/enhanced-input-in-unreal-engine)!\\n\\n![](/img/blog/2025-january/input.webp)\\n\\n<MediaLegend>Input Keybinding Settings reworked to handle Unreal\'s Enhanced Input System</MediaLegend>\\n\\nThis required a significant internal overhaul of all our gameplay classes (characters, vehicles, weapons, and menu interactions), which will reset all current configurations.\\n\\nPlease make sure to revisit your keybinding settings and adjust them to your preference after this update is launched!\\n\\n### Scripting Changes\\n\\nIf you were binding to native key bindings, you will need to update your scripts. With the new Enhanced Input System, each Keybinding is now separated in a different name.\\n\\nBefore we registered like this:\\n\\n```lua title=\\"Client/Input.lua\\"\\nInput.Bind(\\"MoveForward\\", InputEvent.Pressed, function(delta)\\n\\t-- Before it returned delta from -1.0 (backwards) to 1.0 (forward)\\n\\tConsole.Log(\\"MoveForward: \\", delta)\\nend)\\n```\\n\\nNow each Input returns delta from 0.0 - 1.0, meaning just the amount pressed, and we need to Bind for each KeyBinding specifically.\\n\\nThis way, `MoveForward` (W) is just for moving forward, `MoveBackward` (S) is just for moving backwards:\\n\\n```lua title=\\"Client/Input.lua\\"\\nInput.Bind(\\"MoveForward\\", InputEvent.Pressed, function(delta)\\n\\t-- Now it returns delta from 0.0 to 1.0\\n\\tConsole.Log(\\"MoveForward: \\", delta)\\nend)\\n\\nInput.Bind(\\"MoveBackward\\", InputEvent.Pressed, function(delta)\\n\\t-- Now it returns delta from 0.0 to 1.0\\n\\tConsole.Log(\\"MoveBackward: \\", delta)\\nend)\\n```\\n\\n:::tip\\n\\nYou can find the exact Binding Name for the native bindings at the KeyBindings settings, by hovering them:\\n\\n![](/img/blog/2025-january/keybindings-names.webp)\\n\\n<MediaLegend>Keybindings settings showing the KeyBinding Name when hovering</MediaLegend>\\n\\n:::\\n\\n## Latest Blog at Main Menu\\n\\nWe\'ve updated the main menu to display the **latest blog news** directly. This new clickable section redirects you to the corresponding post in our news blog!\\n\\n![](/img/blog/2025-january/rss.webp)\\n\\n<MediaLegend>Home Menu Blog News showing the latest Blog post</MediaLegend>\\n\\n## Docs Improvements\\n\\nWe\'ve updated several aspects of our documentation. Here are some improvements:\\n\\n- It has been updated to the latest **Docusaurus** version.\\n- The [**Setting Up Unreal Engine**](/docs/next/assets-modding/creating-assets/setting-up-ue) page has been revised and updated. Some dependencies have been removed and the SDK version was updated.\\n- Several typos and minor bugs have been fixed.\\n- The **API Generator** got several improvements, tweaks and QoL adjustments.\\n- Now **Videos** will auto-play muted.\\n- The **Base Class Pop-up** now shows all its child classes for better clarity:\\n\\n![](/img/blog/2025-january/base-childs.webp)\\n\\n<MediaLegend>Base Class Popup showing child Classes</MediaLegend>\\n\\n## Disconnected Popup\\n\\nWe added a new **Retry** button when you are disconnected from a server, to allow fast reconnection:\\n\\n![](/img/blog/2025-january/retry.webp)\\n\\n<MediaLegend>Disconnect Popup with Retry button</MediaLegend>\\n\\n## Cache Files Location\\n\\nLogs, cache images, cache packages and other temporary files are now stored in the **AppData** directory instead of the game installation directory.\\n\\nThis change resolves issues with restricted directories for non-admin users and centralizes all disposable files for easier management.\\n\\nWe\'ve also updated your House Keeping menu to address the correct new paths.\\n\\n![](/img/blog/2025-january/house-keeping.webp)\\n\\n<MediaLegend>House Keeping menu</MediaLegend>\\n\\n## Updated Dependencies\\n\\nWe\'ve updated our internal dependencies to ensure stability and performance:\\n\\n- **CEF** updated to version 131.\\n- **SteamSDK** updated to version 1.61\\n\\n## Enabled Plugins\\n\\nAs some of you asked, we\'ve enabled the following plugins to be used by your UGC: **PoseSearch**, **AnimationWarping**, **MotionWarping** and **Chooser**.\\n\\n## Tons of Bug Fixes\\n\\nThanks to your reports, we\'ve managed to fix several bugs as well, to list a few:\\n\\n- Fixed random crash on Linux server.\\n- Fixed Achievements not displaying correctly.\\n- Fixed CharacterSimple not syncing Attachables or Paintable data.\\n- Fixed UI Audio Setting not applying correctly.\\n- Fixed some game crashes.\\n- Fixed a Fatal Error related to Highlighting.\\n- Fixed .ogg sounds not playing.\\n- Fixed sounds with auto_play not playing when loaded.\\n- And more.\\n\\nOnce we push the update, you will be able to read all changes in our [Changelog](/changelog).\\n\\n## Conclusion\\n\\nHey all, as this is the first news blog of the year I really hope you enjoyed your holidays and I wish you all a great year 2025!\\n\\nThis news blog was a kick off for us to start off on the right foot, the updates described here are just the beginning of many great news to come! I\'m already preparing awesome new features to make nanos world the best sandbox game ever!\\n\\nThank you for being a part of our journey, and I can\'t wait to share more exciting updates with you soon!"},{"id":"october-2024","metadata":{"permalink":"/pt-BR/blog/october-2024","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2024-10-20-october.md","title":"Oct: Unreal Engine 5.4 & Loadings!","description":"Unreal Engine 5.4 & Loadings!","date":"2024-10-20T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":4.39,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"october-2024","title":"Oct: Unreal Engine 5.4 & Loadings!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2022-october/october-news.webp"},"unlisted":false,"prevItem":{"title":"Jan: Unreal Engine 5.5 & Enhanced Input!","permalink":"/pt-BR/blog/january-2025"},"nextItem":{"title":"Feb: DLSS & Static Lighting!","permalink":"/pt-BR/blog/february-2024"}},"content":"**Unreal Engine 5.4 & Loadings!**\\n\\n![](/img/blog/2022-october/october-news.webp)\\n\\nWelcome to our roundup of the latest updates from the last months!\\n\\n\x3c!--truncate--\x3e\\n\\n## Unreal Engine 5.4\\n\\n![](/img/blog/2024-october/ue54.webp)\\n\\nWe\'re excited to announce an upgrade to Unreal Engine 5.4! This update brings numerous quality-of-life improvements that enhance our development experience. For a detailed look, check out the complete Unreal Engine 5.4 changelog [here](https://www.unrealengine.com/en-US/blog/unreal-engine-5-4-is-now-available).\\n\\n## Loading Improvements\\n\\n![](/img/blog/2024-october/loading-screen.webp)\\n\\nWe\'ve made significant enhancements to our loading screen subsystem:\\n\\n### Faster Maps Loading\\n\\nEntering servers with large levels is now much quicker! We\'ve optimized the loading stage which was doing some work twice and also introduced pre-loading for commonly used assets, which reduces stuttering during gameplay.\\n\\n### Reconnect Logic\\n\\nA new system has been implemented to reattempt connecting if a file fails to download. Additionally, the client will also reconnect if the server reloads packages during the loading screen, resolving scripting desynchronization issues.\\n\\n## Assets Validation Async\\n\\n![](/img/blog/2024-october/validating-assets.webp)\\n\\nOur local Assets Validator has received a major overhaul getting advantage of multi-core processors. Now all asset files are split between all core threads and processed in parallel, greatly improving the Asset Packs loading times.\\n\\nIn our internal tests, an Asset Pack with \xb1130.000 files (\xb150 GB), on an i9 14th gen processor, we saw incredible improvements:\\n\\n:::info Note\\n\\nThe following times are meant to be used as comparison with the other times in the same processor/Asset pack, giving a sense of magnitude of improvement and not absolute times.\\n\\n:::\\n\\nBefore, loading this asset pack for the first time in a _cold read\xb9_ was taking almost 4 minutes and 15 seconds to complete. Now it takes just \xb135 seconds.\\n\\nIn a _warm read\xb2_, it took \xb175 seconds, and not takes just \xb17 seconds.\\n\\nAnd putting together with our internal cache system, reading this Asset Pack (after it was cached by us), it was taking \xb110 seconds, and now it takes less than \xb14 seconds.\\n\\nWe got almost 10x speed boost in a multi-core processor reading Assets Packs for the first time, and almost 2x when reading it after it was cached.\\n\\n| Load          | Before   | After | Speed Change                |\\n| :------------ | :------- | :---- | :-------------------------- |\\n| **Full Cold** | `4m 15s` | `35s` | 7x faster                   |\\n| **Full Warm** | `1m 15s` | `7s`  | 10x faster                  |\\n| **Cached**    | `10s`    | `4s`  | 2.5x faster |\\n\\n_\xb9 **Cold Read**: the files were not read before by the processor during since the OS was started._<br/>\\n_\xb2 **Warm Read**: the files were already read by the processor during this OS startup, and are now cached by the OS, increasing the next read times._\\n\\n:::info Note\\n\\nResults vary based on processor specifications and thread counts.\\n\\n:::\\n\\n## Testing Map Water\\n\\n![](/img/blog/2024-october/water.webp)\\n\\nThe Testing Map Ocean is back!\\n\\nWe\'ve resolved the issue that prevented water from appearing, allowing you to dive in once again. \ud83c\udf0a\\n\\n## Network Authority Debug\\n\\n![](/img/blog/2024-october/debug-name.webp)\\n\\nWe\'ve enhanced the World Network Debug by adding the ID and Class Name of nearby entities, making debugging much easier.\\n\\n## Events.UnsubscribeRemote\\n\\nWe\'ve introduced a new method [Events.UnsubscribeRemote()](/docs/next/scripting-reference/static-classes/events#static-function-unsubscriberemote) to unsubscribe from remote events.\\n\\nThis way the use of [Events.Unsubscribe()](/docs/next/scripting-reference/static-classes/events#static-function-unsubscribe) is now limited to local events only, getting in accordance with the `Events.Subscribe()` and `Events.SubscribRemote()` methods names.\\n\\nMake sure to update your package\'s `compatibility_version` to [1.65.0](/docs/next/core-concepts/packages/compatibility-versions#version-165) to use this new functionality.\\n\\n## 64bit Hash\\n\\nAll internal hashing operations have been upgraded to 64 bits, significantly reducing the likelihood of hash collisions when dealing with hundreds of thousands assets from huge asset packs.\\n\\n## Console.Error & Warn Stack\\n\\nNow when using `Console.Warn()` or `Console.Error()`, the console will output the stack trace of the scripting call, making it easier to identify the source of warnings and errors:\\n\\n![](/img/blog/2024-october/consolewarn.jpg)\\n\\n```lua title=\\"testing/Server/Index.lua\\"\\nfunction MyError()\\n\\tConsole.Error(\\"error from scripting\\")\\nend\\n\\nMyError()\\n```\\n\\n## New Anti-Aliasing Settings\\n\\nWe\'ve added new anti-aliasing options in the settings. You can now choose between disabling it or using Unreal\'s native Temporal AA (**TAA**), **FXAA**, or Temporal Super Resolution (**TSR**):\\n\\n![](/img/blog/2024-october/aa.webp)\\n\\n## Updated Dependencies\\n\\nWe continue updating our internal dependencies to always be up-to-date with the latest bug fixes and security patches:\\n\\n- **CEF**: Version 130.\\n- **DLSS**: Latest version 3.7.20.\\n- **Lua**: Latest version 5.4.7.\\n- **Ultra Dynamic Sky**: Latest version 8.4 (if you use it on your map, make sure to update yours too so your map won\'t crash).\\n- Various other internal libraries (e.g. zip, toml, openssl and more).\\n\\n## Conclusion\\n\\nHey everyone! We\'ve got some important and needed updates since last news blog, but I know things have been a bit slower recently. Some personal factors have contributed to this, but I want to reassure you that the development is still moving forward and far from being halted. I\'m always on the lookout for new ideas and have some exciting plans to bring more updates and improvements to nanos world!\\n\\nI really really appreciate your patience and support during this time. I\'m excited about what\'s ahead and can\'t wait to share more updates with you soon! Thanks for being such an awesome part of our community!"},{"id":"february-2024","metadata":{"permalink":"/pt-BR/blog/february-2024","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2024-02-28-february.md","title":"Feb: DLSS & Static Lighting!","description":"DLSS & Static Lighting","date":"2024-02-28T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":4.2,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"february-2024","title":"Feb: DLSS & Static Lighting!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-february/february-news.webp"},"unlisted":false,"prevItem":{"title":"Oct: Unreal Engine 5.4 & Loadings!","permalink":"/pt-BR/blog/october-2024"},"nextItem":{"title":"Nov: TOML Class & Password Flow!","permalink":"/pt-BR/blog/november-2023"}},"content":"**DLSS & Static Lighting**\\n\\n![](/img/blog/2023-february/february-news.webp)\\n\\nTune in for a roundup of the latest updates from February!\\n\\n\x3c!--truncate--\x3e\\n\\n## DLSS\\n\\nWe finally managed to implement the newest [NVIDIA\'s DLSS 3.5](https://www.unrealengine.com/marketplace/en-US/product/nvidia-dlss) integration in nanos world! This brings us a big performance boost to the game (for RTX users)!\\n\\n:::info\\n\\n[Deep Learning Super Sampling (DLSS)](https://developer.nvidia.com/rtx/dlss) is an NVIDIA RTX technology which uses deep learning neural networks and Tensor Cores on RTX GPUs to deliver faster frame rates, better image quality, and great responsiveness. It provides games with performance headroom to maximize quality settings and increase output resolution and enhances image quality for intense ray traced content.\\n\\n:::\\n\\nThe DLSS settings can be configured through a new video settings section in the menu:\\n\\n![](/img/blog/2024-february/dlss-settings.webp)\\n\\n<MediaLegend>DLSS Video Settings section</MediaLegend>\\n\\n### DLSS Super Resolution\\n\\n:::info\\n\\n**DLSS Super Resolution** uses AI to boost frame rates by rendering fewer pixels and reconstructing high resolution frames. This feature is available for all RTX GPUs.\\n\\n:::\\n\\nHere you can see a comparison of before and then when activating DLSS SR setting:\\n\\n![](/img/blog/2024-february/dlss-off.webp)\\n\\n<MediaLegend>DLSS SR OFF</MediaLegend>\\n\\n![](/img/blog/2024-february/dlss-qua.webp)\\n\\n<MediaLegend>DLSS SR Quality Preset</MediaLegend>\\n\\n![](/img/blog/2024-february/dlss-per.webp)\\n\\n<MediaLegend>DLSS SR Performance Preset</MediaLegend>\\n\\nWe could notice a 50% FPS boost when using Performance Preset, and a 15% increase when using Quality Preset! Without any very noticeable visual degradation in the final result! Just by toggling a setting \ud83e\udd2f!\\n\\n### DLSS Frame Generation\\n\\n:::info\\n\\n**DLSS Frame Generation** uses AI to boost frame rates by generating additional high-quality frames, all while optimizing responsiveness with NVIDIA Reflex. DLSS Frame Generation uses the new Optical Flow Accelerator in GeForce RTX 40 Series GPUs along with NVIDIA Tensor Cores. DLSS Frame Generation requires a GeForce RTX 40 Series GPU and a Reflex SDK integration.\\n\\n:::\\n\\nWe also integrated the Frame Generation technique from DLSS. Unfortunately this only works for RTX 40 Series, but it\'s a great thing to have for who can use it!\\n\\n### More to come\\n\\nIn the future, we will implement more DLSS integrations in the game, such as Ray Reconstruction and Reflex for example, these were just to start and test the integration!\\n\\nAlso, we will be looking to integrate [AMD\'s FidelityFX Super Resolution](https://www.unrealengine.com/marketplace/en-US/product/fidelityfx-super-res-3) plugin to have AMD\'s users happy as well to in a future update \ud83d\ude09.\\n\\n## Static Lighting\\n\\n![](/img/blog/2024-february/static-light.webp)\\n\\nnanos world now supports Static Lighting on your maps!\\n\\n![](/img/blog/2024-february/static-light-subway.webp)\\n\\n<MediaLegend>City Subway Train Modular Map (with baked Static Lights and 300 FPS)</MediaLegend>\\n\\nAnd good news: after some tests, it didn\'t break compatibility with previously cooked assets and maps!\\n\\n## Awful Network & Sync Bug\\n\\nWe finally managed to find and fix a terrible bug that was haunting us for several years, it was very rare but when the whole game happened was crazy and inconsistent.\\n\\nThis was a problem where the clients were sending network packets all in Unreliable mode, always. This caused some network packets to be lost or discarded, or even arrive in wrong order. It was completely breaking the sync and the consistency of the server, because we need to make sure they arrive in order (and arrive indeed).\\n\\nIt was hard to debug because it mainly happened in extreme cases such as bad connection or when the network wire was completely full.\\n\\nOne of the non-obvious consequences of this bug was the massive \\"safe called methods warning\\" (reported on this [issue](https://github.com/nanos-world/issues/issues/970)), which was how we managed to reproduce and find the bug!\\n\\nMany likely many other strange bugs, sync issues and inconsistencies will were solved with this fix as well \ud83d\ude4f.\\n\\n## Miscellaneous\\n\\nSome other minor things we added.\\n\\n### Console Password\\n\\nWe added a new server console command: `password` allowing it to be easily changed in runtime!\\n\\n![](/img/blog/2024-february/password-console.webp)\\n\\n### Menu Low Pass Filter\\n\\nThe escape menu has been improved with a new effect when opening it, before it was reducing the pitch and the volume, which caused some weird (and funny) effect to the game sound. But now we implemented a proper low pass filter to it, which makes it a better effect when opening it during gameplay:\\n\\n<VideoExternal path=\\"/blog/2024-february/low-pass-filter.webm\\" />\\n\\n<MediaLegend>Escape Menu with Low Pass Filter</MediaLegend>\\n\\n## Conclusion\\n\\nWe had some setbacks in the past months and we are just writing this News Blog now! A lot is happening but nothing is being left behind, quite the opposite: we are working hard to give a strong turn to continue the heavy work we always been doing!\\n\\nThanks for continuing to support us, your energies and cheers are extremely important for us to keep working and developing this game of our dreams!\\n\\nWe are planning much more great news for nanos world! Soon\u2122! See you next time! Thank you so much!"},{"id":"november-2023","metadata":{"permalink":"/pt-BR/blog/november-2023","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2023-12-20-november.md","title":"Nov: TOML Class & Password Flow!","description":"New TOML Class & Password Workflow","date":"2023-12-20T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":3.52,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"november-2023","title":"Nov: TOML Class & Password Flow!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2022-november/november-news.webp"},"unlisted":false,"prevItem":{"title":"Feb: DLSS & Static Lighting!","permalink":"/pt-BR/blog/february-2024"},"nextItem":{"title":"Oct: C Module Package & UE 5.3!","permalink":"/pt-BR/blog/october-2023"}},"content":"**New TOML Class & Password Workflow**\\n\\n![](/img/blog/2022-november/november-news.webp)\\n\\nTune in for a roundup of the latest updates from November!\\n\\n\x3c!--truncate--\x3e\\n\\n## New Class: TOML\\n\\nWe are introducing a new class: <UtilityClasses.TOML />.\\n\\nThis is a new utility class aiming to help manipulating TOML files and structures.\\n\\nIt exposes methods such as to provide serialization and deserialization to TOML content, allowing them to be easily converted to Lua structure.\\n\\n## Password Flow\\n\\n![](/img/blog/2023-november/password.webp)\\n\\nWe reworked how servers with password work.\\n\\nBefore we were sending the password before knowing if the server was or not passworded, this was not good since some cases didn\'t work, such as following friends connected in passworded servers, making it always fail to connect because no password prompt was presented.\\n\\nBut with this new change, the client will always wait the server to say if it requires a password or not. Making then the every connection flow to work with passworded servers from now on.\\n\\nNow always when you attempt to connect to a passworded server, you will be prompted with the password popup asking for it before proceeding with the connection!\\n\\n## Special Holidays Themes\\n\\n![](/img/blog/2023-november/christmas-theme.webp)\\n\\nWe\'ve automated the theming of the game UI, now when we come close to Christmas or Halloween, the main menu UI will change automatically to the proper theme!\\n\\nWith this improvement, it\'s easier to add new themes for other holidays as well! Which will be adding when the time comes!\\n\\n## File Class Access\\n\\nWe implemented a new internal access system for <Classes.File /> Class that changes how the scripting can access files in the File System.\\n\\nNow on Client side, it\'s allowed to **read** any file from the `Packages/` folder, but **write** is still only allowed to the default `.transient/` folder.\\n\\nThis expands the permissions of files access on client side, as until then it was only allowed inside the .transient/ folder.\\n\\nOn the server the rule keeps the same: it\'s possible to read and write to any file from inside the server directory (except Config.toml itself).\\n\\n## In Game Server\\n\\n![](/img/blog/2023-november/new-game.webp)\\n\\nWe did several improvements in the **In Game Server**, and now changing the map or restarting the server will not cause it to be closed (as the host was disconnecting to reconnect).\\n\\nThose changes required a bunch of refactoring internally but now everything has been fixed and works as it should!\\n\\n## Miscellaneous\\n\\nSome minor changes and improvements that were made:\\n\\n### Input.Unbind\\n\\nWe added a new parameter to [Input.Unbind()](/docs/next/scripting-reference/static-classes/input#static-function-unbind): `callback`, so now it\'s possible to unbind a specific function (like how Events.Unsubscribe works).\\n\\n### Player Methods\\n\\nWe added two new methods to <Classes.Player />: [SetCameraFOV()](/docs/next/scripting-reference/classes/player#function-setcamerafov) and [SetCameraSpeedSettings()](/docs/next/scripting-reference/classes/player#function-setcameraspeedsettings), which allows customizing the FOV and the speed of the floating pawn when not possessing a Character!\\n\\n### Enabled PCG Plugin\\n\\nWe enabled the PCG Plugin in the base game, so it\'s now possible to you to use the new Unreal Engine 5\'s PCG features in your maps!\\n\\n### Several Bug Fixes\\n\\nAlso this month we got a bunch of bug fixes worked on, which you can read in detail in our [Discord\'s Changelog Channel](https://discord.com/channels/124107916432113666/680526360015274047). But to summarize a few:\\n\\n- Canvas always black\\n- Trigger on Client not working\\n- Level Streaming making the game to crash\\n- Database and File locking connection and files when restarting packages, requiring to restart the server\\n- Server not sending Server\'s Synced Values to newly connected players\\n- Package.toml not being generated correctly\\n- And more...\\n\\n## Conclusion\\n\\nDespite being more succinct, I didn\'t want to skip writing this blog news! We got some cool additions such as the TOML helper class and other improvements, and a bunch of important bug fixes as well!\\n\\nI wanted to thank everyone for supporting our trajectory this year and all the help given! Next year we gonna have lots of news that we are very excited to share!\\n\\nDue to Christmas and New Year holidays, I am not sure if we will have a December blog.\\n\\nSee you next year! Happy Christmas and happy New Year to all of us!!!"},{"id":"october-2023","metadata":{"permalink":"/pt-BR/blog/october-2023","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2023-11-15-october.md","title":"Oct: C Module Package & UE 5.3!","description":"C Module Package & Unreal Engine 5.3 Update!","date":"2023-11-15T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":3.77,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"october-2023","title":"Oct: C Module Package & UE 5.3!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2022-october/october-news.webp"},"unlisted":false,"prevItem":{"title":"Nov: TOML Class & Password Flow!","permalink":"/pt-BR/blog/november-2023"},"nextItem":{"title":"Aug: Modules, Requires & Safety!","permalink":"/pt-BR/blog/august-2023"}},"content":"**C Module Package & Unreal Engine 5.3 Update!**\\n\\n![](/img/blog/2022-october/october-news.webp)\\n\\nTune in for a roundup of the latest updates from October!\\n\\n\x3c!--truncate--\x3e\\n\\n## New Package Type: C Module\\n\\nWe are introducing a new Package type: **C Module**!\\n\\nIn the last Blog News I talked about the refactoring I was making in the Modules and the DLLs loading system, so far we had the `Modules/` root folder we could load .dlls and .so pre-compiled binaries to be executed by the Lua, as they could then be loaded with `Package.Require()`.\\n\\nIn that blog I talked about an improvement that I made that allowed binary libraries to be loaded not by Lua\'s `require()` anymore, but now by my own loading system, then allowing the `Package.Require()` to be used for it (improving the sandboxing and the safety when loading these custom libraries).\\n\\nNow we have a totally dedicated Package type for this, so it is no longer necessary to explicitly use Package.Require to load the DLLs, we can now just load the Module\'s Package, which will be configured with the list of DLLs, being automatically loaded when the package load.\\n\\nAlso, so it is possible to upload those Module packages to the Vault, integrating everything!\\n\\nSee more information in the dedicated C Module page:\\n\\n<ReferenceLink href=\\"core-concepts/packages/c-module\\">C Module Package</ReferenceLink>\\n\\n## Unreal Engine 5.3\\n\\n![](/img/blog/2023-october/ue53.webp)\\n\\nWe finally updated nanos world Unreal Engine version to the latest 5.3! We also are already on the latest hotfix 5.3.2.\\n\\nThis version brought many many improvements overall, but also we are still figuring some issues related to our native maps which are not working properly with some certain video settings.\\n\\n## Misc\\n\\nHere it goes a digest of minor features and improvements made throughout this month:\\n\\n### GetAllValuesKeys\\n\\nNow all entities, the Static Server and Client class has a new method `GetAllValuesKeys`, which returns a list with all the keys of the sets of values\\n\\n### Restart & ChangeMap Events\\n\\nWe got two new events to Server: `Restart` and `ChangeMap`, those are triggered when the server is restarted and when the map is changed (by console or through scripting).\\n\\n:::note\\n\\nNote that when the map changes, the server also restarts, triggering both events.\\n\\n:::\\n\\n### Improved Table.Dump\\n\\nI have made some improvements in our `Table.Dump`, now it generates a Lua compatible format, which can be easily copy and pasted in the code. Example:\\n\\n```lua title=\\"Lua Code\\"\\nConsole.Log(NanosTable.Dump(Server.GetMaps()))\\n```\\n\\n```lua title=\\"Output\\"\\n{\\n    [1] = {\\n        [\\"author\\"] = \\"nanos\u2122\\",\\n        [\\"compatible_game_modes\\"] = {\\n            [1] = \\"sandbox\\",\\n        },\\n        [\\"key\\"] = \\"nanos-world::BlankMap\\",\\n    },\\n    [2] = {\\n        [\\"author\\"] = \\"nanos\u2122\\",\\n        [\\"compatible_game_modes\\"] = {},\\n        [\\"key\\"] = \\"nanos-world::EmptyMap\\",\\n    },\\n    [3] = {\\n        [\\"author\\"] = \\"nanos\u2122\\",\\n        [\\"compatible_game_modes\\"] = {\\n            [1] = \\"sandbox\\",\\n        },\\n        [\\"key\\"] = \\"nanos-world::OceanMap\\",\\n    },\\n    [4] = {\\n        [\\"author\\"] = \\"nanos\u2122\\",\\n        [\\"compatible_game_modes\\"] = {\\n            [1] = \\"sandbox\\",\\n        },\\n        [\\"key\\"] = \\"nanos-world::TestingMap\\",\\n    }\\n}\\n```\\n\\n### Zip Cleanup\\n\\nNow all downloaded .zip files from Asset Packs that are downloaded from Vault are deleted automatically, freeing up a lot of disk space! (This should be done way before \ud83d\ude1c).\\n\\n:::note\\n\\nNote that existing .zip files in the Asset\'s .download/ folder will still remain, you need to cleanup manually or use the House Keeping tab to do so.\\n\\n:::\\n\\n## Halloween Event\\n\\n![](/img/blog/2023-october/halloween.webp)\\n\\nLast month we got our Halloween event, in which we feature Halloween themed game-modes and make the game available to be played by the whole Steam community through it\'s Playtest system.\\n\\nThis year Steam made it quite differently, not promoting games with Halloween events, but only Halloween (horror) games itself, which unfortunately didn\'t promote nanos world as well as it did last year.\\n\\nBut we would like to thank everyone that participated in creating new game-modes for nanos world, those new game-mode are always a great addition to our Vault!\\n\\nWe will be highlighting Halloween created content in your Vault with special tags and badges!\\n\\n## Conclusion\\n\\nLast month we didn\'t get a news blog (for the first time since the beginning), but now we are back to the routine!\\n\\nThis month I wanted to give a definitive solution to our Module system, which is now much more consolidated to be used more widely and better integrated with the rest of the core systems!\\n\\nThe Unreal 5.3 update was also a big step we\'ve been patiently waiting to make, as we didn\'t update to Unreal 5.2, we\'ve been almost a year without updating our Unreal version. It is always good to be updated with the last versions!\\n\\nAll other miscellaneous improvements were made thanks to your suggestions and bug reports! Once again thank you for keeping doing so and supporting nanos world!\\n\\nSee you next month!"},{"id":"august-2023","metadata":{"permalink":"/pt-BR/blog/august-2023","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2023-09-06-august.md","title":"Aug: Modules, Requires & Safety!","description":"Package Require, Modules, Safety, Docs++ and more!","date":"2023-09-06T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":5.85,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"august-2023","title":"Aug: Modules, Requires & Safety!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2022-august/august-news.webp"},"unlisted":false,"prevItem":{"title":"Oct: C Module Package & UE 5.3!","permalink":"/pt-BR/blog/october-2023"},"nextItem":{"title":"Jul: Gizmo & Unreal Engine 5.3!","permalink":"/pt-BR/blog/july-2023"}},"content":"import { Classes, MediaLegend } from \'@site/src/components/_nanos\';\\n\\n\\n**Package Require, Modules, Safety, Docs++ and more!**\\n\\n![](/img/blog/2022-august/august-news.webp)\\n\\nTune in for a roundup of the latest updates from August!\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Async Operations Improvs\\n\\nIn nanos world we have a bunch of operations and methods that run on background, including core/internal and scripting operations (like `HTTP.RequestAsync`, `File.ReadAsync`, `SceneCapture.EncodeToBase64Async`, etc), when executed, those methods start a new thread to be executed asynchronously.\\n\\nThe trickiest part is keeping control of them, i.e. we can\'t fully destroy a **File** entity until it\'s async operations are finished, this is why the server could freeze for some seconds if we attempt to destroy a File that has is performing async reads executing (or when reloading a package that has a bunch of them).\\n\\nThe problem with it is that until last update we had a global control of all threads running, i.e. if we wanted to destroy a File, we needed to wait for **all** async operations to finish to make sure no operation related to that File was still running.\\n\\nBut this changed with this new update! Now we have a new system controlling all operations that are running **per-entity**, meaning that one entity will not be affected (or affect) any other part of the server by needing to wait for something that is not required by it.\\n\\nThis improvement also fixed a bunch of deadlocks we were having and improved a lot the overall stutters when dealing with async methods.\\n\\n\\n## Package.Require Caching\\n\\nWe got some improvements on how `Package.Require` works internally, and also it got a new parameter: `force_load`.\\n\\nNow it caches the return value of a file to be returned if you try to load the file again. You can bypass this behavior by passing `true` to the new parameter added: [`Package.Require(file, force_load)`](/docs/next/scripting-reference/static-classes/package#static-function-require).\\n\\n\\n## New Modules Behavior\\n\\nModules are external native code (`.dll` or `.so`) that you can run on the server.\\n\\nRight now they work by looking for your binary files inside the `Server/Modules/` folder, then you can load them by using the native method `require(\\"module_name\\")`.\\n\\nThis workflow is undergoing a great improvement in the upcoming updates. In the future, we have the goal to make modules to behave like Packages - i.e. creating a Package of type **Module** that will load binaries in a standalone way, this way we can have it available as Packages on our Store/Vault and they can be loaded in a more standard way (with package dependencies or `Package.Require()`).\\n\\nSo with that in mind, we did a first step towards that: we implemented our own binary loader, having control over loading .dlls or .so without needing the native `require()` anymore.\\n\\nThis way, now *temporarily*\\\\* `Package.Require()` can load **.dlls**/**.so** and `require()` is now just an alias to `Package.Require()`, making everything still backwards compatible.\\n\\n:::tip\\n\\nThis aliasing thing also solves several bugs and problems related to the native `require`, and makes everything to stay under our sandboxed environment control.\\n\\n:::\\n\\n:::note\\n\\n*Temporarily as in the future we may change the way to load binary modules with the new Modules Packages type.\\n\\n:::\\n\\nAt the highest level, nothing changed and should keep working as expected, but under the hood everything works different now and allows us to expand and advance to newer implementations!\\n\\n\\n## Scripting Safety\\n\\nWe are implementing a new layer of security on server side to prevent malicious code to run without the server creator be aware. Please let me know your opinion regarding those changes:\\n\\n\\n### Unsafe Libraries\\n\\nNow the methods `os.execute`, `os.rename`, `os.remove`, `os.exit`, `os.getenv`, `os.tmpname`, `os.setlocale`, `dofile`, `loadfile` and all `io.*` can only be executed if the server is started with the new command-line parameter: `--enable_unsafe_libs`.\\n\\nWe\'re studying the possibility to make this a per-package setting defined in the Package.toml instead of requiring that command line to be started, this way the server owner is alerted if a Package is \\"potentially unsafe\\" (as the Packages using those methods will not work if started through the New Game Menu right now).\\n\\n\\n### File Access\\n\\nThis way, all file access is recommended to be made through the <Classes.File /> class (instead of `io.*`), having a sandboxed and secure way of accessing files.\\n\\nAnd in addition to that, now <Classes.File /> can\'t access the `Config.toml` file directly anymore, to prevent malicious packages from stealing the server\'s token for example.\\n\\n\\n## Recursive Scripting Tables\\n\\nWe did a big improvement in our internal serialization/deserialization implementation when passing data from Lua to our Native methods (or scripting events).\\n\\nBefore we had a system that suppressed recursive tables (tables with references to any parent table) from being passed if they were already referenced in that stack of deserialization (to avoid infinite loops), but now we improved our algorithm and we can pass recursive tables!\\n\\nInternally they are cached in case we want to deserialize a same table, and it\'s value is just dereferenced back to lua stack!\\n\\n\\n## New Methods and Params\\n\\nSeveral new methods and parameters were added to classes, to mention a few:\\n\\n- New parameter to [File.GetDirectories()](/docs/next/scripting-reference/classes/file#static-function-getdirectories) and [File.GetFiles()](/docs/next/scripting-reference/classes/file#static-function-getfiles): `max_depth`, to limit the folder depth of searching.\\n- New method [Assets.GetAssetPath()](/docs/next/scripting-reference/static-classes/assets#static-function-getassetpath) to return the real asset path given an asset reference.\\n- New method [Character.GetVehicleSeat()](/docs/next/scripting-reference/classes/character#function-getvehicleseat) to return the current seat index of the current vehicle.\\n- New method [Client.Disconnect()](/docs/next/scripting-reference/static-classes/client#static-function-disconnect) to disconnect myself.\\n- New method [Viewport.GetViewportScale()](/docs/next/scripting-reference/static-classes/viewport#static-function-getviewportsize) to get the viewport size.\\n- New method [CharacterSimple.CallAnimationBlueprintEvent()](/docs/next/scripting-reference/classes/character-simple#function-callanimationblueprintevent) to call an event on the Animation Blueprint instance.\\n\\n\\n## Docs Improvements\\n\\nWe added new **Base Classes** Pages and API to the docs: <Classes.Vehicle /> and <Classes.Pawn /> to unify all shared methods between <Classes.VehicleWater /> & <Classes.VehicleWheeled /> and <Classes.Character /> & <Classes.CharacterSimple />.\\n\\nThis way we have less duplicated methods and events to maintain between those classes.\\n\\n\\n## Conclusion\\n\\nSafety is one of the main concerns in sandbox games like nanos world, as we are always loading and running third-party created scripts and packages, we consider it very important for servers creator to be able to fully trust and know what they are executing. This month we got a great improvement advance about this, and we will definitely continue to improve that in the next updates.\\n\\nAlso the Modules upgrade is a very important improvement for nanos world to become more robust, for the next updates we will move forward with the consolidation of the Module Package and tying everything together.\\n\\nA small note of Unreal 5.3: we are still waiting it\'s fully release, until that we will not move forward to update the game.\\n\\nAs always, if you have suggestions or ideas, don\'t hesitate to post it on our [Feedback Hub](https://feedback.nanos-world.com)! Thanks for another month!"},{"id":"july-2023","metadata":{"permalink":"/pt-BR/blog/july-2023","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2023-08-16-july.md","title":"Jul: Gizmo & Unreal Engine 5.3!","description":"New Gizmo Class, Improved HTTP Class, Lua Updated, Unreal Engine 5.3 and more!","date":"2023-08-16T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":4.07,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"july-2023","title":"Jul: Gizmo & Unreal Engine 5.3!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-july/july-news.webp"},"unlisted":false,"prevItem":{"title":"Aug: Modules, Requires & Safety!","permalink":"/pt-BR/blog/august-2023"},"nextItem":{"title":"Jun: VehicleWater, Smooth Net Sync!","permalink":"/pt-BR/blog/june-2023"}},"content":"**New Gizmo Class, Improved HTTP Class, Lua Updated, Unreal Engine 5.3 and more!**\\n\\n![](/img/blog/2023-july/july-news.webp)\\n\\nTune in for a roundup of the latest updates from July!\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## New Class: Gizmo\\n\\nI am happy to introduce a new wonderful class: <Classes.Gizmo />!\\n\\n![](/img/docs/gizmo.webp)\\n\\n<MediaLegend>Gizmo</MediaLegend>\\n\\nThis is a custom tool to manipulate objects, providing a way to change it\'s location, rotation and scale through an easy 3D transformation tool!\\n\\n<VideoExternal path=\\"/blog/2023-july/gizmo.webm\\" />\\n\\n<MediaLegend>Using Gizmo class with Props</MediaLegend>\\n\\nIt\'s usage is really easy and simple! The Gizmo has a `Transform` event which triggers always when it is updated, moved or changed:\\n\\n```lua title=\\"Client/Index.lua\\"\\nlocal my_prop = Prop(Vector(), Rotator(), \\"nanos-world::SM_Cube\\")\\n\\nlocal gizmo = Gizmo()\\n\\n-- To get the Gizmo location, we just subscribe to it\'s Transform event\\ngizmo:Subscribe(\\"Transform\\", function(self, location, rotation, scale)\\n    my_prop:TranslateTo(location, 0.02)\\n    my_prop:RotateTo(rotation, 0.02)\\n    my_prop:SetScale(scale)\\nend)\\n```\\n\\nFor more examples and complete documentation, please refer to the official page:\\n\\n<ReferenceLink href=\\"next/scripting-reference/classes/gizmo\\">Gizmo Class</ReferenceLink>\\n\\n\\n## Server Restart\\n\\nWe\'ve got a new built-in server console command: `restart`. This new command does reconnect all the players and restart all the running packages!\\n\\nAlso, we\'ve got a new method [`Server.Restart()`](/docs/next/scripting-reference/static-classes/server#static-function-restart) to allow the same functionality but programmatically through scripting.\\n\\n\\n## HTTP Client Side\\n\\nThe <StaticClasses.HTTP /> class was updated and now is present on client side too! Allowing scripters to make Async HTTP Requests on client side as well!\\n\\n:::note\\n\\nOn Client side it\'s only possible to make Async HTTP requests, otherwise it would freeze the main game thread.\\n\\n:::\\n\\n\\n### HTTP Enum Method\\n\\nAlso we got an improvement in the HTTP methods. Now [`HTTP.Request()`](/docs/next/scripting-reference/static-classes/http#static-function-request) and [`HTTP.RequestAsync()`](/docs/next/scripting-reference/static-classes/http#static-function-requestasync) have the `method` parameter changed to an Enum: <Enums>HTTPMethod</Enums> (was a string).\\n\\nThis way we get more organized and less prone to passing invalid values.\\n\\n:::tip\\n\\nThis will not break change as I implemented a new way to warn you if you pass an old parameter type.\\n\\n:::\\n\\n\\n## Unreal Engine 5.3\\n\\n![](/img/blog/2023-july/ue53.webp)\\n\\nIn the last news blog I announced that I was going to update the game to Unreal 5.2, but last week we\'ve got the [announcement](https://forums.unrealengine.com/t/unreal-engine-5-3-preview/1240016) that UE 5.3 was just released as Preview. Usually after entering preview, it takes about 1-2 months to be officially released.\\n\\nThe Unreal 5.2 update was quite ready already, but with that in mind I took the decision to postpone it\'s release and wait for 5.3 instead. This way we don\'t need to pass through all the trouble of updating all the assets twice, and do it only once when it get fully released!\\n\\n\\n## Directory/Files Access\\n\\nWe added two new Static Methods to our <Classes.File /> Class: [`File.GetDirectories()`](/docs/next/scripting-reference/classes/file#static-function-getdirectories) and [`File.GetFiles()`](/docs/next/scripting-reference/classes/file#static-function-getfiles), which allow accessing any file from inside the server (or client .transient/) folder.\\n\\nThis is an improvement over the other methods `Package.GetDirectories()`/`GetFiles()` as it is not limited to only accessing Package files.\\n\\n\\n## VehicleWater Methods\\n\\nI am still improving and tweaking our latest new class <Classes.VehicleWater />. Thus I added two new methods to help customizing it:\\n\\n- [`:SetEngineOffset()`](/docs/next/scripting-reference/classes/vehicle-water#function-setengineoffset) to change the where sounds and the thruster is attached\\n- [`:SetThrustStrength()`](/docs/next/scripting-reference/classes/vehicle-water#function-setthruststrength) to increase/decrease the engine force!\\n\\n\\n## Updated Lua 5.4.6\\n\\nI also upgraded our Lua version to the latest 5.4.6 update (we were on 5.4.3).\\n\\nThose Lua minor updates don\'t bring any big improvement or change, just small bug or security issues fixes, but it\'s always good to stay up-to-date!\\n\\n\\n## Conclusion\\n\\nThis was a concise month with some very interesting additions such as the Gizmo class and the extension of the File and HTTP classes, as well as several fixed bugs we performed that can be found in detail on our Changelog in our [Discord](https://discord.nanos-world.com).\\n\\nThe new Gizmo class is an awesome addition that may facilitate the creation of custom build and editor modes to help creating and customizing maps within the game! Now it\'s up to your creativity to make good usage of it! I\'m looking forward to see Build Modes coming up with that!\\n\\nThe Unreal 5.2 update was quite ready, all the needed migration code were updated, but considering Unreal is already releasing the next UE 5.3, I think we may took advantage of that and wait a little bit to make a big update to 5.3 directly instead.\\n\\nThank you for another month of support and help, as always! See you next month!"},{"id":"june-2023","metadata":{"permalink":"/pt-BR/blog/june-2023","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2023-07-12-june.md","title":"Jun: VehicleWater, Smooth Net Sync!","description":"VehicleWater, Smooth Network Sync, CEF Updated, Assets.toml Generator and more!","date":"2023-07-12T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":4.61,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"june-2023","title":"Jun: VehicleWater, Smooth Net Sync!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-june/june-news.webp"},"unlisted":false,"prevItem":{"title":"Jul: Gizmo & Unreal Engine 5.3!","permalink":"/pt-BR/blog/july-2023"},"nextItem":{"title":"May: Widget 3D, Asset Meta Data!","permalink":"/pt-BR/blog/may-2023"}},"content":"**VehicleWater, Smooth Network Sync, CEF Updated, Assets.toml Generator and more!**\\n\\n![](/img/blog/2023-june/june-news.webp)\\n\\nTune in for a roundup of the latest updates from June!\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## New Class: VehicleWater\\n\\nWe are proud to introduce our new Class: <Classes.VehicleWater />! this is still a bare minimum concept class, but with the main feature working: Driving over Water with all the usual Vehicle capabilities!\\n\\nThis new VehicleWater class works like the Vehicle class, supporting adding custom doors, tweaking it\'s power and having Characters entering doors and attaching to a specific position for each door. All Vehicle events of characters entering/leaving work as well!\\n\\n<VideoExternal path=\\"/blog/2023-june/boat-01.webm\\" />\\n\\n<MediaLegend>VehicleWater concept class piloting</MediaLegend>\\n\\nIt procedurally generates the physics pontoons needed to float properly over the Water!\\n\\n<VideoExternal path=\\"/blog/2023-june/boat-02.webm\\" />\\n\\n<MediaLegend>VehicleWater concept class piloting interacting with waves</MediaLegend>\\n\\nI still want to keep improving this new Class, as well add new animations to the Character. I also did some tests integrating Unreal\'s Water foaming but it required a lot of hacky solutions that weren\'t scalable, this is something I will keep working on to try to bring the best visuals as possible!\\n\\nPlease provide us feedback and suggestions so we can keep improving and adding new features to this new class!\\n\\n:::tip\\n\\n*Wast3d, enjoy \ud83d\ude4f*\\n\\n:::\\n\\n\\n## Renamed Vehicle Class\\n\\nWith the addition of the new <Classes.VehicleWater /> Class, we are renaming the old `Vehicle` class to `VehicleWheeled`, this way we will open the doors for having multiple types of Vehicles (in the future being able to have Air, Plane, Helicopter vehicles types too).\\n\\nThe scripts using Vehicle just got warnings when using the old `Vehicle` name.\\n\\n\\n## ADK Assets.toml Generator\\n\\nWith the latest month update of [Assets Metadata](/blog/may-2023#assets-meta-data), we are now able to include custom data for each asset in our Asset Pack.\\n\\nSo we improved our ADK\'s Assets.toml Generator to also optionally include the Bounds information for all Static Meshes:\\n\\n![](/img/docs/adk-04.webp)\\n\\n```toml title=Assets.toml\\n[assets.static_meshes]\\n    SM_Cube = { path = \\"Meshes/SM_Cube\\", bounds = { origin = \\"Vector(0.000, 0.000, 0.000)\\", box_extent = \\"Vector(50.000, 50.000, 50.000)\\", sphere_radius = 86.602539 } }\\n```\\n\\nThis can be accessed through scripting like (on server side!!):\\n\\n```lua title=Server/Index.lua\\nfor _, asset in pairs(Assets.GetStaticMeshes(\\"nanos-world\\")) do\\n    local bounds = asset.bounds\\n    Console.Log(bounds.origin) -- Vector(0.000, 0.000, 0.000)\\n    Console.Log(bounds.box_extent) -- Vector(50.000, 50.000, 50.000)\\n    Console.Log(bounds.sphere_radius) -- 86.602539\\nend\\n```\\n\\n\\n## Default Assets Category\\n\\nAlso our Default Asset Pack got categorized! A new [metadata](/docs/next/core-concepts/assets#asset-meta-data) `category` was added to most of the built-in assets, and can be get like this:\\n\\n```lua title=Index.lua\\nfor _, asset in pairs(Assets.GetStaticMeshes(\\"nanos-world\\")) do\\n    Console.Log(asset.category) -- e.g. \\"furniture\\"\\nend\\n```\\n\\nThis replaces the old way Sandbox was doing to categorize the assets, before having a hardcoded Lua file with all assets in a table pointing to a category, now it supports you creating your custom Asset Pack and add the category MetaData to it to be integrated with the Sandbox convention!\\n\\n\\n## Attached Mesh Bounds\\n\\nWe got some changes on Attached Mesh methods, now they allow defining if it will use parent bounds or not when being attached. They got a new last parameter:\\n\\n```lua\\ncharacter:AddStaticMeshAttached(\\"hair\\", \\"nanos-world::SM_Hair_Long\\", \\"hair_male\\", true)\\ncharacter:AddSkeletalMeshAttached(\\"tie\\", \\"nanos-world::SK_Tie\\", false)\\n```\\n\\nThis fixes some cases when an attached mesh keeps flickering when it is attached to an entity with a smaller/tiny base mesh.\\n\\n\\n## Smoother Network Sync\\n\\nWe got a huge improvement in our netcode related to synchronizing location/rotation snapshots of dynamic actors.\\n\\nYou can notice Props, Pickables and Vehicles are now way more fluid when other players are driving or physically interacting with them!\\n\\n\\n## Updated CEF\\n\\nWe finally managed to update our CEF version to the latest CEF build (114) successfully, we weren\'t able to do so as it was not working on linux builds due some unknown reason, but finally after almost 1 year without updating, the latest CEF version worked again for Linux users. We are now up to date with the latest optimizations and security builds!\\n\\n\\n## Lots of Bug Fixes\\n\\nBut besides the news, we also had more than 10 significant bugs fixes and small improvements that have been made.\\n\\nJust to mention a few:\\n\\n- Server side Pickables not returning the real location if are being handled.\\n- Server side crashes.\\n- Random High Ticks on server due heavy load.\\n- JSON parser not converting keys properly\\n- CEF JSON parser not converting to lua arrays properly.\\n- Multiple Player Spawn event.\\n- Character Physical animation not resetting.\\n- And more...\\n\\nCheck the complete list on our [Discord\'s](https://discord.nanos-world.com) Changelog channel!\\n\\n\\n## Conclusion\\n\\nThis was a shorter news blog than the usual as last month I\'ve moved to a new apartment and that resulted in less time focused, but now things are getting back to normal again! \ud83d\ude0e\\n\\nThis VehicleWater Update was something I had been working already for some time at a slow pace, some months ago I\'ve refactored all the systems internally related to Vehicles and Characters interaction to allow more vehicle child types and leave the interaction of \\"Character\\" entities with all \\"Vehicles\\" more generically and this allowed us to create a new Vehicle class just for Water in a modular way!\\n\\nAlso I will try to dedicate some time to upgrade our Unreal version to the latest UE 5.2, now that Epic released the first hotfix we may be more stable to do that!\\n\\nThank you for your time for this another month, your support is immensely important as always!"},{"id":"may-2023","metadata":{"permalink":"/pt-BR/blog/may-2023","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2023-06-07-may.md","title":"May: Widget 3D, Asset Meta Data!","description":"Widget 3D, Asset Meta Data, Vault Upload, Client Side Trigger & more!","date":"2023-06-07T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":6.47,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"may-2023","title":"May: Widget 3D, Asset Meta Data!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-may/may-news.webp"},"unlisted":false,"prevItem":{"title":"Jun: VehicleWater, Smooth Net Sync!","permalink":"/pt-BR/blog/june-2023"},"nextItem":{"title":"Apr: Vehicle Health, Docs++!","permalink":"/pt-BR/blog/april-2023"}},"content":"**Widget 3D, Asset Meta Data, Vault Upload, Client Side Trigger & more!**\\n\\n![](/img/blog/2023-may/may-news.webp)\\n\\nTune in for a roundup of the latest updates from May!\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Easier Upload to Vault\\n\\nWe\'re excited to announce new easier ways to upload new versions of your Packages and Asset Packs to the Vault!\\n\\n\\n### Upload through CLI\\n\\nWe are adding a new CLI command, `package upload` and `assets upload`, that allows you to effortlessly upload new versions of your Package or Asset Pack through the CLI (Command Line Interface).\\n\\nThis system validates, compresses, and uploads the new version of your local resource directly to the Vault. It streamlines the process, saving you time and effort.\\n\\n```shell title=\\"Terminal\\"\\n./NanosWorldServer.exe --cli upload package default-weapons\\n```\\n\\n![](/img/blog/2023-may/cli-upload.webp)\\n\\n\\n### Upload through the UI\\n\\nWe\'ve also made it possible to upload new Packages or Asset Packs versions directly from the Vault Manage tab.\\n\\nThis new system now automatically detects when you have a newer local version than the remote one, displaying the upload button.\\n\\n![](/img/blog/2023-may/new-version.webp)\\n\\n<MediaLegend>Vault Manage Tab when having a new version available to upload</MediaLegend>\\n\\nOnce the upload is complete, a popup will appear, reminding you to approve the release in the Store. It\'s a seamless and convenient way to manage and update your resources.\\n\\n![](/img/blog/2023-may/uploaded.webp)\\n\\n<MediaLegend>PopUp shown after uploading a new Version</MediaLegend>\\n\\nWatch the Upload Process in Action:\\n\\n<VideoExternal path=\\"/blog/2023-may/upload-vault.webm\\" />\\n\\n<MediaLegend>Uploading a Package through the Vault</MediaLegend>\\n\\n\\n## New Class: Widget3D\\n\\nWe\'re happy to introduce the new Class: <Classes.Widget3D />. This class provides a 3D representation of an existing <Classes.Widget />! Allowing us to have Widgets to be rendered as Actors in 3D world!\\n\\nYou can spawn Widget3D classes from the new Widget method [SpawnWidget](/docs/next/scripting-reference/classes/widget#function-spawnwidget3d):\\n\\n```lua title=\\"Client/Index.lua\\"\\n-- Spawns and configures a Widget\\nlocal my_widget = Widget(NativeWidget.Image)\\nmy_widget:CallBlueprintEvent(\\"SetBrushFromTexture\\", \\"package://testing/Client/MyImage.jpg\\")\\n\\n-- Spawns the Widget3D from the Widget\\nlocal my_widget_3d = my_widget:SpawnWidget3D(Vector(0, 0, 200), Rotator(0, 90, 0))\\n```\\n\\n![](/img/blog/2023-may/widget3d.webp)\\n\\n<MediaLegend>Widget3D spawned in World</MediaLegend>\\n\\n<ReferenceLink href=\\"next/scripting-reference/classes/widget3d\\">Widget 3D Class</ReferenceLink>\\n\\n\\n## Map Package Create Flow\\n\\nWe\'ve made significant improvements to the Map Package creation flow through the UI.\\n\\nNow, selecting the Map Asset is way easier! The system automatically fetches all the Map Assets contained in the selected Asset Pack, allowing you to conveniently select the desired Map Asset, simplifying the Map Package creation process!\\n\\n![](/img/blog/2023-may/new-map-package.webp)\\n\\n<MediaLegend>Map Package Creation Workflow</MediaLegend>\\n\\nWatch the Map Creation Process in Action:\\n\\n<VideoExternal path=\\"/blog/2023-may/new-map-package.webm\\" />\\n\\n<MediaLegend>Creating a Map Package through the Vault</MediaLegend>\\n\\n\\n## Assets Meta Data\\n\\nNow we can define Meta Data (custom values) to individual assets inside our Asset.toml! Before we could only define assets by it\'s path:\\n\\n```toml title=\\"Assets.toml\\"\\n[assets.static_meshes]\\n    SM_Flower_01 = \\"MyFolder/SM_Awesome_Flower_01\\"\\n    SM_Rock_01 = \\"MyFolder/SM_Rock_01\\"\\n    SM_MyAsset_01 = \\"MyFolder/SM_MyAsset_01\\"\\n    # ...\\n```\\n\\nAnd now we can also define them as a table, allowing custom values to be set on each asset!\\n\\n```toml title=\\"Assets.toml\\"\\n[assets.static_meshes]\\n    SM_Flower_01 = { path = \\"MyFolder/SM_Awesome_Flower_01\\", my_tag = \\"Wonderful\\", something = 123, thumbnail = \\"Thumbnails/SM_Flower_01.jpg\\" }\\n    SM_Rock_01 = { path = \\"MyFolder/SM_Rock_01\\", my_tag = \\"Wonderful\\", something = 123, thumbnail = \\"Thumbnails/SM_Rock_01.jpg\\" }\\n    SM_MyAsset_01 = { path = \\"MyFolder/SM_MyAsset_01\\", my_tag = \\"Wonderful\\", something = 123, thumbnail = \\"Thumbnails/SM_MyAsset_01.jpg\\" }\\n    # ...\\n```\\n\\nRead more in the Asset Meta Data docs section:\\n\\n<ReferenceLink href=\\"next/core-concepts/assets#asset-meta-data\\">Asset Meta Data</ReferenceLink>\\n\\n\\n## Trigger Client Side\\n\\nNow, our <Classes.Trigger /> class can be spawned on the client side as well! Allowing scripters to have Triggers being used on client-side the same way as on server!\\n\\n\\n## Attached Meshes Features\\n\\nWe got a bunch of improvements and new methods to Attached Meshes functionalities!\\n\\nWe\'ve introduced new methods that enable you to customize the materials of attached meshes directly on them: `SetMaterialScalarParameterOnAttached()`, and `SetMaterialVectorParameterOnAttached()`. This eliminates (and deprecates) the need for the `attachable://` pattern when setting Material Parameters with the usual methods.\\n\\nAdditionally, we\'ve added convenient getters such as `GetAll[Static/Skeletal]MeshAttached()` to retrieve all currently attached meshes and their paths.\\n\\nAnd finally, we got `SetStaticMeshAttachedTransform()`, allowing scripters to change the transform (location/rotation) of attached meshes during runtime!\\n\\n\\n## P2P Improvements\\n\\nWe\'ve addressed several issues in the implementation of our P2P (non-dedicated server) functionality, particularly related to connecting to P2P localhost servers. We developed a new hybrid solution that has solved most of these issues.\\n\\nP2P servers use Steam backbone to instantiate a new *Fake* IP which is provided to other players to connect to your server, without the need of your to forward ports in the router.\\n\\nThe problem with that is that you can only connect through this new Fake IP, making it impossible to connect through `localhost` (`127.0.0.1`) for example, so we had a hacky implementation that identified you were connecting to a localhost server and attempted to retrieve this fake IP directly from it, it was really dirty and with lots of flaws and unforeseen consequences/bugs.\\n\\nBut finally and fortunately we managed to implement a solution that solves all the problems having now a hybrid approach! Now all P2P servers also allows \\"dedicated\\" connections, making them possible to be connected through `localhost` and also the Fake IP, at the same time!\\n\\n\\n## Misc Improvements\\n\\n### Compatib. Version 1.54\\n\\nLastly, worth mention this month we introduced a new Compatibility Version [`1.54`](/docs/next/core-concepts/packages/compatibility-versions#version-154), with changes to `Level.CallLevelBlueprintEvent`, aligning it with the usual Blueprint functions by enabling variadic parameters. And also `Client.GetPackages()`, making it work like Server.GetPackages() as well!\\n\\n\\n### Multi Package Reload\\n\\nNow it is possible to reload/load/unload multiple packages at once with console commands! E.g.:\\n\\n`package reload sandbox battlefield-kill-ui`\\n\\n\\n### Updated CEF & Steam\\n\\nWe\'ve updated CEF (`114`) & Steam SDK (`1.57`) libraries to the latest versions! We were almost 1 year outdated with CEF due some problems with Linux (Proton), but they now seem to be all fixed and we are up-to-date again!\\n\\n\\n### UFont & UClass Params\\n\\nNow Blueprint supports receiving **UFont** from <AssetPath.Font /> and **UClass** from Unreal usual paths (`/Game/MyAsset/MyClass.MyClass_C`)!\\n\\n\\n### Vault Refresh\\n\\nWe added the *refresh* button to the Vault Item screen too! It is located at the right side of the navigation bar:\\n\\n![](/img/blog/2023-may/vault-refresh.webp)\\n\\n\\n## Conclusion\\n\\nThis month was aimed to increase the encouragement of scripters/modders to upload their resources to Vault. As now pushing new versions requires just few clicks, many of the barriers have been knocked down as the process was greatly automated!\\n\\nThe new workflow of creating **Map Packages** also aims to encourage scripters/modders to create the Map Packages from his Asset Packs way easier and faster!\\n\\nA next step I want to do is the ability to create **Packages**/**Asset Packs** and approve releases on Store directly through the Vault UI (currently we still need to use the website to do so), then we will have the complete flow of creation and upload resources all inside the game!\\n\\nI see that resource sharing is a crucial factor for Sandbox games, and I want to improve our design for that as much as possible to make it even easier!\\n\\nIn conclusion, this month we had significant improvements in various aspects of modularization and scripting capabilities!\\n\\n**Widget3D** will allow numerous improvements in 3D UI creation (such as name-tags or simple custom 3D texts/signs).\\n\\nAnd **Asset Meta Data** is a gigantic step to improve an area that was a little hazy on assets categorization. Soon I will update all standard assets adding tags, categories and also update the Sandbox package to make use of these in a more standardized way!\\n\\nThanks for another month of support and assistance! See you next month! \ud83e\udd17\ud83e\udd17"},{"id":"april-2023","metadata":{"permalink":"/pt-BR/blog/april-2023","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2023-05-10-april.md","title":"Apr: Vehicle Health, Docs++!","description":"Vehicle Health, Docs++, Lean Assets, Utility Classes & more!","date":"2023-05-10T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":8.13,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"april-2023","title":"Apr: Vehicle Health, Docs++!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-april/april-news.webp"},"unlisted":false,"prevItem":{"title":"May: Widget 3D, Asset Meta Data!","permalink":"/pt-BR/blog/may-2023"},"nextItem":{"title":"Mar: File Transfer, Map Package!","permalink":"/pt-BR/blog/march-2023"}},"content":"**Vehicle Health, Docs++, Lean Assets, Utility Classes & more!**\\n\\n![](/img/blog/2023-april/april-news.webp)\\n\\nTune in for a roundup of the latest updates from April!\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Vehicle Damage System\\n\\nThis update is one of the most coolest addition we are getting! Now <Classes.VehicleWheeled />s have a new Damage & Health system, they can be damaged, and if the health reaches zero, the vehicle explodes, losing its tires and turning into burnt!\\n\\n<VideoExternal path=\\"/blog/2023-april/vehicle-explosion.webm\\" />\\n\\nThis behavior can be configured with the new method: [`Vehicle.SetExplosionSettings()`](/docs/next/scripting-reference/classes/vehicle-wheeled#function-setexplosionsettings).\\n\\n:::info\\n\\nWe will still keep improving and adding new features to this system, like allowing more customization and stages of destruction.\\n\\n:::\\n\\n\\n## Vehicle Flatten Tires\\n\\nIn addition to the Health System, Vehicles can now have their tires exploded when getting damaged!\\n\\n<VideoExternal path=\\"/blog/2023-april/vehicles-tire.webm\\" />\\n\\nAlso it can be manually scripted with a new method [`Vehicle.SetTireFlat(index, true)`](/docs/next/scripting-reference/classes/vehicle-wheeled#function-settireflat).\\n\\n:::tip\\n\\nTo be able to make it work, each Wheel Bone must have a **Physics Body Collision** in the Vehicle Skeleton Asset.\\n\\n:::\\n\\n\\n## Docs Improvements\\n\\nOur documentation has gone through many improvements and fixes this month, it\'s getting increasingly automated and robust!\\n\\nAlso worth mentioning we managed to fix the biggest problem being fixed of links pointing to wrong anchors in the page.\\n\\n\\n### Essentials Concepts\\n\\nWe created a new Essential Guide Concepts, which goes over all the important and basic concepts of nanos world for newcomers to get a better onboarding to get started scripting and modding!\\n\\nThis is the new initial guide everyone should read first!\\n\\n<ReferenceLink href=\\"next/getting-started/essential-concepts\\">Essentials Concepts</ReferenceLink>\\n\\n\\n### Better Examples\\n\\nWe implemented a new examples format that is automatically displayed under each function/event in a dropdown and also grouped in the *# Examples* section of each page:\\n\\n![](/img/blog/2023-april/examples-dropdown.webp)\\n\\n\\n### Standard Lua Classes\\n\\nWe added a new section to the docs listing all Standard Lua Libraries [string](/docs/next/scripting-reference/standard-libraries/string), [math](/docs/next/scripting-reference/standard-libraries/math) and [table](/docs/next/scripting-reference/standard-libraries/table), documenting it\'s methods and examples! To help newcomers learning the basics of Lua!\\n\\n![](/img/blog/2023-april/standard-libraries.webp)\\n\\n\\n### Functions Hint Format\\n\\nNow Function Type will have a ToolTip telling what are the arguments this function will be called with, with detailed description of each!\\n\\n![](/img/blog/2023-april/function-data.webp)\\n\\n\\n### Tables Hint Format\\n\\nAlso tables now have a ToolTip as well describing the format of the table expected/returned!\\n\\n![](/img/blog/2023-april/table-format.webp)\\n\\n\\n### Enums Usage\\n\\nWe developed a feature which automatically identifies everywhere an Enum is used by the API and lists them all under each Enum definition:\\n\\n![](/img/blog/2023-april/enum-usage.webp)\\n\\n\\n## Log Files\\n\\nLog files are now organized in folders and separated by date, with each session creating a new log file created for better organization.\\n\\nOn server a new folder called `.logs/` exists on root to contain all files:\\n\\n![](/img/blog/2023-april/logs.webp)\\n\\n\\n## Server Lean Assets\\n\\nThis is probably one of the best things we are introducing for server owners! Now it is possible to start servers without the need to install Asset Packs on them!\\n\\nAsset files were never needed on server side, but until last update we still needed to download it from Vault as we could have Map Packages inside of it.\\n\\nBut as we got a new Map Package system and don\'t need Asset files at all on server, we are adding a new command line flag `--use_vault_assets_lean`!\\n\\nThis flag will tell the server to do not download any Asset Pack (if not already installed), but instead will just download the .toml of it and load the Asset Pack in a *Lean* mode! Players will still download all assets from the Vault as usual.\\n\\n\\n## Utility & Native Tables\\n\\nWe reorganized our Utility Classes, and got a new <UtilityClasses.NanosTable /> Utility Class! This class will contain utility methods for dealing with Lua tables!\\n\\nAlso we are expanding some native class such as <BasicType.String /> by adding custom helper methods to it, like [`StartsWith()`](/docs/next/scripting-reference/standard-libraries/string#function-startswith), [`Trim()`](/docs/next/scripting-reference/standard-libraries/string#function-trim) and [`EndsWith()`](/docs/next/scripting-reference/standard-libraries/string#function-endswith), which can be called on the strings natively like:\\n\\n```lua\\nlocal my_string = \\"Hello Mom!\\"\\nlocal starts = my_string:StartsWith(\\"Hello\\")\\n```\\n\\n:::tip\\n\\nAll custom methods added to native classes will be in `PascalCase`. And can be differentiated in the docs by the icons <NativeType.Native /> or <NativeType.NotNative />.\\n\\n:::\\n\\n\\n## Improved Escape Menu\\n\\nWe continued improving our Escape Menu, and now it integrates with Vault displaying the current playing Map and Game Mode, and also displays the Server Logo as well!\\n\\n![](/img/blog/2023-april/escape-menu.webp)\\n\\n\\n## Blueprints Parameters\\n\\nWe improved even more our Blueprints integration implementation by now allowing **ANY** Unreal Struct to be passed through parameters to it!\\n\\nIt works by dynamically iterating and parsing all struct properties and retrieving those values from a Lua table passed as parameter.\\n\\nThe opposite is also true. Passing an Unreal Struct as parameter to Lua will parse it to Lua table! It works for both Native and Custom Structs!\\n\\n:::note\\n\\nSome Unreal Structs like `FTransform` or `FSlateBrush` have some complex parameters and also \\"fake\\" Setter/Getters which don\'t allow proper parsing.\\n\\nFor other structs like that we still need to implement custom parses to/from Lua. If you get more Structs like that and want to be integrated, let us know!\\n\\n:::\\n\\n\\n## New Debug Settings\\n\\nWe added a new section to the Debug Settings, allowing us to perform tests using fake/simulated network conditions, which help us (devs) and also scripters to test how the game will behave with players with bad or poor connections!\\n\\nWe can simulate high ping, limited bandwidth or even packet loss with that!\\n\\n![](/img/blog/2023-april/debug-settings.webp)\\n\\n\\n## Multi Clients\\n\\nWe finally solved all the problems with launching multi clients instances! Now you can launch several game instances to test the multiplayer aspect of your script without any impediment or being disconnected/kicked due file transfer problems!\\n\\n![](/img/blog/2023-april/multiclient.webp)\\n\\n\\n## New Cache System\\n\\nWe implemented a new Caching System! It\'s super faster compared to the old system, which means loading times will be very decreased!\\n\\nThe **Caching System** is a system that works by speeding up loading times by caching the assets hashes locally, so the client/server can just verify it without needing to recalculate the hash for the whole file every time we join or open a server (hashing a file is a really slow operation).\\n\\nThe old Cache system worked by creating one file per asset under the `Assets/.cache/` folder with the cache information. But this caused a lot of problems because it was slow to access the OS File System to access each file, and also zipping the Assets folder were really slow because of the amount of .cache files existing.\\n\\nBut now we improved this system by having only one .cache file per Asset Pack! This makes everything **super** faster and loading times are boosted now!\\n\\n![](/img/blog/2023-april/cache.webp)\\n\\n\\n## File Client Side\\n\\nNow the <Classes.File /> Class is also Client Side! Allowing scripters to create and access persistent files on client side too!\\n\\nThe file access on client side is sandboxed and only allowed inside the `Packages/127.0.0.1/.transient/` folder, it\'s not allowed to access any external file or folder of that, for security.\\n\\nThis small change allows many other possibilities by having cached and custom saved files stored locally on clients!\\n\\n\\n## Misc Improvements\\n\\nWe also got a bunch of smaller and miscellaneous improvements!\\n\\n### File Character Limit\\n\\nWe managed to rework our internal access to File System by fixing a problem that didn\'t allow files/assets to have more than 240 characters on Windows, causing errors when they were tried to be loaded!\\n\\n\\n### Character Interaction\\n\\n<Classes.Character />s now always calculate interacting objects, even if aimed. Improving the overall gameplay feeling.\\n\\n\\n### Loading Screen Time\\n\\nThe overall game loading time extremely improved this month! With the addition of the new cache system and also with several internal improvements we made, we went from the minimum hardcoded time taken of 3-5 seconds down to 0.5 seconds! Joining servers is super fast now!\\n\\n\\n### Mouse Events\\n\\nNow Mouse events will always trigger, even if a WebUI/Widget has focus in the front!\\n\\n\\n### Canvas Screen Position\\n\\nOur <Classes.Canvas /> Class got several improvements allowing it to be positioned on screen with a new [`screen_position`](/docs/next/scripting-reference/classes/canvas#constructor-default-constructor). constructor parameter, and new methods [`Resize()`](/docs/next/scripting-reference/classes/canvas#function-resize), [`SetScreenPosition()`](/docs/next/scripting-reference/classes/canvas#function-setscreenposition) and [`SetAutoResize()`](/docs/next/scripting-reference/classes/canvas#function-setautoresize).\\n\\nThis allows Canvas rendering to screen to be much more customized!\\n\\n\\n## Conclusion\\n\\nIn conclusion, April has been an exciting month for nanos world, with significant progress made in improving the onboarding experience for newcomers. The various enhancements in documentation and new guides will make all the difference for those starting out.\\n\\nThe new feature allowing servers to start without the need to download assets is also a game-changer, enabling easier ways to automate server installation and start-ups.\\n\\nMoreover, we also resolved several issues that have been bothering everyone, including connecting multiple client instances simultaneously and a bug preventing the game/server from loading assets with long paths on Windows. Not to mention the Mouse Input Events not triggering when having WebUI focused, which was a recurring complain and now is completely solved!\\n\\nOverall, this was a month of great possibilities and new features being added, once again thank you so much for all the support! See you next month! \ud83d\ude01"},{"id":"march-2023","metadata":{"permalink":"/pt-BR/blog/march-2023","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2023-04-05-march.md","title":"Mar: File Transfer, Map Package!","description":"File Transfer, Map Package, Escape Menu and more!","date":"2023-04-05T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":11.58,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"march-2023","title":"Mar: File Transfer, Map Package!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-march/march-news.webp"},"unlisted":false,"prevItem":{"title":"Apr: Vehicle Health, Docs++!","permalink":"/pt-BR/blog/april-2023"},"nextItem":{"title":"Feb: Widgets & Notifications!","permalink":"/pt-BR/blog/february-2023"}},"content":"**File Transfer, Map Package, Escape Menu and more!**\\n\\n![](/img/blog/2023-march/march-news.webp)\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Escape Menu Information\\n\\nThe Escape menu in the game now displays server information such as name, description map, game mode, players connected, and a special area that can be customized with the new method `Client.SetEscapeMenuText()`.\\n\\n![](/img/blog/2023-march/escape-menu.webp)\\n\\nIt supports using [Rich Text](https://docs.unrealengine.com/5.1/en-US/umg-rich-text-blocks-in-unreal-engine/) tags such as `<strong>`, `<h1>`, `<h2>` and `<h3>` to format it!\\n\\n```\\n<h1>Header 1!</>\\n<h2>Header 2!</>\\n<h3>Header 3!</>\\n<strong>Strong Text</>\\nNormal Text\\n```\\n\\n\\n## New Package Type: Map\\n\\nA new package type, \\"**map**\\" has been introduced to completely replace all the old ways of loading Maps (and Maps Packages)! It is now a Package like any other, being able to contain scripts and run Lua code.\\n\\n:::tip\\n\\nNow the map asset path is configured inside it\'s Package.toml, so when this Map Package is loaded, it will load the Map asset it has configured inside!\\n\\n:::\\n\\nUntil now, Map Packages were configured by creating a new folder with the same name as the Map inside the Asset Pack, getting mixed with the other .uassets and cooked files, which was unsustainable and had several downsides.\\n\\n![](/img/blog/2023-march/maps.webp)\\n\\nWith this new system, we will be able to make improvements to remove the need for the Server to have to download Asset Packs locally, because all Map Packages will no longer be contained inside the Assets!\\n\\nAs it is a Package just like any other, it can be uploaded to **Vault** as well, so all existing Maps can be selected in the **New Game** screen even if you don\'t have downloaded them! And you don\'t need to download them beforehand, as starting a server through New Game will automatically download all its dependencies!\\n\\n![](/img/blog/2023-march/select-map.webp)\\n\\nLike the other [Package Types](/docs/next/core-concepts/packages/packages-guide#package-types), the **Package.toml** of a Map Package is slightly different, it contains the new properties: **`map_asset`** (the Asset in fact this Map is using), **`spawn_points`** (the list of spawn points) and **`custom_data`** section (generic data which can be accessed via `Server.GetMapConfig()`):\\n\\n```toml title=\\"Package.toml\\" reference\\nhttps://github.com/nanos-world/nanos-world-server/blob/main/_map.toml\\n```\\n\\nRead more in [Packages Guide](/docs/next/core-concepts/packages/packages-guide#map) page.\\n\\n\\n## Vault Improvements\\n\\nThe Vault tab in the menu has undergone several improvements!\\n\\n\\n### New Tabs\\n\\nNow we got several tabs splitting each Package type and the Asset Packs, making it easier to navigate and search between different categories.\\n\\n![](/img/blog/2023-march/vault-tabs.webp)\\n\\nAlso the **category** drop down filter is now only visible on Asset Packs tab.\\n\\n\\n### Create Local Resources\\n\\nNow it\'s possible to create new local Asset Packs and Packages through the UI!\\n\\n![](/img/blog/2023-march/create-new-item.webp)\\n\\nWe added a button that opens a form to create the Resource!\\n\\n![](/img/blog/2023-march/create-new-item-full.webp)\\n\\nIn the future we will expand this feature to allow creating and uploading it to the Store as well! All through the UI!\\n\\n\\n### Images Loading\\n\\nNow all Vault Images are loaded in a deferred way, avoiding some initial stutters when the Main Menu is loaded, as now the Header/Team images will be loaded on demand once they show up on screen, not to mention it is now much faster and more reliable.\\n\\n![](/img/blog/2023-march/vault-loading.webp)\\n\\n\\n### Return Button\\n\\nThe Return Button was moved from the bottom left to the top right, making it more intuitive to the overall UI usage:\\n\\n![](/img/blog/2023-march/vault-full.webp)\\n\\n\\n\\n## New File Transfer System\\n\\nWe had completely overhauled our **File Transfer** system! This new system is much more robust and aims to solve all problems we had with downloading files and loading screens before!\\n\\n![](/img/blog/2023-march/file-transfer.webp)\\n\\n\\n### Sub Systems\\n\\nThis new system works by splitting the work into three sub-systems/steps: **Sockets**, **HTTP**, and **Vault Assets .zip**.\\n\\nEach sub-system/step has a different approach for downloading files and is aimed to a different occasion:\\n\\n\\n#### HTTP\\n\\nThe HTTP File Transfer system is the most conventional way to send files through. The server starts a HTTP Server and the clients download the files through HTTP requests. It is outside the inline networking system and works in parallel.\\n\\nThis is really good for sending large files. But it does not work in P2P servers as usually the host doesn\'t have Ports Forwarded in the router, which is required for having the HTTP server public.\\n\\nThis system is used when the file is bigger than `512 KB`, and the client only asks `16` files at a time to the server (*values configurable through the Settings Advanced tab*).\\n\\n\\n#### Sockets\\n\\nAs HTTP requests require connecting to the server (establish connection, handshake, validation, etc) every time a file is requested, it adds a huge amount of time between each file download, which is bad if we have thousands of files. So for speeding up the whole download time, we also have the **Sockets** system.\\n\\nThe Sockets sub-system uses the inline networking system to send files, it is way faster as it appends all file data in the network wire and flushes all to the client. The downside is that the inline networking system is not aimed for sending files, as it bottlenecks the network and depending of the quality of the connection, many packet losses can happen, causing the whole transfer to become slow.\\n\\nBut this is really good for sending lots of small files, as it appends them all together in the wire and sends to the clients in a single stream.\\n\\nThis system is used in two cases: when the file is smaller than `512 KB` (*configurable through the Settings Advanced tab*) or when the server is **P2P**.\\n\\n:::info\\n\\nP2P Servers use [Steam Datagram Relay](https://partner.steamgames.com/doc/features/multiplayer/steamdatagramrelay) servers to handle the connections between players, without the need of them to forward ports in the router.\\n\\nBecause of that, all connection and networking transmission is made through Steam servers, which seems to have a hardcoded speed limitation of 1 MB/s, making the whole File Transfer system to be *\\"hardcodedly\\"* slow on P2P servers.\\n\\n:::\\n\\n\\n#### Vault Assets\\n\\nThe last subsystem uses the **Vault** to download the required Asset Packs directly from our CDN servers, without needing to have them passing through the game server.\\n\\nThis is used when the server loads an Asset Pack which exists on Vault and is on the same version as it. Then the clients can download the Asset Pack directly from that instead from the Game Server!\\n\\n\\n### Problems Fixed\\n\\nBesides all the reworked system, we had a special attention on the problems and errors that existed in the past and with that in mind we added several new layers of validations to make sure everything goes well. So if anything fails, or if it takes too much time to download a file, the player will be disconnected to prevent any further problem being caused by that.\\n\\n\\n### Download Speed\\n\\nIn the old system, we were only downloading `8` Socket files and `1` HTTP file at a time. But now we are downloading up to `128` Sockets files and `32` HTTP files! Because of that we got a huge boost on the download speed when connecting to servers!\\n\\n:::tip\\n\\n*The following benchmark was made connecting to sandbox game-mode on the official server only using HTTP Transfer, for testing the HTTP File Transfer system only. As it is not making good use of Sockets optimizations, the real time **may** be way different.*\\n\\n:::\\n\\n| Files    | Time  | Boost  |\\n|:-------- |:----- |:------ |\\n| **`1`**  | 02:35 | `N/A`  |\\n| **`2`**  | 01:18 | `98%`  |\\n| **`4`**  | 00:40 | `287%` |\\n| **`8`**  | 00:24 | `545%` |\\n| **`16`** | 00:19 | `715%` |\\n| **`32`** | 00:15 | `903%` |\\n\\n*This table shows the amount of HTTP Files being downloaded simultaneously using the new File Transfer system and it\'s time (minutes) impact on final time taken to connect.*\\n\\n\\n### Server Async Handle\\n\\nAlso, now the game server handles File Transfers asynchronously, meaning that every file transfer request is queued and handled from a separated thread, reducing stutters and high tick rates when players are joining the server.\\n\\n\\n## Loading Screen Improvs\\n\\nThe Loading Screen also passed through several improvements!\\n\\n### Detailed Progress\\n\\nNow it displays much more information regarding the download progress, including:\\n\\n- The total size being downloaded (summing all sub-systems, including Vault)\\n- The current size already downloaded\\n- The current download speed\\n- The number of files being downloaded\\n- The progress of the current step (downloading, installing...)\\n\\n![](/img/blog/2023-march/loading-screen.webp)\\n\\n\\n### Server Startup Progress\\n\\nWhen starting a new game from the menu, now much more information about the local server is displayed, including progress when the server downloads Vault items!\\n\\nIt tells exactly each step and progress of the server initialization, giving a much better experience when starting games from the menu.\\n\\n![](/img/blog/2023-march/loading-screen-server.webp)\\n\\nAlso the whole New Game start-up process was improved by having better validations if something fails when starting a New Game!\\n\\n\\n## Vehicle Unflipping System\\n\\nUnflipping rotated Vehicles is now more deterministic and with fewer physics bugs.\\n\\nNow to unflip vehicles we must use the Steering input (e.g. `A` or `S`) to point to which side to rotate, instead of just accelerating as it was before.\\n\\n<VideoExternal path=\\"/blog/2023-march/vehicle-unrotate.mp4\\" />\\n\\n\\n## Entity Network Size\\n\\nFurther optimization has been made on the internal structure of entities that is sent through the network when syncing them with the clients. A great reduction was achieved by optimizing the usage of big structs such as Vectors and other numeric data that were unnecessarily large.\\n\\nWe got a reduction of up to 30% on their sizes!\\n\\n| Entity              | Before  | After   | Reduction |\\n|:------------------- |:------- |:------- |:--------- |\\n| **Blueprint**       | `192 B` | `136 B` | `29.17%`  |\\n| **Cable**           | `464 B` | `312 B` | `32.76%`  |\\n| **Character**       | `392 B` | `336 B` | `14.29%`  |\\n| **CharacterSimple** | `416 B` | `360 B` | `13.46%`  |\\n| **Light**           | `240 B` | `184 B` | `23.33%`  |\\n| **Melee**           | `256 B` | `184 B` | `28.13%`  |\\n| **Particle**        | `200 B` | `144 B` | `28.00%`  |\\n| **Prop**            | `208 B` | `152 B` | `26.92%`  |\\n| **StaticMesh**      | `192 B` | `136 B` | `29.17%`  |\\n| **TextRender**      | `248 B` | `192 B` | `22.58%`  |\\n| **Trigger**         | `240 B` | `168 B` | `30.00%`  |\\n| **Vehicle**         | `360 B` | `288 B` | `20.00%`  |\\n| **Weapon**          | `416 B` | `312 B` | `25.00%`  |\\n\\n:::note\\n\\nThose are static sizes, but entities also have dynamic sizes such as strings and lists that increases the overall size of them dynamically!\\n\\nAlso, those values represent the network data being sent to clients when the entity is serialized, and not the memory usage.\\n\\n:::\\n\\n\\n## Main Menu UX\\n\\n\\n### Fixed Freezing Behavior\\n\\nThe behavior of freezing when connecting to a server has been fixed! The \\"waiting\\" step has been moved to the end of the loading screen and now is handled asynchronously! This improves the usability in 1000x! \ud83e\udd73\\n\\n\\n### Improvs & Bug Fixes\\n\\nThe main menu has been updated with a new fade-in effect when showing up for the first time (game started of disconnecting from a server), which improves a lot the smoothness of its usage.\\n\\nIt\'s also worth mention we managed to fix several problems and crashes we were having in the main menu.\\n\\nThe User Experience is way smoother now!\\n\\n\\n## Settings Tab: Advanced\\n\\nThe game now has a new settings tab called \\"Advanced,\\" where players can tweak File Transfer settings to help debugging problems.\\n\\n![](/img/blog/2023-march/new-advanced-settings.webp)\\n\\nEach setting has a special meaning that is explained when hovering them!\\n\\n\\n## Melee Improvements\\n\\nThe melee got significant improvements requested by the community *(~~cof cof Timmy cof cof~~)*!\\n\\n### Multiple Hits\\n\\nMelee now hits multiple actors per \\"action\\". This means that one slash will now be able to cut several enemies at once!\\n\\n\\n### Attach Static Meshes\\n\\nNow the Melee makes use of the Attached Static Meshes when considering the collision primitives to calculate the damage! Contributing to the bounds of the hit detection!\\n\\n\\n## Miscellaneous\\n\\nOther miscellaneous improvements.\\n\\n### Blueprint Parameters\\n\\nAdditionally, the game now supports several new structs to be passed to Blueprints functions, including **FQuat**, **FMargin**, **FVector4**, **nil**.\\n\\nAnd also it now supports passing the entities **Canvas**, **WebUI**, and **SceneCapture**, which are converted into **Material Interface** when received on Blueprints.\\n\\nFor the complete list, please check the [Blueprint](/docs/scripting-reference/classes/blueprint#-list-of-supported-parameter-types) page.\\n\\n\\n### --logo Command Line\\n\\nNow the server command line `--logo` downloads the URL in-memory to be displayed in the server list, it no longer downloads and overrides the `Server.jpg` file locally. Fixing problems when starting several servers with the same `.exe`.\\n\\n\\n### File/Folders Casing\\n\\nAdditionally, now creating the folders `Server`, `Shared`, `Client` or `Index.lua` with incorrect casing (lowercase, or all uppercase) will throw warnings.\\n\\nThis was a common problem we were experiencing when scripters were developing their packages on Windows, and then when trying to load it on Linux it was not working. We ended up figuring out that it was because of the case sensitivity of the files they created. As on Linux all files are case-sensitive.\\n\\n\\n## Conclusion\\n\\nThis last month as an awesome month for the overall stability of robustness of the nanos world \\"framework\\". **Loading Screens**, **File Transfer System** and **Menus** are way smoother now.\\n\\nThose improvements and fixes make the game look much more professional. The problems we had with File Transfer that were very difficult to reproduce and we were only able to witness once we had big playtests were finally resolved!\\n\\nThe **Map Package** is another giant improvement! Although it\'s not a big deal in technical terms, this concludes several concerns we had to solve, as the need to download big unnecessarily assets on servers (*soon\u2122*), or the bad and ugly old map-package implementation we had, which caused a lot of bugs and problems.\\n\\nI am always aiming at implementing at least one of the most voted and requests from our [Feedback Hub](https://feedback.nanos-world.com/ideas?sort=top). So please make sure you vote up or suggest what you want!\\n\\nThank you for another month! \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f"},{"id":"february-2023","metadata":{"permalink":"/pt-BR/blog/february-2023","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2023-03-08-february.md","title":"Feb: Widgets & Notifications!","description":"Widgets & Notifications!","date":"2023-03-08T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":6.08,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"february-2023","title":"Feb: Widgets & Notifications!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-february/february-news.webp"},"unlisted":false,"prevItem":{"title":"Mar: File Transfer, Map Package!","permalink":"/pt-BR/blog/march-2023"},"nextItem":{"title":"Jan: Character, Weather, Console!","permalink":"/pt-BR/blog/january-2023"}},"content":"**Widgets & Notifications!**\\n\\n![](/img/blog/2023-february/february-news.webp)\\n\\n\x3c!--truncate--\x3e\\n\\nHere\'s a roundup of the latest updates from February.\\n\\n## Widgets\\n\\nAfter much anticipation and requests, we are excited to announce the introduction of a new class in nanos world: [Widget](/docs/next/scripting-reference/classes/widget)! This new class allows us to spawn [UserWidgets](https://docs.unrealengine.com/5.1/en-US/API/Runtime/UMG/Blueprint/UUserWidget/) or any [Widget](https://docs.unrealengine.com/5.1/en-US/API/Runtime/UMG/Components/UWidget/) child from Lua to be used as UI in the game, similar to WebUIs.\\n\\nJust like Blueprints, it is possible to call functions and listen to dispatchers from Lua, allowing for seamless integration between both environments.\\n\\nSee how simple is creating a Native Button and subscribing for it\'s events:\\n\\n```lua title=Client/Index.lua\\nlocal my_button = Widget(NativeWidget.Button)\\n\\n-- Puts a text inside of it\\nlocal my_text = Widget(NativeWidget.Text)\\nmy_text:CallBlueprintEvent(\\"SetText\\", \\"Press Me!\\")\\nmy_button:AddChild(my_text)\\n\\n-- Binds the native OnClicked dispatcher\\nmy_button:BindBlueprintEventDispatcher(\\"OnClicked\\", function()\\n    Console.Log(\\"Clicked!\\")\\nend)\\n\\n-- Adds the button to viewport\\nmy_button:AddToViewport()\\n\\n-- Adjusts the layout, making it centered\\nmy_button:SetCanvasLayout(Vector2D(0, 0), Vector2D(0, 0), Vector2D(0.5, 0.5), Vector2D(0.5, 0.5), Vector2D(0.5, 0.5))\\n```\\n\\n\\nAll native functions of widgets can be called with `CallBlueprintEvent()`. Just as events/dispatchers can also be subscribed with `BindbluEprinteventDispatcher()`! In the Widget page we added a section linking all [Unreal Native Widgets Documentation pages](/docs/next/scripting-reference/classes/widget#nativewidgets-to-unreal-widgets-relation) which you can find all their methods and events available!\\n\\nIn addition to being possible to spawn native widgets, you can also spawn custom UserWidgets from an Asset Pack! Just use the other constructor:\\n\\n```lua title=Client/Index.lua\\nlocal my_custom_widget = Widget(\\"my-asset-pack::WBP_CustomWidget\\")\\n```\\n\\nWe have plans to keep extending the functionalities of widgets, and also make it possible to draw them in 3D World in the future.\\n\\nBuilding UI goes Brrr now!\\n\\n\\n## Better Warnings\\n\\n![](/img/blog/2023-february/warning-line.webp)\\n\\nWe have improved our warnings system by adding line numbers to deprecated warnings. This makes it easier for developers to identify and fix deprecated code in their scripts.\\n\\n\\n## SceneCapture Encode\\n\\nWe added a new method to [SceneCapture](/docs/next/scripting-reference/classes/scene-capture): `EncodeToBase64()`!\\n\\nTheis new SceneCapture Encode feature allows you to take a snapshot and generate a Base64 image string to be used in WebUI. We have both synchronous and asynchronous methods available.\\n\\n\\n## Player Avatar on Chat\\n\\n![](/img/blog/2023-february/chat-avatar.webp)\\n\\nWe have added player avatars to the chat, making it easier to identify who is talking.\\n\\n\\n## New Native Server Commands\\n\\nWe have added new server commands, including the ability to kick and list players connected:\\n\\n- `players` - lists all players connected.\\n- `kick`- kicks a player from the server.\\n\\n\\n## CharacterSimple Damageable\\n\\nWe have added support for **CharacterSimple** to receive damage and die, just like the existing Character class.\\n\\nAlso, we added a new Docs page for [BaseDamageable](/docs/next/scripting-reference/classes/base-classes/damageable) containing all Damageable methods and events! Which is shared between Character and CharacterSimple!\\n\\n\\n## New Custom Settings Type: Select\\n\\nWe have added a new custom settings type: [select](/docs/core-concepts/packages/packages-guide#custom-settings). This new option displays as a dropdown menu in the MainMenu, allowing players to select one of the predefined options in the `custom_settings` setting in the game-mode\'s Package.toml.\\n\\n![](/img/blog/2023-february/new-game-select.webp)\\n\\n\\n## Fatal Crashes Report\\n\\nWe now automatically send all fatal errors to our Crash Report system. As Fatal errors usually are \\"treated errors that shouldn\'t happen\\", this helps us identify and fix issues quickly, improving the overall stability of the game.\\n\\n\\n## Blueprint Material as Arguments\\n\\nWe have expanded blueprint support to include material parameters from **WebUI**, **Canvas**, and **SceneCapture** entities. This means that blueprints can now receive MaterialInterface parameters from these entities automatically.\\n\\n:::tip\\n\\nThe new Class **Widget** also benefits from this!\\n\\n:::\\n\\nYou can see a list of all possible Parameter Types in the [Blueprint](/docs/scripting-reference/classes/blueprint#-list-of-supported-parameter-types) Documentation page.\\n\\n\\n\\n## Vault Improvements\\n\\n### Labels\\n\\nWe have added new icons to the vault display, indicating whether a resource is an official resource or if you has ownership over it (belongs to it\'s Team).\\n\\n![](/img/blog/2023-february/vault-ownership.webp)\\n\\n\\n### Ownership Manage\\n\\nAdditionally, we have added a new tab for managing resources, which currently only contains a button redirecting to the store.\\n\\n![](/img/blog/2023-february/manage-tab.webp)\\n\\n\\n### Local Folders\\n\\nWe have also added a new button to open the local installed folder, making it easier to manage downloaded resources.\\n\\n![](/img/blog/2023-february/vault-local-folder.webp)\\n\\n\\n### No Internet\\n\\nThe vault now works and loads local resources even if the player has no internet connection.\\n\\n\\n## Main Menu Notifications\\n\\nWe have added notifications to the main menu, which display general errors and vault messages. This means that notifications will appear when resources are installed or when errors occur.\\n\\n![](/img/blog/2023-february/notifications.webp)\\n\\n![](/img/blog/2023-february/notification-success.webp)\\n\\nAll notifications from the current session can be found in a new window under the notification \ud83d\udd14 button.\\n\\n![](/img/blog/2023-february/notifications-list.webp)\\n\\n\\n## Assets.toml Files Validator\\n\\nWe have added a new system to automatically validate Asset Packs files from Assets.toml. This system checks if a file listed in Assets.toml was not found in the disk, helping to identify and debug Assets problems quickly.\\n\\nIt only runs on server when loading an Asset Pack, and will display warnings on console.\\n\\n\\n## New Trace Methods\\n\\nWe have added new Trace methods to [Trace](/docs/next/scripting-reference/static-classes/trace), including `SphereSingle()`, `SphereMulti()`, `BoxSingle()`, `BoxMulti()`, `CapsuleSingle()`, and `CapsuleMulti()`. Allowing more traces possibilities in the game world!\\n\\n\\n## New Sky Methods\\n\\nWe have added several new [Sky](/docs/next/scripting-reference/static-classes/sky) methods, allowing customization to the **Moon** and other new properties of the Ultra Dynamic Sky.\\n\\n\\n## Network Lanes\\n\\nWe have made significant changes to the network layer of the game framework. **VOIP** and **File Transfers** now use a new low-priority network lane to transmit their data. This means that the performance impact on gameplay is reduced when players are connecting (and downloading files) or using VOIP, which uses large amounts of network data.\\n\\n\\n## Is Steam Launched\\n\\nWe added a better validator to check if Steam is launched when you start the game. Now a popup will show up instead of having the game crashing.\\n\\n![](/img/blog/2023-february/launch-steam.webp)\\n\\nDo not **dare** to press No. \ud83d\ude09\\n\\n\\n## Conclusion\\n\\nLast month we got exciting new features and improvements to nanos world!\\n\\nOne of the most anticipated additions was the introduction of the new class **Widget**! This is really exciting as it will greatly increase the possibilities of creating UI within the game!\\n\\nThe **Menu Notifications** also adds a lot of quality of life to players, we often had problems happening under the hood and we didn\'t know. With the new notifications system we will now be alerted to problems and also what Vault is doing!\\n\\n**CharacterSimple** now is more complete! With the addition of the damage system, it can now be better used as enemies or simple NPCs!\\n\\nAll these updates and improvements aim to enhance the overall stability and experience of the game! Thank you very much for your suggestions, ideas and bug reports!\\n\\nWe see each other next month! ~~Nogitsu can finally rest in peace.~~ \ud83d\ude01"},{"id":"january-2023","metadata":{"permalink":"/pt-BR/blog/january-2023","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2023-02-01-january.md","title":"Jan: Character, Weather, Console!","description":"New Character, Weather System, Console Commands/Layout & much more!","date":"2023-02-01T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":8.39,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"january-2023","title":"Jan: Character, Weather, Console!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-january/january-news.webp"},"unlisted":false,"prevItem":{"title":"Feb: Widgets & Notifications!","permalink":"/pt-BR/blog/february-2023"},"nextItem":{"title":"Dec: One VM to Rule Them All!","permalink":"/pt-BR/blog/december-2022"}},"content":"**New Character, Weather System, Console Commands/Layout & much more!**\\n\\n![](/img/blog/2023-january/january-news.webp)\\n\\n\x3c!--truncate--\x3e\\n\\n## New Character Class\\n\\nThis month we worked hard on refactoring our internal Player/Character implementations and all things that it interacts to (Weapon, Props, Vehicles). Our internal code was still very strongly linked to the main Character entity, everything having direct references to it. So we worked hard to modularizing them, which allowed new \\"Sub\\" Character classes to be added.\\n\\nAnd as an initial version, we created the new `CharacterSimple` class. A \\"simple\\" but powerful new class, it has no special features besides basic movement (based on Unreal base Character), but it allows to be constructed by passing a customized Animation Blueprint! Also it supports passing a **StaticMesh** as a mesh, which we automatically adjusts the Capsule Size of it based on the mesh size, perfect for Prop Hunt!\\n\\nThis new Character entity can then be used by anything, Custom NPCs, Animals, Props, etc. And them all can be possessed by Players!\\n\\n![](/img/blog/2023-january/refrigerator.webp)\\n\\n:::info\\n\\nWe will be studying the ability to add more features to this class (e.g. Drive Vehicles or Handle Weapons). As this class is aimed to be simple, those features weren\'t added so far.\\n\\n:::\\n\\nRead more in the [CharacterSimple](/docs/next/scripting-reference/classes/character-simple) class page.\\n\\n\\n## Docs Improvements\\n\\nA summary of important changes in the docs.\\n\\n### Sandbox Section\\n\\nI added a new [section](/docs/explore/sandbox-game-mode/spawn-menu) just for the Sandbox game-mode. This has examples on how the **Spawn Menu**, **Context Menu** and the **Tool Guns** work, and teaches how you can create scripts to extend or create new features which integrate with it! It is a great new Quick Start we have!\\n\\n\\n### Changelog\\n\\nWe\'ve got a new [Changelog](/changelog) tab with the most recent updates of nanos world!\\n\\n\\n### Compatibility Version\\n\\nI moved the [Compatibility Version](/docs/next/core-concepts/packages/compatibility-versions) pages to a new single page under `Core Concepts / Packages` section. Now all Compatibility Versions changes and the it\'s guide will be centralized there.\\n\\n\\n### Improved CSS\\n\\nWe\'ve got some improvements on the docs layout and CSS. The Mobile visualization was improved and we got new dividers between API definitions, making all look neat!\\n\\n\\n### Troubleshoot Assets\\n\\nI added a new section of [Troubleshooting for Assets](/docs/next/assets-modding/creating-assets/importing-assets#troubleshooting) with the most common problems and their fixes.\\n\\n\\n## ADK is on Steam\\n\\nNow it is possible to download and use the [Assets Development Kit](https://github.com/nanos-world/assets-development-kit) through Steam directly! This new Steam Tool Entry for nanos world makes the ADK to be always updated! It launches the Unreal Editor automatically.\\n\\n![](/img/blog/2023-january/adk.webp)\\n\\n\\n## New Console Colors\\n\\nWe reworked our Console Layout and now it is more colorful and pretty! It got much more robust and modern! Hope you like it!\\n\\n![](/img/blog/2023-january/console-layout.webp)\\n\\n\\n## Console Commands\\n\\nWe\'ve introduced the official **Console Commands** system. This new system allows adding custom console commands to both **Server** and **Client** consoles, and integrates it with the **Available commands** list when typing `help` on it.\\n\\n![](/img/blog/2023-january/console-commands.webp)\\n\\nIt is a simple initial implementation which you can define the name of the parameters and the description of it, in the future we may expand it to define which type to expect, default values and more:\\n\\n```lua\\nConsole.RegisterCommand(\\"myawesomecommand\\",\\n    function(parameter_one, parameter_two)\\n        -- Do something with parameter_one and parameter_two\\n    end,\\n    \\"this command executes awesome codes\\",  -- Description\\n    { \\"parameter one\\", \\"parameter two\\" }    -- Parameters\\n)\\n```\\n\\nRead more in the [Console.RegisterCommand](/docs/next/scripting-reference/static-classes/console#static-function-registercommand) method page.\\n\\n\\n## Steam Avatar\\n\\nNow it is possible to retrieve the Player\'s Steam Avatar! We\'ve added a new method `Player:GetPlayerIconURL()` which returns a special URL which can be load the Steam Avatar on WebUIs:\\n\\n![](/img/blog/2023-january/scoreboard.webp)\\n\\n\\n## Sky & Weather\\n\\nWe integrated the Weather system from Ultra Dynamic Sky into the Sky class! Now it is possible to change the current weather through `Sky.ChangeWeather()` and even have it integrated in your maps by using Ultra Dynamic Sky Material Functions from it\'s Assets Content if you have the UDS!\\n\\n![](/img/blog/2023-january/weather-01.webp)\\n\\n![](/img/blog/2023-january/weather-02.webp)\\n\\nWe\'ve added a new dropdown to Context Menu to allow you changing the Weather from there:\\n\\n![](/img/blog/2023-january/context-menu.webp)\\n\\nAlso the [Sandbox Context Menu](https://github.com/nanos-world/nanos-world-sandbox/blob/master/Server/Sky.lua) has a new section only for controlling Weather & Sky, and also an automatic Weather change system which synchronizes the current Weather with all connected players!\\n\\n\\n## New Config.toml Format\\n\\nThe Server configuration file was completely reworked. Now we have several different sections and many more settings available to set through that. Almost all settings available through command line parameters now can be defined there persistently.\\n\\n![](/img/blog/2023-january/config-toml.webp)\\n\\nSee the full configuration file schema [here](/docs/next/core-concepts/server-manual/server-configuration#server-configuration-file).\\n\\n\\n## Compression\\n\\nA new setting which has been added is the `compression`, which allows you configuring the amount of compression (0 is none, 9 is extreme) applied to some network operations. For now we are testing this new compression system for small files transfer and server requirements manifest, we managed to see up to **90%** reduction of the size of those files when having it enabled!\\n\\n:::tip\\n\\nUsing high level of compression affects the server and client performance as we add a new layer of computation processing to the CPU.\\n\\n:::\\n\\n\\n## Level Entities Settings\\n\\nNow it is possible to toggle in the Package.toml if you wish to load Level Entities, a.k.a. loading Level StaticMeshes as entities. This setting acts as a global `OR` setting which if we have at least one Package which enabled it, the setting will be enabled globally.\\n\\n![](/img/blog/2023-january/load-level-entities.webp)\\n\\nThis setting allows we skipping a lot of processing and runtime performance loss if we don\'t need to use or reference level\'s StaticMeshes through scripting.\\n\\n\\n## New Settings to Map.toml\\n\\nWe added two new settings to Map.toml: `package_requirements` and `compatibility_version`, allowing Map Packages to work better on their own.\\n\\n![](/img/blog/2023-january/map-toml.webp)\\n\\n\\n## Level Streaming Support\\n\\nWe implemented the full support to Level Streaming and World Partition. Before they weren\'t properly integrated into our [Level](/docs/next/scripting-reference/static-classes/level) class but now the events are triggered for auto-streaming and chunks from World Partition being loaded/unloaded as well! Also it is now integrated with Level Entities making the Level StaticMeshes to load/unload as entities on demand as well!\\n\\n\\n## Large World Coordinates\\n\\nOur Vector structs were refactored and now we have support for double-precision to Vector struct! Meaning huge Levels are now possible in nanos world! Read more about it in the [Unreal Official Documentation page](https://docs.unrealengine.com/5.1/en-US/large-world-coordinates-in-unreal-engine-5/).\\n\\n\\n## WebUI Layout\\n\\nWe added a new method to WebUI which although seems simple, it expands a lot the possibilities and modularity with UIs. Now it is possible to change the WebUI Canvas layout through [WebUI:SetLayout](/docs/next/scripting-reference/classes/webui#function-setlayout).\\n\\nThis method allows changing the Canvas Layout (anchors, offset, alignment) of it, meaning we can have WebUIs working just as small popups, allowing you clicking on background WebUIs while having others small ones in the front of the screen!\\n\\n\\n## WebUI ExecuteJavaScript\\n\\nWe added a new *experimental* method to WebUI: [WebUI:ExecuteJavaScript](/docs/next/scripting-reference/classes/webui#function-executejavascript). This allows executing arbitrary JavaScript code in your WebUI.\\n\\n:::note\\n\\nThis method only works on local WebUIs.\\n\\n:::\\n\\n\\n## Auto Download Logo\\n\\nIn the last month we removed the `logo` settings from Config, Package and Asset Packs, as now they all must be locally-placed jpg images. But now we added back the `--logo` command line parameter to the server allowing it to auto download it as the `Server.jpg` image! Allowing you to easily setup a remote server and add a logo to it.\\n\\n\\n## New Graphic Settings\\n\\nWe\'ve added a new setting allowing to change the Shadow Map method to use the new experimental [Virtual Shadow Maps](https://docs.unrealengine.com/5.1/en-US/virtual-shadow-maps-in-unreal-engine/) method!\\n\\n![](/img/blog/2023-january/shadow-map.webp)\\n\\n\\n## CEF Framerate\\n\\nWe\'ve improved our CEF implementation by dynamically configuring it\'s render/update rate, and now it refreshes at the same rate as the game improving a lot the perception of fluidity.\\n\\n\\n## HTTP & Database Renames\\n\\nWe\'ve renamed HTTP and Database methods to follow the correct standard of names.\\n\\nE.g. We\'ve changed `HTTP:Select` to become a synchronous method and added a new `HTTP:SelectAsync` method which is the new async. See more information about this new Compatibility Version in the official [Documentation Page](/docs/next/core-concepts/packages/compatibility-versions#version-129).\\n\\n\\n## Conclusion\\n\\nSince a few months now, we have had major significant changes internally in codebase (which until now were only served to add random bugs to the game \ud83d\ude1c), but finally we can start to see the good results of that, being able to extend the API by having new classes coming up, such as the new **CharacterSimple**!\\n\\nI love to make these improvements like the **Console Layout** or **Config.toml** changes because they greatly add to our Quality of Life as devs, and give things a refreshing air.\\n\\nI was surprised on how the Ultra Dynamic Sky and specially the Weather integration was really easy to do. It was literally just drag\'n dropping the Blueprint into the map! And that adds much more immersion to the players!\\n\\nIn this update, we solved several impasses we had so far, such as Large World Coordinates or Level Streaming/World Partition which were uncertain whether or not they would work. Not to mention the new added class of Character that was a much requested thing and will add a lot more possibilities to the game! And that\'s just the beginning!\\n\\nThanks for another month of support! I hope you enjoyed this news blog! See you next time!"},{"id":"december-2022","metadata":{"permalink":"/pt-BR/blog/december-2022","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2022-12-31-december.md","title":"Dec: One VM to Rule Them All!","description":"One Lua Virtual Machine to Rule Them All!","date":"2022-12-31T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":8.52,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"december-2022","title":"Dec: One VM to Rule Them All!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2022-december/december-news.webp"},"unlisted":false,"prevItem":{"title":"Jan: Character, Weather, Console!","permalink":"/pt-BR/blog/january-2023"},"nextItem":{"title":"Nov: Entity System, UDS & UE5.1!","permalink":"/pt-BR/blog/november-2022"}},"content":"**One Lua Virtual Machine to Rule Them All!**\\n\\n![](/img/blog/2022-december/december-news.webp)\\n\\n\x3c!--truncate--\x3e\\n\\n## One Lua Virtual Machine\\n\\nAfter much analysis, study and refactoring. I am happily introducing the new way the Packages will work! This was heavily motivated by the lack of possibility of creating extensions or customized items in an easy way.\\n\\n![](/img/blog/2022-december/lua-vm-rule.webp)\\n\\nIn addition to the last new Entity System update, this change will heavily add to the possibilities of modding & scripting capabilities to nanos world!\\n\\n:::info\\n\\nThose changes are meant to have as little as possible impact and breaking changes, all tests I did so far assured everything is still backward compatible!\\n\\n:::\\n\\nSo far, we had one VM (Virtual Machine - or `lua_State`) created per Package. This caused each Package to be completely isolated from each other. Therefore it was necessary to create mechanisms for communication between the Packages, such as **Events** and **Package.Export/Package.Call** methods, which allowed (in a limited way) Packages to communicate with each other.\\n\\nBut as mentioned, this brought many limitations, such as it was not possible for Packages to access variables or call functions directly from other Packages, or even worse (which become more evident from the last update of Entity System): It was not possible to share custom classes between Packages!\\n\\nHowever now all of this will be solved! I reworked the entire internal scripting system, and now instead of having a new virtual machine per Package, we will have a virtualized sandboxed environment (using Lua environment `_ENV` feature), separating the scope of each Package but allowing them to access a global shared environment!\\n\\nThis will allow the Packages to define classes, expose functions and share libraries globally! So that everyone else can use without the need for workaround mechanisms to do so!\\n\\nNow, for example you can just load additional scripts together the `sandbox` game-mode which loads custom Classes of tools or weapons, and those will appear automatically in the Spawn Menu, no need for manually adding them anymore!\\n\\nEach Package will still have it\'s own sub-global environment, so defining global variables or functions will not make them available to other packages immediately.\\n\\n### Call & Export\\n\\n`Package.Call` and `Package.Export` are not necessary in the traditional way anymore. As now we can share the global environment, we can define methods and expose them to be called directly, without the need to `Package.Call` them.\\n\\nThe `Package.Export` will still exist and work similarly. But now it will be possible to \\"expose\\" any value to the global scope! Example:\\n\\n```lua title=package-01/Server/Index.lua\\nlocal my_table = { 123, 456 }\\n\\nfunction DoSomething(var1)\\n\\treturn var1 + 123\\nend\\n\\nPackage.Export(\\"MyTable\\", my_table)\\nPackage.Export(\\"DoSomething\\", DoSomething)\\n```\\n\\n```lua title=package-02/Server/Index.lua\\nConsole.Log(MyTable[1])\\n-- 123\\n\\nConsole.Log(DoSomething(456))\\n-- 579\\n```\\n\\n### Inherited Classes\\n\\nNow all Inherited Classes will be available to all Packages, as they will be created and exposed to the Global scope automatically.\\n\\nThe first parameter of it will now be used as the variable name to set the class in the global scope. Also, it just got a new optional 2nd parameter to define a custom table contained custom values to be set in the class table before it\'s created:\\n\\n```lua\\n-- Note we are assigning the return of Inherit to a variable called\\n-- MyPropClassLocal, but also MyPropClass will be defined globally\\n-- as being our class, both variables points to the same Class table\\nMyPropClassLocal = Prop.Inherit(\\"MyPropClass\\", {\\n\\t\\"my_custom_value\\" = 123,\\n\\t\\"my_another_value\\" = \\"hello\\"\\n})\\n\\nlocal val = MyPropClass.my_custom_value\\n-- val == 123\\n```\\n\\nWe\'ve also added a new static event for getting when a new Inherited Class is registered: `ClassRegister`:\\n\\n```lua\\nProp.Subscribe(\\"ClassRegister\\", function(class)\\n\\t-- Do something with the new class\\nend)\\n```\\n\\n### Library Package Type\\n\\nWith this new way Package work, `library` types are no longer needed. As now we can communicate directly with other packages with exposed global methods, we can just define the methods to be exported with `Package.Export` and use them whenever we want.\\n\\nIn this way we will only have two types of \\"lua script\\" Packages: `game-mode` and `script`. All existing `library` packages will be automatically converted to `script` when loaded.\\n\\n### RequirePackage\\n\\nTherefore, `Package.RequirePackage` will becomes unnecessary as well. As we can now reuse the same script globally, this method will be depreciated in favor of adding your package in the `package_dependencies` list of your Package\'s Package.toml.\\n\\n_Package requiring_ the default `nanos-world-vehicles` or `nanos-world-weapons` will load them as a standalone Package, as now they **export** the `NanosWorldWeapons` and `NanosWorldVehicles` tables globally.\\n\\n## GameMode Settings\\n\\nWe are introducing the concept of custom settings for game-modes! These settings can be defined in **Package.toml** like that:\\n\\n```toml\\n# game-mode custom settings configurations\\n[custom_settings]\\n    my_toggle = { label = \\"enable PVP\\", type = \\"boolean\\", description = \\"whether to enable PVP or not\\", default = true }\\n    my_text_input = { label = \\"type anything\\", type = \\"text\\", description = \\"custom text!\\", default = \\"hello world!\\" }\\n```\\n\\nThese settings can be configured through server arguments `--custom_settings \\"my_toggle = true, my_text_input = \'awesome text!\', ...\\"`, or through the New Game screen, which parses and displays the configuration dynamically when creating a new game:\\n\\n![](/img/blog/2022-december/new-game-settings.webp)\\n\\nThe values defined can be accessed through the new method `Server.GetCustomSettings()`.\\n\\nPlease refer to the updated [Documentation Page](/docs/next/core-concepts/packages/packages-guide#custom-settings) for more information.\\n\\n## Configuration Files\\n\\nAs announced on previous blogs, the format of the configuration files are changing in the next update!\\n\\n:::tip\\n\\nAll **Package.toml** and **Assets.toml** in the old format will automatically self-convert to the new format as soon as they load for the first time.\\n\\n:::\\n\\n### Meta Block\\n\\nNow we have a new common header among all **Assets.toml** and **Package.toml**: `[meta]`.\\n\\nIt will have the following format, which will be used to define general configurations mainly used by the store:\\n\\n```toml reference\\nhttps://github.com/nanos-world/nanos-world-server/blob/main/_meta.toml\\n```\\n\\n### Package\\n\\nFor the Packages, we will have a new format to differentiate their Types. Each Package type will have an independent and different block of configurations. Now the Package type will be determined by defining a block `[game_mode]`, `[script]` or `[loading-screen]`.\\n\\nThis is how a game-mode Package.toml will look like:\\n\\n```toml reference\\nhttps://github.com/nanos-world/nanos-world-server/blob/main/_game_mode.toml\\n```\\n\\n## Configuration Images\\n\\nAs you may have noticed, there is no more setting `image` on **Package.toml**, the same applies to **Assets.toml** and for the server image in the **Config.toml**.\\n\\nNow, the images should be physically placed next to the **.toml** file with the name `Package.jpg`, `Assets.jpg` or `Server.jpg`.\\n\\nThis is a standardization to solve the image inconsistency between the store and the config file, as well as to avoid external and malicious links to be placed there. But this brings the drawback that only dedicated servers can display an image on the Server List from now on.\\n\\n## New Static Classes\\n\\nFinally we are releasing the update with all the Static Class refactoring! This will give us a great new organization to find things at the docs, as now specific methods will be grouped into classes with names that make sense!\\n\\nList of all new Static Classes:\\n\\n- [\ud83d\udcac Chat](/docs/next/scripting-reference/static-classes/chat)\\n- [\ud83d\udd24 Console](/docs/next/scripting-reference/static-classes/console)\\n- [\ud83d\udc1b Debug](/docs/next/scripting-reference/static-classes/debug)\\n- [\u260e\ufe0f Discord](/docs/next/scripting-reference/static-classes/discord)\\n- [\ud83c\udfdd\ufe0f Level](/docs/next/scripting-reference/static-classes/level)\\n- [\ud83d\udea2 Navigation](/docs/next/scripting-reference/static-classes/navigation)\\n- [\ud83d\uddbc\ufe0f PostProcess](/docs/next/scripting-reference/static-classes/postprocess)\\n- [\ud83c\udf05 Sky](/docs/next/scripting-reference/static-classes/sky)\\n- [\ud83c\udfae Steam](/docs/next/scripting-reference/static-classes/steam)\\n- [\ud83d\udd0d Trace](/docs/next/scripting-reference/static-classes/trace)\\n- [\ud83d\udcfa Viewport](/docs/next/scripting-reference/static-classes/viewport)\\n\\nAlso, [\ud83d\udd79\ufe0f Input](/docs/next/scripting-reference/static-classes/input) got a bunch of new methods and events as well from Client.\\n\\nMany of the methods from [\u2328\ufe0f Client](/docs/next/scripting-reference/static-classes/client) and the old **\ud83c\udf0d World** were migrated to those classes! Check their pages for accurate information!\\n\\n## Renamed Events\\n\\nDue our last poll, we are starting to change all events names which were with wrong names. We are standardizing them to the present tense, so events like `CharacterEntered` will be renamed to `CharacterEnter` for example.\\n\\nAll changes will keep the old event working as deprecated. Please get attention to the new warnings to update them to the newer version!\\n\\n## Assets Plugin Content\\n\\nNow it is possible to create Asset Packs from Plugin Content, this will be the preferred way of creating content from now on as it prevents assets paths colliding with others.\\n\\nFor that, we added a new setting in **Assets.toml** to define if the Asset Pack is a plugin content: `is_plugin_content`.\\n\\nPlease refer to the updated [Documentation Page](/docs/next/assets-modding/creating-assets/importing-assets) for more information.\\n\\n## Store Improvements\\n\\nLast month MegaThorx launched an update to the store, which greatly improves the upload flow of new versions. Now we have a progress bar, as well as special scripts to verify for syntax errors and potential problems. More features will be added in the future as well!\\n\\n![](/img/blog/2022-december/store-upload.webp)\\n\\n## Conclusion\\n\\nI was not very much satisfied on how nanos world was handling the possibilities of modding and scripting. It felt very limited and non natural the way scripters had to do to make packages to communicate with each other, it wasn\'t allowing much customization or extensibility.\\n\\nWith the last month\'s [Entity System](/docs/next/core-concepts/scripting/inheriting-classes) and now with this change to how Packages work, I feel that a huge door of possibilities has just opened even more, which will give a good breath to new things to be added!\\n\\nAn excellent example of what now is possible to achieve is creating a blank `script` package with a custom special inherited Weapon, and just loading the Sandbox game-mode together with your script to make it show up in the Spawn Menu, without needing any special call or workaround! This is huge and tie all the remaining knots! \ud83e\udd73\\n\\nThis change to a single VM was a big change, at first I thought it was not going to work, but after done and performing tests I was very surprised and happy with the results! Now we have to refine and improve it even more!\\n\\nModding goes brrr!! Thank you for the support! See you next month! \ud83d\udcaa\ud83d\udcaa"},{"id":"november-2022","metadata":{"permalink":"/pt-BR/blog/november-2022","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2022-12-07-november.md","title":"Nov: Entity System, UDS & UE5.1!","description":"Entity System, UDS & UE5.1!","date":"2022-12-07T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":8.55,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"november-2022","title":"Nov: Entity System, UDS & UE5.1!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2022-november/november-news.webp"},"unlisted":false,"prevItem":{"title":"Dec: One VM to Rule Them All!","permalink":"/pt-BR/blog/december-2022"},"nextItem":{"title":"Oct: Playtest & Big API Refactor!","permalink":"/pt-BR/blog/october-2022"}},"content":"**Entity System, UDS & UE5.1!**\\n\\n![](/img/blog/2022-november/november-news.webp)\\n\\n\x3c!--truncate--\x3e\\n\\n## Refactor Releases\\n\\nAs announced in the last Blog News, we are performing a series of refactoring in the API to standardize it better. We have a long list of changes and I\'m doing them gradually.\\n\\nThe main one that allowed us to make more changes without breaking compatibility is the `compatibility_version` released in the last update. This configuration on Package.toml will ensure that the package continues to work in future updates in cases of breakage changes.\\n\\nAlso we\'ve already got our first feature to try the **compatibility_version** system: the new `Events.SubscribeRemote` method! This method will subscribe only for remote called methods, splitting completely the behavior of subscribing for Local and Remote events. The change of this method caused a breaking change because all existing `Events.Subscribe` will no longer trigger with remote Events. But **compatibility_version** ensures that they continue to work until you update the value to version `1.22` or more recent.\\n\\nI\'m working on several Static Class refactoring as well and also changing some names of methods (e.g. `HTTP.RequestSync` will be standardized into just `HTTP.Request` and the async version would become `HTTP.RequestAsync`).\\n\\nI reinforce again that if you have suggestions on other changes such as event or methods names, do not hesitate to say it! Big refactoring opportunities like this are rare!\\n\\n\\n## Entity & Inheriting System\\n\\nThis is a very special update which I\'ve been working in the past months! \ud83e\udd73\\n\\nThe new Inheriting System is an addition that completely changes the paradigm of creating scripts! This system allows you to inherit existing classes to create your own custom classes and spawn them as if they were native!\\n\\n```lua\\n-- Creates a new Class called \\"MyNewClass\\" inheriting from Prop\\nMyNewClass = Prop.Inherit(\\"MyNewClass\\")\\n\\n-- Spawn it using the default constructor\\nlocal ent = MyNewClass(Vector(), Rotator(), \\"nanos-world::SM_Cube\\")\\n```\\n\\n\\n### Built-in Events\\n\\nNative events will return your class instead of the native class. E.g.:\\n\\n```lua\\n-- This will trigger for all Props and it\'s descendents,\\n-- and the value of \'prop\' will be the children itself\\nProp.Subscribe(\\"Destroy\\", function(prop)\\n    -- You can check if an entity is from a inherited Class type!\\n    -- IsA checks recursively if any parent is from that type\\n    if (NanosUtils.IsA(prop, MyCube)) then\\n        -- prop is of type MyCube\\n    end\\nend)\\n```\\n\\n### Custom Methods\\n\\nEasily add new methods to your class!\\n\\n```lua\\nMyNewClass = Prop.Inherit(\\"MyNewClass\\")\\n\\nfunction MyNewClass:MyMethod()\\n    -- Do something\\nend\\n```\\n\\n\\n### Custom Constructors\\n\\nThis system also allows the creation of personalized constructors:\\n\\n```lua\\n-- Creates a new Class called \\"MyCube\\" inheriting from Prop\\nMyCube = Prop.Inherit(\\"MyCube\\")\\n\\n-- Defines my constructor with any parameters you desire\\nfunction MyCube:Constructor(loc, rot)\\n    -- Do any kind of logic here\\n    loc = loc + Vector(0, 0, 100)\\n\\n    -- Calls Super Constructor to finalize the construction\\n    self.Super:Constructor(loc, rot, \\"nanos-world::SM_Cube\\")\\nend\\n\\n-- Spawn it using your custom constructor\\nlocal cube = MyCube(Vector(123, 456, 100), Rotator())\\n```\\n\\n\\n### Multiple Inheritance\\n\\nWe can inherit from other inherited classes as well!\\n\\n```lua\\nMyCube = Prop.Inherit(\\"MyCube\\")\\nMyMiniCube = MyCube.Inherit(\\"MyMiniCube\\")\\nMySuperMiniCube = MyMiniCube.Inherit(\\"MySuperMiniCube\\")\\n```\\n\\n\\n### Custom Entity Events\\n\\nNow we have the possibility to trigger remote events on custom Classes, to allow easy networking communication:\\n\\n```lua title=\\"Client/Index.lua\\"\\nfunction MyCube:OnMyAnotherEvent(my_param)\\n    Console.Log(my_param)\\nend\\n\\nMyCube.SubscribeRemote(\\"MyAnotherEvent\\", MyCube.OnMyAnotherEvent)\\n\\nlocal my_cube = MyCube()\\nmy_cube:CallRemoteEvent(\\"MyCustomEvent\\", 123)\\n```\\n\\n```lua title=\\"Server/Index.lua\\"\\nfunction MyCube:OnMyCustomEvent(player, my_param)\\n    self:BroadcastRemoteEvent(\\"MyAnotherCustomEvent\\", \\"hello\\")\\nend\\n\\nMyCube.SubscribeRemote(\\"MyCustomEvent\\", MyCube.OnMyCustomEvent)\\n```\\n\\n\\n### Global Registry\\n\\nThrough the parent class, we can get a list of all children classes of that class, having a global registry of all existing classes!\\n\\n```lua\\nlocal children_classes = ToolGun.GetInheritedClasses()\\nfor _, class in pairs(children_classes) do\\n    -- \'class\' is a custom inherited class! we can spawn it\\n    local p = class()\\nend\\n```\\n\\n\\n### Further Reading\\n\\nThere\'s much more! Like entity events or calling parent methods! Read about everything at the [Dedicated Documentation Page](/docs/next/core-concepts/scripting/inheriting-classes).\\n\\n\\n## Sandbox Improvements\\n\\nWith this new Entity System, I\'m taking the time to do some improvements in Sandbox game-mode, as now this system allows a better organization of how things interacts with each other.\\n\\n\\n### Entities\\n\\nI\'m converting almost everything into this Entity System, for example the Torch (Melee at spawn menu) now becomes a `Torch` entity inherited from `Melee`:\\n\\n```lua title=Server/Index.lua\\nTorch = Melee.Inherit(\\"Torch\\")\\n\\nfunction Torch:Constructor(location, rotation)\\n    self.Super:Constructor(location or Vector(), rotation or Rotator(), \\"nanos-world::SM_Torch\\")\\n    self:AddAnimationCharacterUse(\\"nanos-world::AM_Mannequin_Torch_Attack\\")\\n    self:SetImpactSound(SurfaceType.Flesh, \\"nanos-world::A_Punch_Cue\\")\\n    self:SetDamageSettings(0.5, 0.25)\\n    self:SetCooldown(1.5)\\n    self:SetBaseDamage(25)\\n\\n    local light = Light(Vector(), Rotator(), Color(1, 0.7, 0.4), LightType.Point, 100, 1000)\\n    light:AttachTo(self, AttachmentRule.SnapToTarget, \\"\\", 0)\\n    light:SetRelativeLocation(Vector(0, 0, 75))\\n\\n    local particle = Particle(Vector(), Rotator(), \\"nanos-world::P_Fire\\", false)\\n    particle:AttachTo(self, AttachmentRule.SnapToTarget, \\"\\", 0)\\n    particle:SetRelativeLocation(Vector(0, 0, 50))\\nend\\n```\\n\\nAnd we can spawn it like that:\\n\\n```lua title=Server/Index.lua\\nlocal my_torch = Torch(Vector(), Rotator())\\n```\\n\\n\\n### Spawn Menu\\n\\nI\'m trying to get rid of the \\"AddSpawnMenuItem\\" functions. And instead replace everything by the Inherit Registry System which you inherit from a Class and it shows up in the Spawn Menu like magic!\\n\\nFor example we are be able to `Melee.GetInheritedClasses()` and get all custom Melees Classes (like `Torch`) which were defined in this Package, and display them in the Spawn Menu automatically!\\n\\n\\n### Tools\\n\\nNow we will have a base class for the Tools called `ToolGun`. With that we can just inherit from this class to create new Tools, which will be automatically displayed on Spawn Menu and work as a Tool Gun!\\n\\nSee how the Balloon Gun is defined now:\\n\\n```lua title=Server/Index.lua\\nBalloonGun = ToolGun.Inherit(\\"BalloonGun\\")\\n\\nfunction BalloonGun:Constructor(location, rotation)\\n    -- Calls parent ToolGun constructor\\n    ToolGun.Constructor(self, location, rotation, Color.VIOLET)\\nend\\n\\nfunction BalloonGun:OnSpawnBalloon(player, location, ...)\\n    -- Do the original logic here...\\n    ...\\n\\n    -- Spawns a Balloon entity!\\n    local balloon = Balloon(location, rotation, ...)\\nend\\n\\nBalloonGun.SubscribeRemote(\\"SpawnBalloon\\", BalloonGun.OnSpawnBalloon)\\n```\\n\\nAnd on Client we just define it and set some properties which will be read from the Tool Gun and the Spawn Menu:\\n\\n```lua title=Client/Index.lua\\nBalloonGun = ToolGun.Inherit(\\"BalloonGun\\")\\n\\n-- Defines some properties used by ToolGun and SpawnMenu\\nBalloonGun.name = \\"Balloon\\"\\nBalloonGun.image = \\"package://sandbox/Client/Tools/BalloonGun.webp\\"\\nBalloonGun.tutorials = {\\n    { key = \\"LeftClick\\", text = \\"spawn balloon\\" },\\n    { key = \\"Undo\\", text = \\"undo spawn\\" },\\n    { key = \\"ContextMenu\\", text = \\"balloon settings\\" },\\n}\\n\\nfunction BalloonGun:OnFire(shooter)\\n    -- Do the original logic here...\\n    ...\\n\\n    -- Calls remote to spawn the Balloon\\n    self:CallRemoteEvent(\\"SpawnBalloon\\", location, rotation, ...)\\nend\\n\\nBalloonGun.Subscribe(\\"Fire\\", BalloonGun.OnFire)\\n```\\n\\nAnd that\'s it! No needs to call any \\"AddToSpawnMenu\\" function anymore! We just need to inherit a known class of it!\\n\\n:::tip\\n\\nNote we have defined a class called `Balloon` which is the new implementation of the balloon. \ud83d\ude09\\n\\n:::\\n\\n\\n### Context Menu\\n\\nAlso, I\'m doing some improvements on the Context Menu and make it more modular. Now it allows adding new entries dynamically, which I\'ll be integrating with the ToolGun systems to allow tools customization, look at this example of using the Balloon Gun with it:\\n\\n<VideoExternal path=\\"/blog/2022-november/context-menu.webm\\" />\\n\\nThis new ContextMenu allows customizing it 100% through Lua, without needing to add new hardcoded HTML/JS entries on it.\\n\\n\\n## Unreal Engine 5.1\\n\\nThis month, Epic Games released [Unreal Engine 5.1](https://www.unrealengine.com/en-US/blog/unreal-engine-5-1-is-now-available). This is a long-awaited version for us, especially for the expected corrections.\\n\\nThe upgrade is being smooth, the hardest part of those upgrades is forcing everyone to upgrade it\'s assets and projects too.\\n\\n\\n### Physics and Cables\\n\\nCables rendering and Physics Constraints were completely broken since 5.0, I\'ve even reported that as bug to Epic and they fixed both problems but delayed the release just to 5.1.\\n\\nBut finally we can be happy again with the balloons physics working perfectly! \ud83d\ude0e\\n\\n<VideoExternal path=\\"/blog/2022-november/balloons.webm\\" />\\n\\n\\n### Nanite & Lumen\\n\\nBoth system got great upgrades since 5.0, but one drawback of using the newest technologies is that we will need to enforce the game client uses DirectX 12, as it\'s a requirement for Nanite and some Lumen features to work.\\n\\n![](/img/blog/2022-november/nanite-01.webp)\\n\\n![](/img/blog/2022-november/nanite-02.webp)\\n\\nI will still do some studies on if we should or not force DX12, I don\'t want to have unforeseen consequences in the future by taking a decision like that.\\n\\n\\n## Ultra Dynamic Sky\\n\\n[Ultra Dynamic Sky](https://www.unrealengine.com/marketplace/en-US/product/ultra-dynamic-sky/) is one of best Unreal Marketplace Asset Packs, it provides a dynamic sky and weather solution for games!\\n\\nI decided to include this sky system natively in nanos world. It will replace our existing DefaultSun (on World class) with a new Static Class: `Sky`, which will be released soon\u2122 along with the Unreal 5.1 update!\\n\\nIf you don\'t know it yet, see this product video of your features:\\n\\n<iframe width=\\"620\\" height=\\"350\\" src=\\"https://www.youtube.com/embed/b52npy-XUdQ\\" title=\\"YouTube video player\\" frameBorder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n\\n## Conclusion\\n\\nThe update of the new entity system is huge! And I am very happy with the result, it\'s usability got really simple and that opens too many new possibilities!\\n\\nThis change will allow nanos world to advance to another level on scripting capabilities. I\'m studying more ways to allow even easier methods for creating custom scripts extensions, such as a way for you to create your entities that are dynamically loaded on a package, without you need to manually load them by `Package.Require` in the original package.\\n\\nJust by the fact that now we can simply define a new class inheriting from another and that is enough for it to be displayed in the Sandbox\'s Spawn Menu is already amazing!\\n\\nI wish to finish the still-going refactoring of the Static Classes, and also to start renaming some non-standardized Class methods. The compatibility mode feature will help a lot of us keeping things working with those changes. And as soon as possible my wish to release the UE 5.1 update to everyone, this last one will be the most painful one as require us to recook and update all assets in the store. \ud83d\ude1c\\n\\nAlso, I wish to start a discussion at Discord about the future of the [Extending Classes](/docs/next/core-concepts/scripting/extending-classes), it\'s currently working regardless of the new Inheriting system, but it has several problems that I want your opinion to decide the future of it.\\n\\nHope you enjoy it! Feedback appreciated! See you next month!"},{"id":"october-2022","metadata":{"permalink":"/pt-BR/blog/october-2022","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2022-11-09-october.md","title":"Oct: Playtest & Big API Refactor!","description":"Halloween Playtest, Big API Refactor and more!","date":"2022-11-09T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":6.75,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"october-2022","title":"Oct: Playtest & Big API Refactor!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2022-october/october-news.webp"},"unlisted":false,"prevItem":{"title":"Nov: Entity System, UDS & UE5.1!","permalink":"/pt-BR/blog/november-2022"},"nextItem":{"title":"Sep: Dimensions!","permalink":"/pt-BR/blog/september-2022"}},"content":"**Halloween Playtest, Big API Refactor and more!**\\n\\n![](/img/blog/2022-october/october-news.webp)\\n\\n\x3c!--truncate--\x3e\\n\\n## Halloween Playtest\\n\\nThis month we had our annual Halloween \ud83c\udf83 event! As always, it has always been a moment of great evolution for nanos world! I would like to thank everyone who participated playing and the testers who participated creating content and game-modes for this event!\\n\\nThis year we had 4x more registered Playtesters than last year, and we hit several records in simultaneous players. And best of all, the game server managed to handle them all with ease \ud83d\ude4f! (except by the Vault that we had to increase the download limit during the event \ud83d\ude1c).\\n\\nDue to the event, we halted the updates for two weeks to focus only on bug corrections and improvements. We pushed more than 10 small patches with many bug fixes and improvements we\'ve found before the event to grant it\'s stability!\\n\\n![](/img/blog/2022-october/playtest-01.webp)\\n\\n![](/img/blog/2022-october/playtest-02.webp)\\n\\n\\n## Vehicle Improvements\\n\\nI did several improvements on the Vehicle class, allowing bigger customization on them.\\n\\n### New Default Vehicles\\n\\nWe\'ve added a new Vehicle Pack to the default nanos world vehicles pack. 4 of them are from a Feature free Marketplace pack (from the same creator of our previous one), and the Offroad is from Epic Games.\\n\\n![](/img/blog/2022-october/new-vehicles.webp)\\n\\n\\n### Animation Blueprints\\n\\nI\'ve added the possibility of loading custom Animation Blueprints on Vehicles, allowing the opportunity to have custom suspension animations like this one of the new Offroad vehicle:\\n\\n<VideoExternal path=\\"/blog/2022-october/offroad.mp4\\" />\\n\\n\\n### Dynamic Lights Texture\\n\\nNow it is possible to configure your vehicle with custom Material Parameters to turn it\'s Lights ON or OFF dynamically. You can find more info on how to configure your vehicles materials [here](/docs/next/assets-modding/creating-assets/skeletal-meshes/vehicles-meshes#adding-dynamic-head--tail-lights).\\n\\n<VideoExternal path=\\"/blog/2022-october/taillights.webm\\" />\\n\\n\\n### New Subtle SFX\\n\\nAlso, I\'ve added new custom sounds effects to vehicles, such as pulling the handbrake, or wheels brake screeching for example which adds to the realism and immersion.\\n\\n\\n## Vault Text HTML Parser\\n\\nPreviously, as Vault item descriptions and changelogs were generated with HTML, we had CEF Browsers (WebUI) rendering them, but it was too much overkill and also quite disconnected from the rest of the UI.\\n\\nSo I decided to implement a custom HTML Parser to convert the HTML into proper Unreal Rich Text, having then a native renderer for the descriptions and changelog, making everything pretty again.\\n\\n![](/img/blog/2022-october/description.webp)\\n\\n![](/img/blog/2022-october/changelog.webp)\\n\\n\\n## Native JSON Parser\\n\\nI am migrating our current built-in JSON library to a native more-efficient JSON parser. With this new parser, we\'ve managed to reach 10x speed when parsing JSON strings! All methods will remain the same, just the implementation will change.\\n\\n```\\nBenchmark comparison: (9.5 MB JSON file)\\nBenchmark \'Lua JSON Parser\' (x10) took 9964ms.\\nBenchmark \'Native JSON Parser\' (x10) took 1057ms.\\n```\\n\\n\\n## Kill Z\\n\\nI implemented a built-in system for Kill Z. This is a system to destroying entities automatically when they reach too low heights, preventing some problems such as value overloading.\\n\\nCurrently the Kill Z offset is hardcoded for testing.\\n\\n\\n## Big API Refactoring\\n\\nThis refactoring update will come in a future update and it\'s not completely done yet, but I would like to advance some things that are planned to change. We know refactoring usually comes with several breaking changes, but this time I\'m working harder to make this update with zero breaking changes, keeping backwards compatibilities until you update your packages.\\n\\nIf you have more ideas for dramatical changes (such as renaming methods to maintain standard for example), please let us know so we can include in this big update!\\n\\n### Package Compatibility\\n\\nI will be introducing a new setting in the Package.toml for the \\"Compatibility Version\\", where you can configure the current version of the game that works with that package and if the game updates and any method that your package uses get modified, it will continue to work in a \\"compatibility mode\\" (with deprecated alerts).\\n\\nThis differs from the usual \\"deprecated warnings\\" because now in cases where the signature of a method changes the package will not stop working (as it happens today), and the old implementation/interface will still exist internally.\\n\\n\\n### Events\\n\\nCurrently events work by just subscribing and calling them local or remotely, but we cannot strict if we just want to receive them on a specific side. A new addition will be the subscription of remote-only events:\\n\\n```lua\\nEvents.SubscribeRemote()\\n```\\n\\nThis way only events called with `Events.CallRemote()` on the other side will trigger it. And also events subscribed with `Events.Subscribe()` will not receive remote events anymore.\\n\\n\\n### M\xf3dulos\\n\\nModules (Lua external binaries) will be reformed to become a type of Package. This way they can be shared easily and used by other packages, including through Vault.\\n\\n\\n### Configuration Files\\n\\nNow different Packages types will have different configuration files format (toml).\\n\\nFor example, the `loading-screen` package configuration currently have a lot of configuration which is not used by it (dependencies, assets, lua settings, etc). I want to have specific configuration files for each kind of Package (Modules, Loading Screen, Game-Modes, Libraries and Scripts), as also they will be loaded in different ways internally.\\n\\n\\n### Server, Package & Assets Image\\n\\nI\'m removing the `image` URL setting inside the configuration .toml files, instead the image should be placed besides the .toml with the name `Package.jpg`, `Assets.jpg` or `Server.jpg`. This will avoid some problems of the client accessing dangerous or bad external URLs.\\n\\n\\n### Multiple Constructors\\n\\nA feature that will be included is the possibility of multiple Constructors, a very good example is the Sound Class that has several parameters that depend if the sound is 2D or 3D:\\n\\n```lua\\n-- Current Constructor\\nSound(location, asset, is_2D_sound, auto_destroy, sound_type, volume, pitch, inner_radius, falloff_distance, attenuation_function, keep_playig_when_silent, loop_mode)\\n\\n-- New 2D Sound Constructor\\nSound(asset, auto_destroy, sound_type, volume, pitch, loop_mode)\\n\\n-- New 3D Sound Constructor\\nSound(location, asset, auto_destroy, sound_type, volume, pitch, inner_radius, falloff_distance, attenuation_function, keep_playig_when_silent, loop_mode)\\n```\\n\\nThis way you can spawn a 2D or 3D sound just by choosing the right constructor!\\n\\n\\n### Static Classes Renames\\n\\nThis will be a big organizational change! With each new update, some of our Static Classes are starting to accumulate lots of methods, and many of these are unrelated to each other.\\n\\nWith this in mind, we will split some Static Classes into new Static Classes, aiming at the best organization and especially the easy search and understanding of scripting API functions, some of the following listed methods may be renamed to reduce redundancy (e.g. to Chat.SendMessage).\\n\\nWe will have several new Static Classes, to list a few:\\n\\n`Chat`, `Console`, `Trace`, `Navigation`, `Debug`, `Viewport`, `Steam`, `Discord` and others.\\n\\nThe full list with all changes will be listed when the update is released. All of these changes, including it\'s Events will be warned as deprecated for use.\\n\\n\\n### Class Renames\\n\\nSome classes will also be renamed for better standardization. For example **Character** and **Vehicle** could become `CharacterMannequin` and `VehicleWheeled`, which allows new classes of other types e.g. `VehicleWater` or `CharacterGeneric`.\\n\\n\\n## Conclusion\\n\\nThis was a month of several fixes, improvements and rethinking the API as a whole, refactor is always a challenge as I need to maintain everything working and still rearrange the new interfaces of it, I don\'t want to rush this change.\\n\\nMy main objective now is finishing the organization of the API refactoring (please give me feedback of the changes mentioned on this blog!). Once this get finished, I will get more comfortable on adding new things and classes into it, I have many new features being developed in parallel that have not yet been announced, several of them are from your suggestions from Canny (cof cof [vote!](https://feedback.nanos-world.com) cof cof).\\n\\nThe result of the PlayTest was awesome! We had very few crashes and the server managed to handle very well the large amount of players!\\n\\nI\'m sure these upcoming improvements, including some not announced, will raise nanos world to another level of robustness!\\n\\nFinally, thank you for all the support!! See you next time!"},{"id":"september-2022","metadata":{"permalink":"/pt-BR/blog/september-2022","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2022-10-05-september.md","title":"Sep: Dimensions!","description":"Dimensions!","date":"2022-10-05T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":8.11,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"september-2022","title":"Sep: Dimensions!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2022-september/september-news.webp"},"unlisted":false,"prevItem":{"title":"Oct: Playtest & Big API Refactor!","permalink":"/pt-BR/blog/october-2022"},"nextItem":{"title":"Aug: API, Auto Docs & More!","permalink":"/pt-BR/blog/august-2022"}},"content":"**Dimensions!**\\n\\n![](/img/blog/2022-september/september-news.webp)\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Dimensions \ud83c\udf0c\\n\\n![](/img/blog/2022-september/dimensions.webp)\\n\\nProudly I announce the implementation of one of the most requested features to be integrated into nanos world: **Dimensions**! \ud83e\udd73\\n\\n![](/img/blog/2022-september/dimensions-canny.webp)\\n\\n:::note\\n\\nIn this initial version, bugs, desyncs and weird things can happen, please let me know immediately!\\n\\n:::\\n\\nDimensions are separated worlds in the client-side, where players and actors are separated. By default all players and entities are in the dimension `1`. By moving a Player to another dimension, all entities that are not from that dimension will be destroyed to that player, and all entities in the new dimension will spawn for him.\\n\\nThe API is very simple:\\n\\n```lua\\nactor:SetDimension(number)\\n```\\n\\nBy sending an entity, their \\"children\\" will move too, examples:\\n\\n- When sending an **Actor**, all the other attached **Actors** will move as well.\\n- When sending a **Player**, the **Character** will move along.\\n- When sending a **Character**, the **Player** is not moved together. The **Weapons** or **Props** (and **attached**) will move.\\n- When sending a **Vehicle**, all passengers will also be sent.\\n\\nI also added a new method to facilitate the use of events:\\n\\n```lua\\nEvents.BroadcastRemoteDimension(dimension, event_name, params...)\\n```\\n\\nThis event will be sent to all players in that dimension.\\n\\nIf you send an entity through remote events that is not in the same dimension as the Player, the argument will be replaced by `nil` and a warning will show up.\\n\\n\\n## New Aim Block Animations\\n\\nI\'ve reworked the way weapons get blocked when facing obstacles. Before it was switching the AimMode to unaimed causing a really bad effect and even moving the crosshair a little.\\n\\nNow the weapon will bend procedurally and the AimMode won\'t change, improving a lot the game-play!\\n\\n<VideoExternal path=\\"/blog/2022-september/aim-bend-01.webm\\" />\\n\\n<VideoExternal path=\\"/blog/2022-september/aim-bend-02.webm\\" />\\n\\n\\n## Server Sync Values\\n\\nNow it is possible to have global synced Values between Server and Client using `Server.SetValue()` method, with a new bool parameter `sync_on_clients`. Those values will exist on all clients through `Client.GetValue()` as usual.\\n\\n\\n## Blueprint Improvements\\n\\nOur Blueprint functionalities got boosted!\\n\\n### Event Dispatchers\\n\\n![](/img/blog/2022-september/dispatcher.webp)\\n\\nIt is now possible to bind to Blueprint Event Dispatchers from Lua! Making the communication from Blueprint to Lua now possible!\\n\\n```lua title=Client/Index.lua\\n-- Spawns the Blueprint\\nlocal blueprint = Blueprint(Vector(), Rotator(), \\"my-asset-pack::BP_AwesomeBlueprint\\",)\\n\\n-- Subscribes to a Blueprint Event Dispatcher\\nblueprint:BindBlueprintEventDispatcher(\\"GorgeousDispatcher\\", function(self, arg1, arg2)\\n    -- arg1 is a string and arg2 is an integer\\n    Console.Log(\\"Called from Blueprint!\\", arg1, arg2)\\nend)\\n```\\n\\nYou can find more examples at our new documentation page: [Blueprint Communication](/docs/next/getting-started/tutorials-and-examples/blueprint-communication)!\\n\\n\\n### Function Return Values\\n\\nIt is also now possible to retrieve return values in Lua from Blueprint Functions!\\n\\n\\n### Passing Actors through\\n\\nAnd we can pass actors through parameters into and from Blueprints calls, they will be properly parsed into the correct entity when receiving or sending from Lua! E.g. You can create a Blueprint event which receives a `Character` or `Actor` as parameter, and pass it through Lua, it will be automatically parsed and marshalled to the correct Blueprint variable type!\\n\\n\\n## Scripting Events Variables\\n\\nNow our internal variables use 8 bytes for passing floats and integers, allowing higher values from being passed through events (network ones too)!\\n\\n\\n## Tick Performance Boost\\n\\n![](/img/blog/2022-september/tick-performance.webp)\\n\\nI managed to improve a lot the performance when having thousands of entities spawned (most were caused by Level StaticMeshes. I implemented smart algorithms to improve when they will perform Tick calculations for certain entities based on distance and real need to tick an entity.\\n\\nThis improved the CPU usage in almost 10x in some cases!\\n\\n\\n## Client Side Network Authority\\n\\nAn experimental feature which has been added is the ability to allow methods of being called in the client-side if the player is the network authority of that entity.\\n\\nFor example now it is possible to call `TranslateTo`, `RotateTo`, `SetForce`, `AddImpulse`, `SetWeaponAimMode` and `SetViewMode` from client side! Which can improve a lot of Sandbox Physics Gun behavior for example!\\n\\n![](/img/blog/2022-september/physics-gun.webp)\\n\\n\\n## WebUI Native Tables\\n\\nNow you don\'t need to `JSON.stringify()` tables to pass to WebUI events anymore! You can pass them directly as the arguments and it will be natively parsed, which means much more performance when passing big tables around, and also you don\'t need to worry about stringifying or parsing them anymore as they already come as native table as the parameter!\\n\\n\\n## File JSON Parser\\n\\nOur File entity got a new method to natively load a JSON file and get it\'s table into Lua:\\n\\n```lua\\nFile.ReadJSONAsync()\\nFile.ReadJSON()\\n```\\n\\nAnd we\'ve got a big performance improvement compared to reading it as raw string and using the Lua JSON library:\\n\\n```\\nBenchmark comparison loadinga big JSON file (9.5 MB)\\nParsing it with Lua JSON library: took 9964ms.\\nParsing it with Native JSON parser: took 1057ms.\\n```\\n\\n\\n## CEF Improvements\\n\\n### Tela de carregamento\\n\\nI finished integrating CEF into the Loading Screen and now Ultralight has been completely removed from nanos world.\\n\\nAlso we got a new feature for Loading Screen: the ability to stop the Main Menu music! For that you need to call an event from JS:\\n\\n```js\\nEvents.Call(\\"StopMenuMusic\\");\\n```\\n\\n### Better Error Handling\\n\\nThe error handling has been improved as well, before we didn\'t get feedback of errors when loading invalid files and now we have.\\n\\n\\n## Character Blend Spaces\\n\\nNow it is possible to import custom Locomotion Blend Spaces to your Characters. You can override Standing, Crouching and Proning animations. And also set the transition animation between them!\\n\\n<VideoExternal path=\\"/docs/assets-modding/character-locomotion-01.webm\\" />\\n\\nWe\'ve got new API methods for that:\\n\\n```lua\\nCharacter.SetAnimationIdleWalkRunStanding(anim_path, enable_tip)\\nCharacter.SetAnimationIdleWalkRunCrouching(anim_path, enable_tip)\\nCharacter.SetAnimationIdleWalkRunProning(anim_path)\\n\\nCharacter.SetAnimationsTransitionStandingCrouching(anim_standing_to_crouching, anim_crouching_to_standing)\\nCharacter.SetAnimationsTransitionCrouchingProning(anim_crouching_to_proning, anim_proning_to_crouching)\\n```\\n\\nYou can find more examples at our new documentation page: [Character Locomotion Animations](/docs/next/assets-modding/creating-assets/animations/characters/character-locomotion-animations)!\\n\\n\\n## Precaching Assets\\n\\nNow it is possible to precache assets to make them load in Loading Screen (avoiding FPS spikes during game), for that you can just call:\\n\\n```lua\\nAssets.Precache(asset_path)\\n```\\n\\n:::note\\n\\nAll Assets are already precached automatically once referenced, so this new method is useful when you need to precache Assets which will be used in the future or loaded dynamically.\\n\\n:::\\n\\n\\n## Better Wallbang\\n\\nOur firing wallbangs were not working properly and I decided to rework it. Now wallbanging water reaches 10x further and causes more damage (before it was not possible to penetrate Water with bullets).\\n\\nWe\'ve also got a new Debug settings to draw Weapon\'s bullet traces in the world, very useful for debugging:\\n\\n![](/img/blog/2022-september/wallbang.webp)\\n\\n\\n## Menu Improvements\\n\\n### Framerate\\n\\nOur Main Menu got some improvements, we FPS limit has been hardcoded increased to 120 (was 60) and during loading to 60 (was 30), it is still not great as I want to limit it to monitor refresh rate automatically.\\n\\n\\n### Labels\\n\\nOur tabs got new labels to improve the User Experience, mainly when creating a New Game. Now it is possible to know how many dependencies you have selected without needing to enter that menus:\\n\\n\\n### New Game\\n\\nAlso in the New Game menu, now all configuration (including dependencies) are loaded from disk\'s Config.toml file. So we don\'t need to keep reconfiguring it every time when starting a server!\\n\\n![](/img/blog/2022-september/new-game.webp)\\n\\n\\n## Debug Settings\\n\\nWe got 3 new debug settings:\\n\\n- `Visualize Bullet Traces`\\n- `Visualize Vehicle Doors`\\n- `Visualize Character Capsule`\\n\\n![](/img/blog/2022-september/character-capsule.webp)\\n\\n\\n## Miscellaneous Improvements\\n\\nSome other improvements and small new features we\'ve got during this month:\\n\\n- Vehicle now receives `TakeDamage` event!\\n- It is now possible to toggle a bunch of SceneCapture rendering features with `SetShowFlags()` new method.\\n- Our console got several improvements on client side.\\n- It is now possible to draw Materials, WebUI and SceneCapture into `Canvas` (experimental)!\\n- I implemented in the scripting API a way to have multiple return values, so some methods will start getting that!\\n- Now Databases will return an error parameter if anything failed.\\n- All Character interaction (grab Prop, pickup Weapons, enter vehicles) were reworked, and now the traces are 100% precise when interacting with big objects. Also I striped the extra components needed for that, which will improve performance with too many interactable objects spawned.\\n\\n\\n## Conclusion\\n\\nWe had many significant advances this month! Blueprint improvements were a great achievement for me because I had to do a monstrous reverse engineering on Unreal and several memory magic to intercept events.\\n\\nThe addition of dimensions was a very much requested feature and greatly expands the limits for game creation!\\n\\nPerformance improvements are always very welcome and I love to make them, we still have a lot of room for further improvements!\\n\\nFurthermore, I devoted some time to work on some big refactoring internally, some parts of the code were starting to get dumped and messy, and they are not using the most modern C++20 techniques. Sometimes these refactoring are great to take the control back over our own code. \ud83d\ude04\\n\\nIn the next updates, I plan to reorganize the API (as discussed in our last #poll), we added methods which started accumulating in Static Classes without much cohesion between them. I intend to separate them and create new static classes for each, making the understanding and search for methods in the API much easier.\\n\\nAnother improvement I started to implement is the possibility of multiple constructors for entities. Which will allow we to have smaller ways to spawn the entities. This will be very useful if we want to spawn a Sound 2D or 3D for example (2D sound does not need the location parameter).\\n\\nThis is all this month, I see you next month with many more improvements and news! Thank you so much! \ud83d\udc96"},{"id":"august-2022","metadata":{"permalink":"/pt-BR/blog/august-2022","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2022-09-02-august.md","title":"Aug: API, Auto Docs & More!","description":"Open Source API, Auto-generated Documentation & More!","date":"2022-09-02T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":6.37,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"august-2022","title":"Aug: API, Auto Docs & More!","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2022-august/august-news.webp"},"unlisted":false,"prevItem":{"title":"Sep: Dimensions!","permalink":"/pt-BR/blog/september-2022"},"nextItem":{"title":"Jul: CEF, Settings Menu & Improvs!","permalink":"/pt-BR/blog/july-2022"}},"content":"**Open Source API, Auto-generated Documentation & More!**\\n\\n![](/img/blog/2022-august/august-news.webp)\\n\\n\x3c!--truncate--\x3e\\n\\nAnother month has passed, and here is a summary with the things that happened during that!\\n\\n## Open Source API\\n\\n[![](/img/blog/2022-august/api.webp)](https://github.com/nanos-world/api)\\n\\nThis month we, with the help of the entire community, created the [Official nanos world API](https://github.com/nanos-world/api), which is an organized set of all Classes, Static Classes, Utility Classes, Structs, and all their Functions and Events. We made this in order to have an official place where all the scripting of nanos world can be obtained.\\n\\n\\n## VSCode Extension\\n\\n[![](/img/blog/2022-august/vscode.webp)](https://marketplace.visualstudio.com/items?itemName=Derpius.nanosworld)\\n\\nWith the API, it was possible to professionalize the extension of [nanos world for VSCode](https://marketplace.visualstudio.com/items?itemName=Derpius.nanosworld), created by **@Derpius**. Now it uses the API to generate all the Lua stubs!\\n\\nThis way, all updates made in the API reflect directly on the extension for VSCode, being always updated!\\n\\nDon\'t forget to rate it \ud83d\ude09.\\n\\n\\n## Smart Documentation\\n\\nOur docs pass through a complete refactor under the hood! Now all **Scripting Reference** pages are generated automatically using our new API! This is a big step forward as before I was writing each function separately in each page. Now I just need to update a single JSON and the docs gets structured properly!\\n\\nNot only the automatization, but now we have some interactive popups, which display more information of a Class/Struct/Function when you hover it! This will help a lot newcomers understanding the basics of nanos world!\\n\\n![](/img/blog/2022-august/docs-01.webp)\\n\\n![](/img/blog/2022-august/docs-02.webp)\\n\\n\\n## New UI (Console & Chat)\\n\\nI\'ve updated our remaining old design UIs for the Console and the Chat! Now they belong to the same style as the menus!\\n\\n![](/img/blog/2022-august/chat.webp)\\n\\n![](/img/blog/2022-august/console.webp)\\n\\n\\n## New Profiling Stats\\n\\nI\'ve added a real time profiling view to display performance information of the game and scripting. It displays the accumulated time spent on an operation and the average in the frame in the last second.\\n\\nIt is really useful for debugging and finding bottlenecks in both core game and in your packages! It displays individual events for each packages and the time they are taking to execute.\\n\\n![](/img/blog/2022-august/profiling.webp)\\n\\n\\n## Trigger Whitelist\\n\\nNow Trigger can have a list passed in the constructor to only trigger for specific classes! This helps scripters to care more about performance and reduces the amount of validation needed in Lua side to check if an entity triggered is of the type we want!\\n\\n```lua\\n-- Triggers only Characters and Vehicles\\nlocal trigger = Trigger(\\n  Vector(),                   -- location\\n  Rotator(),                  -- rotation\\n  Vector(100),                -- extent\\n  TriggerType.Sphere,         -- trigger_type\\n  true,                       -- is_visible\\n  Color(1, 0, 0),             -- color\\n  { \\"Character\\", \\"Vehicle\\" }  -- overlap_only_classes\\n)\\n```\\n\\n\\n## SceneCapture Render Only\\n\\nSceneCapture got new methods to render only actors set manually through parameters. This allow transparent backgrounds when rendering just a specific Entity (a Character for example).\\n\\n```lua\\nSceneCapture.AddRenderActor(actor)\\nSceneCapture.RemoveRenderActor(actor)\\nSceneCapture.ClearRenderActors()\\n```\\n\\n\\n## Melee Improvements\\n\\nThe Melee class got several improvements including new methods and events to make it even more flexible. You can now set a list of Attack Animations and Impact Sounds depending on the surface it hits! Also it got a new event **Attack** when the attack happens. Not to mention several bug fixes and improvements have been made on Melees too!\\n\\n```lua\\nMelee.AddAnimationCharacterUse(asset_path, play_rate, slot_Type)\\nMelee.SetImpactSound(surface_type, asset_path, volume, pitch)\\n```\\n\\n\\n## New Traces\\n\\nI added two new Trace methods `Trace.LineSingle()` and `Trace.LineMulti()` replacing the old Trace. Those new methods now receive a `trace_mode` parameter which supports several parameters being passed as bitwise flags, this new way of passing parameters is great for future updates as it doesn\'t add breaking changes and also reduces the amount of parameters needed in the method.\\n\\nYou can for example pass it like:\\n\\n```lua\\n-- Traces complex collisions, returns the entity as the Entity table value and draws a debug line in the world.\\nTraceMode.TraceComplex | TraceMode.ReturnEntity | TraceMode.DrawDebug\\n```\\n\\n\\n## Performance Improvements\\n\\nI am constantly working on improving the performance, this is one of my main priorities. And now with the new profiling stats, we are being able to find the bottlenecks faster!\\n\\nWe\'ve got great improvement on performance while Aiming and on Blood decals/particle spawns. Now Blood takes into consideration all levels of Effects Scalability settings to spawn more/less depending on that.\\n\\nI am aware of a \\"problem\\" causing performance hit when spawning some dozens of thousands of entities (Entity Tick time) and I\'m thinking on a solution to solve that. The problem comes because each entity is \\"ticked\\" every frame, so thousands of entities means thousands of more ticks per frame.\\n\\n\\n## Native LoadPackage\\n\\nI did an great improvement on `Package.LoadPackage()` method to make a native load of Lua code. So anything you return in the loaded file will be properly receiving in the loader side! Before it was doing an ugly and weird serialization/deserialization of the returned data, and now it behaves like the native operator!\\n\\n\\n## CEF Improvements\\n\\nI am still constantly improving and adjusting the edges of integration with CEF. This last month I fixed several bugs and crashes and worked on performance improvements, there are still some points to be improved and there is one bug in my concern to be corrected.\\n\\nAlso, I\'m always going to keep our CEF version up-to-date, it was just updated to **104.4.26** so our version did to!\\n\\n\\n## New Game Settings\\n\\nOur Settings got new options which can be changed:\\n\\n- `draw network debug in the world`\\n- `display network stats in the screen`\\n- `auto realign camera`\\n- `fov can be altered by gameplay`\\n\\n\\n## Auth Website Redesign\\n\\n![](/img/blog/2022-august/auth.webp)\\n\\n@MegaThorx worked on big refactoring on our [Auth](https://auth.nanos.io) website, it now supports Dark Mode and a new UI/UX for better usability!\\n\\n\\n## Tons of Bug Fixes\\n\\nIt worth mentioning the tons of bug fixes and improvements we got this month, it\'s all written in the changelogs in our Discord.\\n\\nSome examples are: a bug causing a Deadlock in the server when using Triggers (the server was freezing), a bug causing crashes when using coroutines, duplicating logs, UX problems, Server Cache not working (loading taking minutes), Main Menu crashes, and much more!\\n\\n\\n## Community Highlights\\n\\nA huge shoutout for the French \ud83c\uddeb\ud83c\uddf7 community  hich has grown a lot on the server! And especially to [Mouloud](https://www.youtube.com/channel/UCnvxGZY1uFrXHNRu3MqMIBg) that is creating amazing packages for nanos world!\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/VeStKCAokgg\\" title=\\"YouTube video player\\" frameBorder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/Y-3T6qZfXgo\\" title=\\"YouTube video player\\" frameBorder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n\\n## Conclusion\\n\\nA lot of things being improved and bugs being fixed, the creation of API and Docs\'s self-generation are life changing (especially for me as it\'s now much easier to update docs with new things) and also for all scripters that can rely on the VSCode extension which is 100% backed on the official API.\\n\\nOnce again I reinforce the importance of posting and voting for ideas in our [Feedback Hub](https://feedback.nanos-world.com). E.g. it\'s clear that the greatest need for everyone at the moment are the Dimensions \ud83d\ude1c.\\n\\n![](/img/blog/2022-august/issues.webp)\\n\\nAnd also don\'t be reluctant to post bugs in our [Issue tracker](https://issues.nanos-world.com). The chances of your bug being fixed increases by 10000% if you post it there.\\n\\n![](/img/blog/2022-august/ideas.webp)\\n\\nThat\'s it for this month, once again thank you all for the support!!!"},{"id":"july-2022","metadata":{"permalink":"/pt-BR/blog/july-2022","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2022-08-03-july.md","title":"Jul: CEF, Settings Menu & Improvs!","description":"CEF, Settings Menu & several Improvements!","date":"2022-08-03T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":6.88,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"july-2022","title":"Jul: CEF, Settings Menu & Improvs!","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Aug: API, Auto Docs & More!","permalink":"/pt-BR/blog/august-2022"},"nextItem":{"title":"Jun: Birthday, Rebrand & UI Redesign!","permalink":"/pt-BR/blog/june-2022"}},"content":"**CEF, Settings Menu & several Improvements!**\\n\\n\x3c!--truncate--\x3e\\n\\n\\nAfter a long time and after innumerous requests (~~and death threats~~), I finally announce the big surprise of the integration with the Framework [CEF (Chromium embedded framework)](https://bitbuccket.org/chromimbedded/cef/)!\\n\\n## Chromium Embedded Framework\\n\\n![](/img/blog/2022-july/cef.webp)\\n\\nFor those who are not familiar, CEF is a framework for embedding chromium-based browsers in other applications. Roughly our `WebUI`.\\n\\nUntil then we have been using our dear [Ultralight](https://ultralig.ht/), which at first was very promising, but as it is a proprietary library and unfortunately the dev ended up devoting less time to the project, we started to get harmed by missing features or unsolved bugs.\\n\\nAnd since we can\'t be dependent on that, I made the decision to try to integrate the much consolidated framework CEF. But it was not an easy implementation at all. CEF uses various sub-processes to work, which I figured out I would have to implement on my own. I got several chills while remembering my Operating Systems classes from College. \ud83d\ude1c\\n\\nIn the end, I managed to create a totally proper integration, including a build automation to always get the latest CEF safety updates on D+1!\\n\\n\\n### Processes\\n\\nBut since not everything is flowers, there are advantages and disadvantages in using CEF. Due to its multi-process characteristics, on the one hand we have everything running in parallel (+++performance), on the other we have the drawback that rendering will always be 1 or 2 frames late, which may cause an \\"input lag\\" effect, but in practice it is not a big problem and is almost imperceptible.\\n\\nCEF uses sub-processes, which means that each WebUI will run totally independent of the game and other WebUIs, making usage of 100% of computational power with great efficiency!\\n\\nAnd that means now all communication is asynchronous. Thus, all the events between Lua \\\\<-\\\\> WebUI are also asynchronous and this is a paradigm that has changed, which should not be a problem in most cases. But this is an \\"effect\\" from having parallelism.\\n\\nAnother thing that changed is that we will have several sub-process starting and closing (like Chrome \ud83d\ude1d) while playing nanos world. It depends on the amount of spawned WebUIs and is automatically managed by CEF.\\n\\n![](/img/blog/2022-july/cef-subprocess.webp)\\n\\n\\n### Sounds\\n\\nAnother thing we gained was the Sounds! I have added a new method to the WebUI class: `WebUI:SpawnSound()` that spawns a Sound object (100% customizable as usual). In other words, you can spawn as many 3D sound entities and even set up a 7:1 cinema with them! \ud83d\ude06\\n\\n<VideoExternal path=\\"/blog/2022-july/cinema.webm\\" />\\n\\n\\n### Performance\\n\\nAs said, we gained a lot of performance. Surely I will continue to improve the implementation and boost it even more over time, but we can already see great improvements! Watch this video of me spawning dozens of WebUIs at the same time and rendering them on 3D objects in the world without a single stutter:\\n\\n<VideoExternal path=\\"/blog/2022-july/webui-everywhere.webm\\" />\\n\\nHow many videos can it handle at the same time? YES.\\n\\n<VideoExternal path=\\"/blog/2022-july/cinema-everywhere.webm\\" />\\n\\n\\n### Debug Tools\\n\\nIt is now possible to inspect your WebUI directly by third party tools, such as Chrome Developer Tools for example! \ud83e\udd73\\n\\n![](/img/blog/2022-july/cef-debug-tools.webp)\\n\\n\\n### Migration\\n\\nAlso, another good news: this migration will have 0% breaking changes! No script will need to be updated to keep working with CEF! \ud83d\udc83\\n\\nObviously some things have changed, especially in relation to CSS. In WebKit browsers (as it was before) some styles behaved differently from Chromium ones. Some layouts *can* appear ill-adjusted (e.g. different scroll bars) now.\\n\\n\\n## Settings Menu\\n\\nFinally our Settings Menu received the UI Update too! I recreated it from scratch adapting to the new interface style!\\n\\n#### Video Settings:\\n\\n![](/img/blog/2022-july/settings-video.webp)\\n\\n#### KeyBinding Settings:\\n\\n![](/img/blog/2022-july/settings-keys.webp)\\n\\nWe got a new setting tab for **House Keeping**, where it will be possible to clean up cache files, logs and other files from your installation:\\n\\n![](/img/blog/2022-july/settings-house.webp)\\n\\nWe also had the addition of a new setting: **Force no Custom Loading Screen** which disables server\'s custom Loading Screens.\\n\\n\\n## Stats & Achievements\\n\\nThis month I devoted a time to adjust our stats and achievements. And the new **Profile Stats** tab have been implemented:\\n\\n![](/img/blog/2022-july/stats.webp)\\n\\nI created some new Stats such as swimming or driving, and also I created the concept of \\"Achievements Ranks\\", adding levels bronze, silver and gold to them. Let\'s see how this model stands out. \ud83d\ude09\\n\\n![](/img/blog/2022-july/achievements.webp)\\n\\nA great improvement in the notifications of achievements has been made: now they are shown immediately when reached! (Before they were only synchronized once per minute, delaying the notifications).\\n\\n\\n## New Achievements Ideas\\n\\nI created a new page on Canny to receive suggestions of new Steam Achievements! Please take a look, vote and add new ones! I will always be integrating new ones into the game!\\n\\nhttps://feedback.nanos-world.com/achievements\\n\\n\\n## Vault Changelog\\n\\nIn Vault side, I implemented the **Updates Tab** for the items, where you can see all changes in their updates!\\n\\n![](/img/blog/2022-july/vault-changelog.webp)\\n\\n\\n## Caching and Loading\\n\\nA great improvement I made was the refactoring of the caching system. We already had a cache system that cached the loaded assets in the client side, so then the file validation was instantaneous when re-connecting to a server.\\n\\nI refactored this system, and now all cache files are in an external folder (inside `Packages/` and `Assets/` called `.cache/`), which even facilitates their cleaning.\\n\\nIn addition, when opening a server, every time the assets were loaded and cached in memory, which was really slow. And with this new system, they are still loaded but much faster, the system intelligently identifies changes and only re-caches the files that get dirty since the last load.\\n\\nThis will greatly improve the opening speed of the servers.\\n\\n\\n## Docs Improvements\\n\\nI took some time to update some pages here in the docs.\\n\\n- [Quick Start](/docs/next/getting-started/quick-start) is now even more quick and easy!\\n- [Server Installation](/docs/next/core-concepts/server-manual/server-installation) was reworked and split and now is straight to the point.\\n- [Assets & Modding](/docs/next/assets-modding/creating-assets/setting-up-ue) category got a rewrite so the guides are more linear and have less ambiguity.\\n- [Static Mesh](/docs/next/assets-modding/creating-assets/static-meshes) was completely rewritten and now have lots of new information and tips!\\n\\nI will continue to improve the docs aiming to reduce redundancy and to make it even more simple for modders and scripters to hop in! I see the docs was starting to get a little big confusing due some duplicities and some tutorials in weird places, that will be improved too!\\n\\n\\n## Notable Changes\\n\\n*Some smaller but notable changes.*\\n\\n\\n### WebUI 3D Interaction\\n\\nThis is not totally related to CEF but I took the moment to integrate methods which allow injecting events into WebUI and create a Remote Control for it: \ud83d\ude1c\\n\\n<VideoExternal path=\\"/blog/2022-july/remote-control.webm\\" />\\n\\nIt uses traces to retrieve the UV location from the hit on the TV mesh, then redirects it as WebUI events.\\n\\n\\n### Packages Maps\\n\\nI added a new setting to Packages: `compatible_maps` to make pair with the map settings: `compatible_game_modes`. Both settings are united to display compatible maps in the New Game popup when starting a new server.\\n\\n\\n### Discord FAQ Channel\\n\\nOur Discord got a new FAQ channel, which contains the most common question about the nanos world. More will be added as the time goes!\\n\\n\\n### Unreal 5.0.3\\n\\nI\'ve updated the game Unreal Engine version to the last patch 5.0.3 containing lots of engine bug fixes. This update had no breaking change.\\n\\n\\n## Conclusion\\n\\nThis was a month of great advances, several bug fixes and structural improvements in nanos world. We further evolved our IU and solved the WebUI problem that had been haunting us for a long time.\\n\\nI emphasize the importance of creating and supporting ideas at https://feedback.nanos-world.com/. It is very important to have them officialized that to know your most request demands! Here\'s July Feedback summary:\\n\\n![](/img/blog/2022-july/canny-july.webp)\\n\\nThank you a lot! You are the best!"},{"id":"june-2022","metadata":{"permalink":"/pt-BR/blog/june-2022","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2022-07-07-june.md","title":"Jun: Birthday, Rebrand & UI Redesign!","description":"Birthday, Rebrand & UI Redesign!","date":"2022-07-07T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":10.23,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"june-2022","title":"Jun: Birthday, Rebrand & UI Redesign!","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Jul: CEF, Settings Menu & Improvs!","permalink":"/pt-BR/blog/july-2022"},"nextItem":{"title":"May: 666 Bugs Fixed & P2P!","permalink":"/pt-BR/blog/may-2022"}},"content":"**Birthday, Rebrand & UI Redesign!**\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## nanos world Birthday \ud83e\udd73\\n\\nFirst of all, we would like to announce that this last week was the birthday of **3 years** of nanos world *under heavy development!* Of course the idea of creating it is older than that.\\n\\nIt has been already a long time since we started working on it, and it has been a time of much learning for me and a lot of progress for nanos world!\\n\\nI would like (again) to thank you all for the great support over all this time! I really love working on nanos world and love seeing you playing, using and creating on it! Making nanos world has become one of the great passions of my life \ud83d\ude0d!\\n\\n\\n## Rebrand\\n\\nnanos world always has been about **multiple worlds**, more specifically **YOUR** worlds which you can express yourself and create the universe you always wanted to.\\n\\nWith the progress of the game development, it has become necessary to evolve in some aspects. When it comes to marketing, the main objective is to deliver nanos world to the right potential players and for this to be possible we had to rethink some things, and one of the things was to recreate our **visual identity**!\\n\\nOur old identity lacked in some aspects regarding discoverability and professionalism, so we decided that it was time to make a new version of it! We know that it is possible that this is not yet the definitive version and it will be improved over time, however it\'s already a big step towards our short-medium term goals!\\n\\n\\n### New Logo\\n\\nFor the logos we aimed to have something more minimalistic yet professional.\\n\\nSince **nanos world** represents a wide range of game-modes and diverse worlds, we decided to create a new version of our current logo, with:\\n\\n- \ud83d\ude2e A flat outlined style.\\n- \ud83e\udd2f New title and the subtitle design & fonts.\\n- \ud83d\ude36\u200d\ud83c\udf2b\ufe0f The **ring** became an **infinity symbol** bringing the sense of unlimited.\\n\\n![](/img/blog/2022-june/old-logo.webp)\\n\\n![](/img/blog/2022-june/arrow-down.webp)\\n\\n![](/img/blog/2022-june/rebrand-side-side.webp)\\n\\n\\n### New Cover Art\\n\\nTo express the idea of diversity, we are creating a new cover art to be used as Capsule Arts on Steam and of course to contribute to the visual identity!\\n\\nSo we idealized the creation of a living planet with many things happening representing the variety of game-modes in nanos world, as a Sandbox game should be.\\n\\nThis will be a huge image (8-16K), which each time you zoom in you will find something new (the full size image will be available in-game and on the website\u2122 \ud83d\ude09)!\\n\\n:::caution note\\n\\nThe Cover Arts are not final and are still in development by the artist\u2122, some adjusts will still be made for the final version!\\n\\n:::\\n\\n![](/img/blog/2022-june/world-full.webp)\\n\\n\\nSome *WIP* Capsule Art sketches:\\n\\n![](/img/blog/2022-june/rebrand-cover-arts.webp)\\n\\n:::tip\\n\\nCredits to [Pablo (PG Ninja)](https://www.artstation.com/pablo_pg) for creating the Art.\\n\\n:::\\n\\n\\n### Motivation\\n\\nA very important factor, even within Steam, is how your game promotes itself. And this happens due to two main factors: Capsule Arts & Steam Tags.\\n\\nThe Steam Tags determine whether or not your game will be displayed to the ones browsing Steam store. And the Capsule quality determines whether they will click on your game, Capsule Arts are the first thing seen by the shoppers, they appear in store browser list or when opening the game page.\\n\\nOur current Capsule is this tedious screenshot with a simple text overlay \ud83d\ude05:\\n\\n![](/img/blog/2022-june/steam-capsule-current.webp)\\n\\nThis is even extremely contraindicated because it shows amateurism and makes those who browse Steam unconsciously ignore it, in addition to the fact that the image does not convey the genre of the game, making those interested in sandbox games do not click on the page.\\n\\n![](/img/blog/2022-june/steam-page-current.webp)\\n\\nThen for this first version of our Cover Art we wanted to make it a little bit more professional and that at least minimally communicates the \\"**Sandbox**\\" genre.\\n\\n\\n### Inspirations\\n\\nOur idea was to create an image of a living planet with various things happening, representing the variety of a sandbox game, so we got some inspiration from game arts and images that represent this idea, like the game Universim and some found stock images:\\n\\n![](/img/blog/2022-june/inspiration.webp)\\n\\n\\n### Sketches\\n\\nOur creative process went through some sketches made in Paint, until reaching the current on-going version: \ud83d\ude1c\\n\\n![](/img/blog/2022-june/sketches.webp)\\n\\n\\n## Menu Redesign\\n\\nIn addition to the rebrand, we worked hard on redesigning the main menus of nanos world!\\n\\nFirst of all, we would like to thank everyone who gave ideas and suggestions for the new design, especially Falaxir who created several threads of ideas related to it, which served as extreme inspiration for us to develop this new version!\\n\\n\\n### Motivation\\n\\nThe main menu is the gateway for all players and the first impression when playing, it needs to be intuitive and to encourage the right actions to be chosen.\\n\\nWe take into account the following pillars:\\n\\n- \ud83c\udfae **Players First**: It must take into consideration the common player as first, those who will choose a game-mode or just connect to a server to play and have fun.\\n- \ud83d\udc23 **Noob Friendly**: It should be extremely easy and intuitive to start a new game or adding custom addons to it. Even those who don\'t know anything about servers should be able to easily start a game to play with friends.\\n- \ud83e\udd0f **Less is More**: The User Experience must be the best possible. Buttons and Navigation must be intuitive without need of explicit tutorials or texts.\\n- \ud83c\udf43 **Fluidity**: New pages must open immediately, no stutters should happen, filters should apply changes instantly, no desync between pages and data should happen.\\n- \ud83e\udd70 **Cozy Place**: It must be welcoming, players must want to spend time inside the game, they must want to open the game to see what\'s going on.\\n- \ud83e\udd29 **Motivates Modders & Scripters**: It must encourage content creators to create and upload to the vault.\\n- \ud83d\udcf0 **News should be exciting**: Updates of vault items and even the game should be pleasant and exciting to read and to update.\\n- \ud83d\udd0d **Facilitated Discovery**: New game-modes and content should be found easily, as well as the best ones should be praised.\\n- \ud83c\udd95 **Expand the Possibilities**: The new menu should allow new horizons, it should be easy to integrate notification systems, lobby, favorites, etc.\\n\\n\\n### Home Screen\\n\\nIn the old Home we had friends, achievements and news divided into separate tabs:\\n\\n![](/img/blog/2022-june/old-ui-home.webp)\\n\\nBefore long we present the new **Home** page: a HUB where you can view a summary of your friends, your achievements, favorite servers, vault news and game updates!\\n\\n![](/img/blog/2022-june/new-ui-home.jpg)\\n\\n:::note\\n\\nSome buttons and features are not yet enabled and will be available soon\u2122. This initial version was aimed to contain all old features and some more \ud83d\ude09.\\n\\n:::\\n\\n\\n### Vault\\n\\nOur Vault was basically just for downloading/managing additional content, where it was possible to browse the store/remote and your local content and see a brief information about them:\\n\\n![](/img/blog/2022-june/old-ui-vault.webp)\\n\\n![](/img/blog/2022-june/old-ui-vault-details.webp)\\n\\nNow it has been redesigned for a completely new **User Experience**, providing filters and a new layout:\\n\\n![](/img/blog/2022-june/new-ui-vault.jpg)\\n\\nThe new vault navigation, in addition to continuing to provide quick install/update/uninstall buttons, now also provides a quick **Update All** button, which updates all outdated items installed at once. Not to mention the improved performance and the interconnection with other pages and systems!\\n\\n:::tip\\n\\nThis new version has several optimization improvements, such as disk images caching or virtualized list visualization \ud83d\ude01!\\n\\n:::\\n\\n\\n### Vault Details\\n\\nWe\'ve completely rethought the Vault concept and created a new details screen, which will open when a Vault (or New Game) item is opened:\\n\\n![](/img/blog/2022-june/new-ui-vault-item.jpg)\\n\\nThe purpose of this screen is to bring **all** possible information about the Package or Asset Pack: description, screenshots, updates, version, size, reviews, dependencies, and now the possibility of rating and soon\u2122 configuring them through the interface.\\n\\n![](/img/blog/2022-june/new-ui-vault-item-screenshots.jpg)\\n\\n![](/img/blog/2022-june/new-ui-vault-item-dependencies.jpg)\\n\\nYou can manage your review, the installation and updates on the right side!\\n\\nAnd when selecting a game-mode, a **Host New Game** button will appear in the lower right corner, this will be explained better below on this blog.\\n\\n\\n### New Game Screen\\n\\nOn the old New Game page, game-modes were separated into two different lists: *installed* and *local*, where it was possible to select one of the game-modes (or the \\"none\\" one) to start a server.\\n\\n![](/img/blog/2022-june/old-ui-new-game-game-mode.webp)\\n\\nIn the new design, the flow of `New Game -> Selecting game-mode -> Play` remains. But now we\'ve got a new interface and filters, also it is now possible to order by **popular**, **recently updated** or **top rating** game-modes, and it is possible to filter them by name or by the filter toggles.\\n\\nAlso, now this flow allows you to start a new game even without having the package installed, removing the need to browse and install from Vault before!\\n\\n![](/img/blog/2022-june/new-ui-new-game.jpg)\\n\\nWhen selecting a game-mode, the same detail page will appear (just like Vault). And by pressing **Host New Game**, a Server Setup popup will appear:\\n\\n![](/img/blog/2022-june/new-ui-new-game-setup.webp)\\n\\nWe created the concept of \\"single-player\\" game, which actually under-the-hood is the same server but configured to allow only one person and not announced at Server List.\\n\\nWe also improved the selection of additional Packages/Assets Packs, making the choice more functional and intuitive, you are now able to select multiple at a time before closing the selection popup.\\n\\nThe main idea of this new flow is to allow a new game to be created quickly, with less information required right away.\\n\\n:::note\\n\\nSoon\u2122 we have plans to integrate a new concept of \\"game-mode\\" config, which each game-mode can setup it\'s own configuration before starting!\\n\\n:::\\n\\n\\n### Find Servers\\n\\nFind Servers\'s old interface was quite simple:\\n\\n![](/img/blog/2022-june/old-ui-servers.webp)\\n\\nThe new version got some improvements aesthetically and now we got custom filters and improvement of the buttons display (they only appear when hovered):\\n\\n![](/img/blog/2022-june/new-ui-servers.jpg)\\n\\nAnd now it is possible to **favorite** \u2b50 a server!\\n\\n\\n### Tela de carregamento\\n\\nThe loading screen was not left out! We reformulated it so you can have a real notion of the loading progress. Now besides the background color lightening as loading is near the end, there are 4 bars in the lower left corner showing every step needed for the loading to finish!\\n\\n![](/img/blog/2022-june/new-ui-loading.jpg)\\n\\n:::note\\n\\nIt is planned to have a further improvement on the loading screen, as now when starting a New Game we still don\'t have \\"much\\" information on the server startup progress.\\n\\n:::\\n\\n\\n### Profile & Friends\\n\\nWe also got dedicated screens for your profile and to see your friends. In this screen you will be able to see information from someone or to follow him into a server.\\n\\n![](/img/blog/2022-june/new-ui-profile.jpg)\\n\\nBy clicking on your own profile, you will\u2122 have access to additional tabs like Achievements, Stats and soon Account Config as well!\\n\\n![](/img/blog/2022-june/new-ui-achievements.jpg)\\n\\n\\n## Conclusion\\n\\nAnd this was just the beginning! You know that our evolution always has been very organic, adopting and adapting suggestions and new ideas to make nanos world the best modern sandbox experience ever! And that\'s what matters most for us!\\n\\nIf you have ideas or suggestions for improvement for both Logos and UI, feel free to make them in our [Discord](https://discord.nanos-world.com), we will be all ears for you!\\n\\nAlso, if you have content uploaded to the [nanos world Store](https://store.nanos-world.com), please update it\'s description, screenshots and also your Team (now it supports image \ud83d\ude09) so it get prettier in-game!\\n\\nWe will push this blog updates to the game and all official pages as soon as possible in the next days, stay tuned!\\n\\nThank you for the support and dedication for this month! \ud83e\udd70"},{"id":"may-2022","metadata":{"permalink":"/pt-BR/blog/may-2022","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2022-06-01-may.md","title":"May: 666 Bugs Fixed & P2P!","description":"Bugs obliteration, P2P Servers, Better Sync & more!","date":"2022-06-01T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":7.35,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"may-2022","title":"May: 666 Bugs Fixed & P2P!","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Jun: Birthday, Rebrand & UI Redesign!","permalink":"/pt-BR/blog/june-2022"},"nextItem":{"title":"Apr: Now on Unreal Engine 5!","permalink":"/pt-BR/blog/april-2022"}},"content":"**Bugs obliteration, P2P Servers, Better Sync & more!**\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Bugs shall not pass!\\n\\nIn this month, we proudly achieved the incredible mark of 666 issues closed (fixed and/or resolved) in our [Issue Tracker](https://github.com/nanos-world/issues/issues)!\\n\\n![](/img/blog/2022-may/666.png)\\n\\nYou may say it doesn\'t count because some of them were just duplicated, invalid or even were closed to move to the Feedback Hub, that\'s okay. But we are not even mentioning our internal issue tracker which we already had another 500+ issues closed: \ud83d\ude01\\n\\n![](/img/blog/2022-may/internal.jpg)\\n\\nOnly in May we got 60 reported bugs fixed:\\n\\n![](/img/blog/2022-may/60bugs.jpg)\\n\\nThis is a special indicator that demonstrates that all your suggestions and ideas are read and given due attention and ALL bugs are fixed! Thank you all for contributing to that, in special @Voltaism and @Ayanokoji which really do the tap monkey job and find the most unnoticeable bugs! \ud83d\ude02\\n\\n:::tip\\n\\nYou can find the endless list of all the bug fixes in our [Discord Changelog Channel](https://discord.gg/Wn6QRdUTFk):\\n\\n![](/img/blog/2022-may/changelog.jpg)\\n\\n:::\\n\\n\\n## New Feedback Page\\n\\nRecently, we\'ve launched a new feedback page to collect ideas & suggestions. Before we were doing it on the GitHub\'s Issue Tracker, but now we have a dedicated platform only for ideas and now the GitHub is not only for bugs.\\n\\n![](/img/blog/2022-may/canny.jpg)\\n\\nThis new platform is powered by Canny, where you can add a new suggestion and vote for others. Feel free to sign in and upvote the best ideas! It is extremely useful for us to know if a feature is something really required so we can give the right priority to that!\\n\\nIt also provides a roadmap tab which groups all accepted/planned and in-progress ideas! The old Trello board is not going to be used anymore.\\n\\n![](/img/blog/2022-may/roadmap.jpg)\\n\\n\\nCheck it out! \ud83d\udc49 https://feedback.nanos-world.com/\\n\\n\\n## P2P Servers\\n\\nSomething that is fundamentally important is the ability to start a game from menu to play with friends, without worrying about dedicated servers or forwarding router ports stuff.\\n\\nAnd now this is possible thanks to the new P2P servers option! This allows you to open a server in P2P mode, which relays all traffic through the Steam Relay Servers and establish a connection between the server and client with the security of none of those knowing each other IPs and so on! \ud83e\udd2f\\n\\nFor this to happen, we had to re-implement our file transfer system (when connecting to a server) which used an HTTP connection for this purpose, and now it can use the built-in connection system to to transfer them! (HTTP transfer is still faster than using the internal sockets, although on P2P connection this is the only possible approach).\\n\\n:::note\\n\\nTransferring files through HTTP is *still* faster than P2P. We\'re working to improve this performance as well!\\n\\nWhen a server is opened as P2P all transferring are redirected to use the built-in transfer system. In the other hand, opening a server as Dedicated Server will use as it is today: small files through the built-in transfer system and big files through HTTP.\\n\\n:::\\n\\nFinally, we are introducing two new \\"types\\" of servers: `Dedicated Server` and `P2P`, this is just a configuration you can set in the `Config.toml` or as a parameter `--dedicated_server 0/1` to enable it or not. Starting a server through the menu will start it as P2P by default unless explicitly set in the advanced tab.\\n\\nWhen starting a P2P server, the Steam Relay Server will generate a new temporary random \\"fake\\" IP address which will be used by others to connect to your server. Without the need to forward router ports!\\n\\nAs the connection is established through the Steam Relay Servers, even connecting to localhost all traffic will pass through the closest Steam Server of your computer, meaning even on localhost your ping will not be zero. If you want to test or play alone, we recommend start it as dedicated server.\\n\\n\\n## New Sync Interpolation\\n\\nSince UE 5.0, some interpolation started to get weird/flickering when syncing location/rotation with the clients. To fix and improve that, we managed to integrate all our network to the Unreal\'s build in Physics Replication system!\\n\\nThis system works by being fed by network snapshot packets and handling all interpolation, extrapolation, desyncs and high pings automatically! \ud83d\ude0e It greatly increased the quality of the physics sync!\\n\\nCurrently, all physics entities (Props, Weapons, Melee, Grenade and Vehicles) are simulated using this new system. Other entities (or non simulating physics) are still using the standard method of interpolation which is totally fine and suitable for that.\\n\\nWe are still looking to include Characters in the new system. As they use a separate movement system, it requires a different approach and special attention. \ud83d\ude09\\n\\n\\n## New In-game Console\\n\\nWe\'ve extended our in-game console to provide a new raw visualization. As Unreal Widgets don\'t provide a better approach to have both colored texts and the ability to select them, we\'ve decided to add a new tab which converts the console into raw text, which you can freely copy them to the clipboard:\\n\\n![](/img/blog/2022-may/console-colorful.jpg)\\n\\n![](/img/blog/2022-may/console-raw.jpg)\\n\\n*Also we added a button to open the log file directly!* \ud83d\ude09\\n\\n\\n## Noteworthy Changes\\n\\n### Network Debug Stats\\n\\nIn addition to the Network Debug drawings in the world, we\'ve included a new screen debug tool which shows network stats information in the screen, it will be displayed if you enable **Draw Network Debug** in the settings -> debug.\\n\\n![](/img/blog/2022-may/network-debug.jpg)\\n\\n\\n### Outline\\n\\nNow you can also enable an Outline effect in actors by [:SetOutlineEnabled()](/docs/next/scripting-reference/classes/base-classes/actor#setoutlineenabled) on it! It works like :SetHighlightEnabled, and you can customize it\'s color and thickness as well!\\n\\n![](/img/blog/2022-may/outline.jpg)\\n\\nWe\'ve already replaced the Sandbox Physics Gun effect with this too!\\n\\n\\n### Animation Settings\\n\\nWe started implementing a new interface for setting animations parameters on entities, it now supports a new parameter `play_rate` which you can define directly in the `:SetAnimation...()` of entities.\\n\\n![](/img/blog/2022-may/animations.jpg)\\n\\n:::note\\n\\nCurrently this new interface is only available to Weapons. Soon it will come to all entities!\\n\\n:::\\n\\n\\n### Sounds Settings\\n\\nThe same as Animation Settings, but for sounds as well! Now you can define per-entity-per-asset common sound settings on it, it supports `volume` and `pitch` parameters:\\n\\n![](/img/blog/2022-may/sounds.jpg)\\n\\n:::note\\n\\nCurrently this new interface is only available to Weapons. Soon it will come to all entities!\\n\\n:::\\n\\n\\n### Internal Control Rigs\\n\\nWith our efforts to modularize and remove some internal dependencies (mainly related to animations and animation blueprint), we started creating some Control Rigs to replace our old approaches of procedural animations (before they were hardcoded in the Animation Blueprint, and now they are split into several Control Rigs), which also provides better performance and modularization!\\n\\nWe already created and are using Control Rigs for **Driving** and **Aiming**, which provides procedural animations for aiming with weapons and for driving wheels.\\n\\n\\n### Sandbox Improvements\\n\\nThe sandbox game-mode got some improvements as well, such as new icons for the tools:\\n\\n![](/img/blog/2022-may/tools-icons.jpg)\\n\\nAs well improved PhysicsGun & Resizer linear scaling to have a better handling, a reworked system to attaching entities with the tools (before we were having wrong attach locations due the ping, now the client-side relative location is taken into account), and of course we\'ve got several bugs fixes!\\n\\nAlso we got a [PR](https://github.com/nanos-world/nanos-world-sandbox/pull/7) from Voltaism which added the option to respawn and freeze the time through the Context Menu.\\n\\n\\n## New Docs Tutorials\\n\\n### Custom Weapon Reload Animations\\n\\nWe\'ve created a new tutorial page for adding [Custom Weapon Reload Animations](/docs/next/assets-modding/creating-assets/animations/weapon-reload-animations). This was possible due our efforts to modularizing more and more the game. Reload animations are special because they trigger gameplay actions during it\'s execution, which needs to be configured inside the Animation Montage!\\n\\n\\n## Conclusion\\n\\nWith the achievement of implementing P2P servers, we managed to make immensely easier the ability to play and test with friends! Now everyone can start a server and play with friends immediately, without the need of port forwarding and so on! \ud83e\udd73\\n\\nAlso, with the introduction of the new [Roadmap & Suggestions](https://feedback.nanos-world.com), we are moving even more towards in the feedback-driven approach, so please put all your ideas in there, and vote for the ones you like! We **really** consider that to take the next steps!\\n\\nAh, it\'s worth mention we got a hit tweet \ud83d\ude01! If you don\'t follow us yet, please do that now!\\n\\n[![Foo](/img/blog/2022-may/trending.jpg)](https://twitter.com/nanos_world/status/1522868297129156608)\\n\\nThank you for more this month, you\'re loved! \ud83d\udc9d"},{"id":"april-2022","metadata":{"permalink":"/pt-BR/blog/april-2022","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2022-05-04-april.md","title":"Apr: Now on Unreal Engine 5!","description":"Unreal Engine 5 is now the official engine of nanos world!","date":"2022-05-04T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":9.12,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"april-2022","title":"Apr: Now on Unreal Engine 5!","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"May: 666 Bugs Fixed & P2P!","permalink":"/pt-BR/blog/may-2022"},"nextItem":{"title":"Mar: Steam, Database & Blueprints!","permalink":"/pt-BR/blog/march-2022"}},"content":"**Unreal Engine 5 is now the official engine of nanos world!**\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Unreal Engine 5\\n\\n![](/img/blog/2022-april/ue5.jpg)\\n\\n#### We are thrilled to announce that Unreal Engine 5 is now the default engine of nanos world!!!\\n\\nIt was an intense month of updates, improvements and bug fixes for reaching a reasonable stable version of nanos world. We are very thankful to the testers who helped to test the stability, the migration of assets and finding bugs on it!\\n\\nIt\'s worth mention that even that UE5 \\"stable\\" was released officially by epic, there are still some bugs and improvements that need to be done, in the end of this blog we will list all known bugs we already found on UE5 and are waiting for an official fix.\\n\\nWith this release we are aiming to have the same experience and stability as before on nanos world. We are going to introduce more and more Unreal Engine 5 features in the upcoming updates from now on, granting they will have the proper stability and integration.\\n\\n\\n## Amazing new UE5 Features\\n\\nHere\'s some noteworthy new Unreal Engine 5 features which will be very useful for nanos world Asset creators!\\n\\n\\n### [New UI](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/505-new-unreal-editor-interface)\\n\\n![](/img/blog/2022-april/ue5-ui.jpg)\\n\\n*Unreal Engine 5 brings a suite of improvements to the look, feel, and efficiency of the user interface, creating a modern, improved workflow for all users.*\\n\\nIt\'s a way better and pleasant workflow for modders and asset creators!\\n\\n\\n### [Geometry Tools](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/500-core-modeling-improvements-beta)\\n\\n![](/img/blog/2022-april/ue5-modeling.jpg)\\n\\nCreating meshes and maps got even easier with the built-in modeling and mesh editing tools inside UE5!\\n\\n\\n### [Quixel Bridge](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/372-quixel-bridge)\\n\\n![](/img/blog/2022-april/ue5-quixel.jpg)\\n\\n*The Quixel Bridge plugin for Unreal Engine gives you full-featured access to the Megascans library within the Unreal Editor. You can browse Collections, search for specific assets, and easily add assets to your Unreal Engine projects.*\\n\\nIt comes built-in with UE5! Just drag\'n drop and you have the asset!\\n\\n:::tip\\n\\nWe are actively looking for a way to improve the Quixel Bridge pipeline into nanos world.\\n\\n:::\\n\\n\\n### [Chaos Destruction](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/379-chaos-destruction)\\n\\n![](/img/blog/2022-april/ue5-chaos.jpg)\\n\\n*The Chaos Destruction system is a collection of tools that can be used to achieve cinematic-quality levels of destruction in real time.*\\n\\nWe\'ve managed to already integrate an initial version of it with nanos world, you can spawn any **Geometry Collection** as a StaticMesh, check it out!\\n\\n<VideoExternal path=\\"/blog/2022-april/chaos-destruction-01.webm\\" />\\n\\n<VideoExternal path=\\"/blog/2022-april/chaos-destruction-02.webm\\" />\\n\\n<VideoExternal path=\\"/blog/2022-april/chaos-destruction-03.webm\\" />\\n\\n\\n:::tip\\n\\nWe are actively working on improving even more the integration with Chaos Destruction entities!\\n\\n:::\\n\\n\\n### [Lumen](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/513-lumen)\\n\\n<VideoExternal path=\\"/blog/2022-april/ue5-lumen.webm\\" />\\n\\n*Lumen is Unreal Engine 5\'s new fully dynamic global illumination and reflections system.*\\n\\nIt provides a software-calculated Ray Tracing methods! This is a new very efficient technique for achieving Global Illumination, but it still has a cost. In our tests Lumen in Epic quality hit 50% of the FPS, and 25% on Medium. You can enable/disable it in the Game Settings.\\n\\nLumen also provides a **Hardware Ray Tracing** method for compatible GPUs, this is also now a setting in the Game Settings ;)\\n\\n\\n### [DirectX 12](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/526-directx-12)\\n\\n![](/img/blog/2022-april/ue5-dx12.jpg)\\n\\nNow nanos world comes with DX12 as the default RHI. *Some new features such as Nanite, Lumen, and Virtual Shadow Maps run more efficiently in DX12 than in DX11.*\\n\\nYou can switch from DX11 \\\\<-\\\\> DX12 in the Game Settings. *DX12 is required to use Hardware Ray Tracing.\\n\\n\\n### Much More\\n\\nYou can see a list of all the new features in the [Official UE5 Roadmap](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/tabs/46-unreal-engine-5-0) and also in the [Official UE5 Release Notes](https://docs.unrealengine.com/5.0/en-US/unreal-engine-5-0-release-notes/).\\n\\nIt\'s worth mentioning other amazing features like [MetaHumans](https://www.unrealengine.com/en-US/metahuman-creator), [Nanite](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/511-nanite) and [Runtime Retargeting](https://portal.productboard.com/epicgames/1-unreal-engine-public-roadmap/c/374-retargeting-full-body-ik-toolset). Those (and many others) are still going to be tested to be actively supported on nanos world!\\n\\n\\n## Reworked Water Physics\\n\\nAlso this month we managed to tweak a little bit our Water Physics settings. We use Unreal\'s Water System integrated into nanos world, and it uses a Pontoon system to make buoyancy on the objects. Props, Pickables and Vehicles have the pontoons spawned automatically in game, and since then the algorithm to calculate the size and it\'s force was quite primitive.\\n\\nAfter several hours testing and doing several extremely hard math calculations we\'ve managed to implement a new procedural algorithm which dynamically spawns pontoons through the object depending on it\'s size and mass. This makes rectangular objects to react properly for example (before we had only one sphere pontoon which made objects to keep rotating weirdly in water).\\n\\nThis new algorithm fixes the problem of having some Props being ejected and kicking infinitely over the water, and also normalizes their floating capabilities. Right now they all floats equally, we still intend to improve it by allowing custom pontoons to be set through scripting and also through the engine, and also to use Physical Materials to change the buoyancy force depending on it.\\n\\n<VideoExternal path=\\"/blog/2022-april/water-buoyancy.webm\\" />\\n\\n\\n## New Default Maps\\n\\n![](/img/blog/2022-april/ocean-map.jpg)\\n\\nWe are shipping two new default maps to nanos world: `OceanMap` and `BlankMap`. The first contains a small island and a vast ocean (good for testing Water stuff), and the second is literally Empty and all black, good for dynamic scripting created maps!\\n\\nWe\'ve also tweaked the size of `BlankMap` and it\'s surface texture to have a modern and UE5 look.\\n\\n\\n## nanos world Migration\\n\\nAs we stated in the last [blog](/blog/march-2022#steam-store-page) we are moving to a new Store Page, the new nanos world version on UE5 will already be on this new game entry, and the old entry will be completely deactivated.\\n\\n\\n### Game\\n\\nAll the **current testers** will receive a new Steam Key to activate nanos world in your Steam accounts. Here\'s how to get the new nanos world game key:\\n\\n1. **WISHLIST** the new game entry first \ud83d\ude01\\n\\n<iframe className=\\"steam-widget\\" src=\\"https://store.steampowered.com/widget/1841660/\\" frameBorder=\\"0\\" width=\\"620\\" height=\\"190\\" loading=\\"lazy\\"></iframe>\\n\\n2. ***optional***: Launch the old game at least once to store your achievements to automatically import them when launching the new game (*this is a built-in tool to automatically export and import your stats*).\\n3. ***optional***: Make a backup of your `Server/` folder (*if you are developing Packages/Assets*).\\n4. ***optional***: Uninstall the old game, although it is not obligatory, it\'s recommended because some problems may happen if you don\'t, as both games use the same folder name.\\n5. You will receive the new Steam Key at the [Auth Website](https://auth.nanos.io/identity/account/manage/redeemcode/). If you didn\'t, please reach us.\\n\\n\\n:::caution\\n\\nAll old game keys will be revoked. You will receive an warning on Steam saying that the \\"Beta Test has ended\\".\\n\\n:::\\n\\n\\n### M\xeddias\\n\\nThe pipeline of exporting assets from Unreal Engine didn\'t change, all old tutorials are still valid but some are still using the old UE4 interface, we are constantly updating the docs to update the images and add more information to this workflow.\\n\\nWe\'ve already updated the [Importing Custom Assets](/docs/next/assets-modding/creating-assets/importing-assets) and also the [Assets Development Kit](/docs/next/assets-modding/creating-assets/adk-assets-development-kit) pages. There is a new workflow which has been updated to export assets, so now you don\'t need to package the project, just need to cook the assets - but the old way is still valid tho, the new is just easier.\\n\\nThe [Assets Development Kit GitHub Project](https://github.com/nanos-world/assets-development-kit) was updated as well, the only things that changed were the following files:\\n\\n* `Config/DefaultEngine.ini`\\n* `NanosWorldADK.uproject`\\n\\nYou can pull into your current ADK downloaded project or just replace your project with the new files. If you get problems, try deleting the following folders in your project, so you have a clean project (without the old compiled stuff):\\n\\n* `Binaries/`\\n* `Saved/`\\n* `Intermediate/`\\n\\n:::note\\n\\nAll Assets will need to be recooked in Unreal Engine 5 to work with the new nanos world version. This is needed as from time to time the shader code or the serialized binaries are changed when the Engine changes, so we need to get in the same version otherwise the game may crash expecting to load a newer version but the file is old.\\n\\nWe already managed to update the official asset packs.\\n\\n:::\\n\\n\\n### New Testers\\n\\nWe are very sorry for making the recently players which registered to become a tester to wait that long, since we are moving to the new game entry, we didn\'t want to give you the old keys anymore, but now we are backing to our testing invitations!\\n\\n:::tip\\n\\nWe are still aiming to invite only Modders and Scripters, if you are just a player, keep the eye on the future open Playtest sessions!\\n\\n:::\\n\\n\\n### Known Bugs\\n\\nSome bugs are known and are listed below, most of them we don\'t have much to do and are much likely an internal UE5 bug, I am reporting them all to Epic, let\'s pray they accept the report and fix it.\\n\\n- Cables rendering not working sometimes (Epic accepted [my report](https://issues.unrealengine.com/issue/UE-149249)).\\n- Balloons/Cables square constraint (Epic accepted [my report](https://issues.unrealengine.com/issue/UE-148444) and already fixed it for 5.1).\\n- Hit events/sounds not always triggering (report not accepted yet).\\n- SceneCapture not bounces anymore (report not accepted yet).\\n- Chaos Physics sometimes freeze an object if he stands still for some small time, I did some workaround to fix it in certain cases on nanos world (when grabbing or dropping props).\\n\\n\\n## Conclusion\\n\\nThis release of nanos world on UE5 represents our efforts to always bring the bleeding edge technology to the game. It is our main pillar to develop a platform with quality, efficiency and modularity. And by doing it right, these updates and new features become easy to integrate or make \ud83d\ude01.\\n\\nWe want to be the reference in sandbox games for the Unreal Engine (5), and we are moving in that direction!\\n\\nWe really appreciate everyone who has supported us so far! Every like, react, emoji or comment makes us much happier! Thank you!"},{"id":"march-2022","metadata":{"permalink":"/pt-BR/blog/march-2022","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2022-04-06-march.md","title":"Mar: Steam, Database & Blueprints!","description":"New Steam Store Page, Performance Optimization, Databases & Blueprint Integration!","date":"2022-04-06T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":8.36,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"march-2022","title":"Mar: Steam, Database & Blueprints!","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Apr: Now on Unreal Engine 5!","permalink":"/pt-BR/blog/april-2022"},"nextItem":{"title":"Feb: UE5 & Network Authority!","permalink":"/pt-BR/blog/february-2022"}},"content":"**New Steam Store Page, Performance Optimization, Databases & Blueprint Integration!**\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Steam Store Page\\n\\nRecently we got a hitch in our Store Page which required us from getting a brand new one. And now we finally are re-releasing it! It got new screenshots, videos and a better description!\\n\\n[![](/img/blog/2022-march/store-page.jpg)](https://store.steampowered.com/app/1841660/nanos_world?utm_source=docs&utm_campaign=march_blog)\\n\\n#### Please WISHLIST NOW!!!\\n\\n<iframe className=\\"steam-widget\\" src=\\"https://store.steampowered.com/widget/1841660/\\" frameBorder=\\"0\\" width=\\"620\\" height=\\"190\\" loading=\\"lazy\\"></iframe>\\n\\nA downside of this whole situation is that the old store and the old game entry will be deactivated. Soonish everyone will receive a new Steam Key to activate the new nanos world in your library!\\n\\nAlso we embedded a tool to export (then import) your Achievements and Stats from the old game to the new one. You just need to launch the old game once before launching the new one and everything is imported automatically!\\n\\n\\n## Performance Optimization\\n\\nEveryone knows that one of the great aspects of nanos world is the performance and the optimization. And in the last month we had a significant advance in improving some internal critical points of our framework.\\n\\n\\n### Memory\\n\\nThe first one to mention was a **huge** improvement in the memory usage of our spawned entities.\\n\\nInternally, we use a special system to handle sending and syncing data through the network. Our approach is to have a similar system to Unreal\'s Replication system. But until then this system was responsible for most of part of the memory usage in each spawned Entity.\\n\\nWith that in mind we aimed to solve this problem, not to mention most of these memory usage was duplicated in all entities unnecessarily. And fortunately we succeeded on reducing up to 90% of the memory usage of the entities. Right now it occupies exactly the data which is strictly needed for it\'s existence!\\n\\nWe did a small test to compare, spawning 10.000 Characters through Scripting, check the memory usage difference:\\n\\nBefore: ![](/img/blog/2022-march/memory-before.png)\\n\\nAfter: ![](/img/blog/2022-march/memory-after.png)\\n\\nComparison of some Entities Memory Usage Before x After:\\n\\n| Entity     | Memory Usage Before | Memory Usage After | Reduction |\\n|:---------- |:------------------- |:------------------ |:--------- |\\n| Cable      | 5.4 KB              | 1.1 KB             | 80%       |\\n| Character  | 13.1 KB             | 1.8 KB             | **86%**   |\\n| Light      | 4.8 KB              | 1.0 KB             | 79%       |\\n| Melee      | 7.1 KB              | 1.5 KB             | 79%       |\\n| Particle   | 4.6 KB              | 1.0 KB             | 78%       |\\n| Player     | 3.1 KB              | 0.3 KB             | **90%**   |\\n| Prop       | 4.8 KB              | 1.0 KB             | 79%       |\\n| StaticMesh | 4.5 KB              | 1.0 KB             | 78%       |\\n| TextRender | 5.3 KB              | 1.1 KB             | 79%       |\\n| Trigger    | 4.0 KB              | 0.8 KB             | 80%       |\\n| Vehicle    | 7.9 KB              | 2.0 KB             | 75%       |\\n| Weapon     | 11.1 KB             | 2.0 KB             | **82%**   |\\n\\n:::note\\n\\nThis usage was calculated on Server side. On Client side the values would be a little bit bigger, not to mention to the Assets which are loaded together.\\n\\n:::\\n\\nThis was achieved just by improving one single system, we didn\'t even start looking for active compression techniques or reducing some variables sizes which are unnecessarily bigger than it needs. \ud83d\ude4f\\n\\n\\n### Network\\n\\nAnother great optimization was in our network packets, each data sent through the network has a common \\"header\\" to identify some operations. This is a constant \\"cost\\" for the network which we managed to reduce up to 75% of it\'s size, making all data being sent through the network statically lower!\\n\\n\\n### Client Side\\n\\nWe started advancing into optimizing the game in the client side. Which normally is trickier than on Server side because it concerns to dealing to Unreal Engine subsystems. But we managed to add some optimizations based on the Quality Settings selected. For example on the Blood or Bullet Holes particles, now depending on the distance and on the Effects Quality selected, they will be less or not spawned at all.\\n\\nWe\'ve also tweaked the Vehicle System to do similar optimizations using this system. There is still a lot which we can improve! \ud83d\ude00\\n\\n\\n## New Class: [Blueprint](/docs/next/scripting-reference/classes/blueprint)\\n\\n![](/img/docs/blueprint.webp)\\n\\nA very required class is being introduced: **Blueprint**! Now it is possible to spawn any Blueprint Actor in nanos world!\\n\\nWe\'ve managed to implement the method: `CallBlueprintEvent()` which you can create any **Event** or **Function** with any number of parameters in your Blueprint and call it from Scripting! This expands many possibilities!\\n\\nAlso, you can spawn it on server and it will follow the same rules as any other Actor Entity, and it will be synchronized with other players using the Network Authority system as well!\\n\\n\\n## New Class: [Database](/docs/next/scripting-reference/classes/database)\\n\\n![](/img/docs/db.webp)\\n\\nSomething that is extremely fundamental for some game-modes such as roleplay is the Database. Until then we were providing a MySQL Module to be used as a third-party Lua library, but due it\'s complexity to integrate with your server and also because it wasn\'t possible to make async queries we dug into a more robust solution.\\n\\nFor that, we present the new class: [Database](/docs/next/scripting-reference/classes/database). A all-in-one solution for connecting to a database, it supports **MySQL**, **PostgreSQL** and **SQLite** out of the box! Not to mention the async and thread-safe queries!\\n\\nCheck it\'s page for complete documentation and examples!\\n\\n\\n## Vehicles Tire Skid Mark\\n\\nA small but cool addition we did for vehicles was adding Tire marks when it skids:\\n<VideoExternal path=\\"/blog/2022-march/tire-skid.webm\\" />\\n\\nAlso, an awesome detail was added: the wheels get smeared with blood!\\n<VideoExternal path=\\"/blog/2022-march/tire-blood.webm\\" />\\n\\nIt is 100% dynamic and procedural!\\n<VideoExternal path=\\"/blog/2022-march/tire-blood-decal.webm\\" />\\n\\n\\n## Sandbox Improvements\\n\\nWe got several improvements regarding the sandbox game-mode! The first one is the sandbox \\"API\\": we listed all functions and events it exports so you can integrate your own entities/tools or use it\'s features.\\n\\nAlso we\'ve modularized the menu, categories and tabs, and you can add your own from your external package!\\n\\nCheck it out the sandbox API in the GitHub page: https://github.com/nanos-world/nanos-world-sandbox.\\n\\nFinally, we\'ve improved our Physics Gun tool, now you can control it using the mouse and also have a \'snap-to-grid\' movement!\\n\\n<VideoExternal path=\\"/blog/2022-march/physics-gun.webm\\" />\\n\\nSeveral other adjustments and bug fixes were made on Sandbox as well.\\n\\n\\n## New [Particle Methods](/docs/next/scripting-reference/classes/particle)\\n\\nWe\'ve expanded the possibilities for Particles! Now it\'s possible to set Material parameters on it, and also use any **Texture**, **WebUI** and **Canvas** as parameters as well!\\n\\nFor example you can spawn a Canvas, draw on it and use as a Material Particle parameter!\\n\\nThe following video shows using the WebUI https://nanos-world.com as a Material parameter into the Particle! Rendering in runtime!\\n\\n<VideoExternal path=\\"/blog/2022-march/particles-webui.webm\\" />\\n\\n\\n## Notable Improvements\\n\\n### Music Concurrency\\n\\nWe finally managed to fix the Music problem, which was making Sounds of type Music from stopping when too many sounds were spawned.\\n\\n\\n### Client-side [Props](/docs/next/scripting-reference/classes/prop)\\n\\nProps can now be spawned on Client side as well! This allows having \\"unnetworked\\" dynamic meshes spawned on client, intended for use as visual effects and non-gameplay features.\\n\\nWe\'ve already updated the Sandbox\'s Destructable entities to use client-side debris!\\n\\n\\n### Level Static Meshes\\n\\n![](/img/blog/2022-march/been.jpg)\\n\\nNow all [StaticMeshActors](https://docs.unrealengine.com/4.27/en-US/Basics/Actors/StaticMeshActor/) from a Map are automatically loaded as [StaticMesh](/docs/next/scripting-reference/classes/static-mesh) entity on Client Side! It is possible to paint, destroy, move and everything else on them on client-side!\\n\\n\\n### Async Texture Loading\\n\\nWe\'ve improved our Client loading system and now textures (e.g. `.jpg`) are asynchronously loaded and the texture is applied in a deferred way. This system currently is implemented under `SetMaterialTextureParameter()` for testing, soon we can use it in other methods as well.\\n\\n\\n### Async [File](/docs/next/scripting-reference/classes/file) Loading\\n\\nIn addition to the above, we\'ve expanded our Async implementation into File class, which now have the `:ReadAsync()` method!\\n\\n\\n### New [Light](/docs/next/scripting-reference/classes/light) Methods\\n\\nWe\'ve added a bunch of missing Light setters and getters methods, also the ability to toggle it on/off with `SetVisibility()`.\\n\\n\\n### [Assets.toml](/docs/next/core-concepts/assets#assets-pack-configuration) Changes\\n\\nThe Asset.toml got a new category: `unreal`, where we must specify a new setting `unreal_version` (the unreal version this Asset Pack was compiled on), this will be an important feature to prevent old Assets versions from crashing the game.\\n\\nAlso it got the new `blueprints` category for listing Blueprints \ud83d\ude09.\\n\\n\\n### Vehicle Collisions\\n\\nWe\'ve tweaked and improved our Collision configurations and now Vehicles interact better when colliding with other objects, including Networked Characters, Props and other Vehicles.\\n\\nBefore other Networked Characters were desyncing when colliding with vehicles (they started to fly and weird things happened when objects hit the Vehicles wheels), and also the hit between two vehicles were extremely rigid, which has been fixed too and will be more organic now.\\n\\n\\n### Sun Improvements\\n\\n![](/img/blog/2022-march/sunrise.jpg)\\n\\nThe Default Sun light and shadows has been improved, specially during sunrise/sunset which we had some artifacts and shadows disappearing, now it must be smoother and prettier (and hopefully more efficient).\\n\\n\\n## Conclusion\\n\\nThank you for another month of support! There were incredible advances with Blueprint and Database Classes, and also to finally lining up our Steam Page again!\\n\\nOur north is to continue advancing performance and memory optimizations, as well as bringing essential new features to nanos world!\\n\\nWe also have some important challenges of bringing distance based culling and dimensions system for entities, which is essential for creating special environments.\\n\\nThere are some essential Classes that we want to implement as well, like custom Characters (e.g. for Animals) and other types of Vehicles (Air, Sea).\\n\\nFinally, we are very excited with the release of Unreal Engine 5 (yesterday 05 April), as with it comes with several solutions to important questions in nanos world (such as Runtime Retargetting which promises solving several animations compatibility issues) and tons of new features to be used! We gonna have good news soon\u2122 for you!\\n\\nSee you next month! \ud83e\udd73"},{"id":"february-2022","metadata":{"permalink":"/pt-BR/blog/february-2022","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2022-03-02-february.md","title":"Feb: UE5 & Network Authority!","description":"Unreal Engine 5 Preview, new Network Authority System, Store API and more","date":"2022-03-02T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":8.84,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"february-2022","title":"Feb: UE5 & Network Authority!","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Mar: Steam, Database & Blueprints!","permalink":"/pt-BR/blog/march-2022"},"nextItem":{"title":"Jan: Store & Vault!","permalink":"/pt-BR/blog/january-2022"}},"content":"**Unreal Engine 5 Preview, new Network Authority System, Store API and more**\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Network Authority System\\n\\nAs everyone knows, nanos world relies on a \\"server-less\\" solution for physics and other world operations. All the sync relies of sharing data between the players and replicating in each client. This approach brings several advantages and of course some drawbacks, in the advantages we can include a very lightweight server, where we have all the control over it, without needing to rely on Unreal\'s server executable or the way it handles the network.\\n\\nIn the other hand we got some challenges on how to distribute physics information and other stuff. Then in the beginning we created our first Network Authority system in which each player is responsible for sharing a specific set of entities from the server to others, similar to [Roblox Solution](https://developer.roblox.com/en-us/articles/Network-Ownership).\\n\\nHowever, just like in Roblox, some problems become more noticeable when we have many players connected with many different pings. As some players will receive the \\"network authority\\" over entities faster than others, they will start sharing their location/rotation to other players while the \'old\' network authority is still the authority over that because he didn\'t receive the \\"lost network authority\\" message yet.\\n\\nWe created this diagram to exemplify the problem:\\n\\n![](/img/blog/february/network-authority-problem.jpg)\\n\\nAs you could notice, there is a \\"gap\\" and a \\"overlap\\" when switching network authority if we have discrepancies between players ping, causing several weird behaviors on physics objects.\\n\\nConsidering this and after much study, we improved our Network Authority system to make it more robust, this new way aims to fill up the gaps and ignore overlaps:\\n\\n![](/img/blog/february/network-authority-solution.jpg)\\n\\n\\nWhile still in a \\"beta\\" version, with this new system we intend to improve all the \\"warnings\\" and flickering problems that were occurring since then, all feedback is appreciated!\\n\\n\\n## New Debug Modes\\n\\nWith the addition of the new Network Authority system, we are adding a new **Debug** section in the Settings.\\n\\n![](/img/blog/february/debug-settings.jpg)\\n\\nA cool setting is the **Draw Network Debug** which draws on World all network information:\\n\\n![](/img/docs/debug-visualizer.webp)\\n\\nYou can find more information in the [Network Authority](/docs/next/core-concepts/scripting/authority-concepts#debugging-network--network-authority) page.\\n\\nAlso you can fake \\"packet loss\\" which will simulate some Sync Data being discarded.\\n\\n\\n## Store API\\n\\n![](/img/blog/february/swagger.png)\\n\\nLast month we released our [Store](https://store.nanos.world), a place to share and download community Assets & Packages, integrated with the game.\\n\\nNow we are releasing the **Store API**: You can download, upload and edit your resources through HTTP requests, check it the Swagger documentation at https://api.nanos.world/store/docs. More tutorials coming soon\u2122.\\n\\n\\n## Documentation Changes\\n\\n### M\xf3dulos\\n\\nWe\'ve added a new tutorial for creating your own C Module. You can check it out at the [Modules](/docs/next/core-concepts/packages/c-module) page.\\n\\n\\n## Unreal Engine 5: Preview\\n\\n![](/img/blog/february/matrix.webp)\\n\\nA week ago, Epic Games gave us the wonderful news that they were releasing [Unreal Engine 5: Preview](https://www.unrealengine.com/en-US/blog/unreal-engine-5-is-now-available-in-preview). A Preview release means most of the features are already present and almost ready for a final shipping version.\\n\\nAnd we, as good enthusiasts, and in addition to our other blog news ([November: Unreal Engine 5?](/blog/november-2021)) decided to give another try on converting nanos world into Unreal Engine 5. And let\'s move to our impressions:\\n\\n\\n### Migrating nanos world\\n\\nThis time migrating nanos world to Unreal Engine 5: Preview was more trickier, we\'ve got even more deprecated methods and some functionalities changed and/or removed, which required more hard work converting and debugging what has changed.\\n\\nWe\'ve had to update a lot more code and files than the Early Access version to be able just to launch the Project. Also Vehicles had to be disabled due the new Chaos engine, which completely changes how Vehicles need to be implemented and we didn\'t want to bother on converting them right now.\\n\\n\\n### Graphics\\n\\nUnreal Engine 5 introduces [Lumen](https://www.unrealengine.com/en-US/blog/lumen-in-ue5-let-there-be-light), a new dynamic Global Illumination method, and playing with it is very cool and impressive. Here\'s some screenshots taken from our Testing Map:\\n\\n\\n![](/img/blog/february/ue5-graphics-01.webp)\\n\\n![](/img/blog/february/ue5-graphics-02.webp)\\n\\n![](/img/blog/february/ue5-graphics-03.webp)\\n\\n![](/img/blog/february/ue5-graphics-08.webp)\\n\\n![](/img/blog/february/ue5-graphics-09.webp)\\n\\n![](/img/blog/february/ue5-graphics-10.webp)\\n\\n:::tip\\n\\nNext you can see how the object colors can reflect dynamically in the environment lights.\\n\\n:::\\n\\n![](/img/blog/february/ue5-graphics-04.webp)\\n\\n![](/img/blog/february/ue5-graphics-05.webp)\\n\\n![](/img/blog/february/ue5-graphics-06.webp)\\n\\n![](/img/blog/february/ue5-graphics-07.webp)\\n\\n:::tip\\n\\nHere we can see the contribution of Emissive Materials to the environment.\\n\\n:::\\n\\n![](/img/blog/february/ue5-graphics-11.webp)\\n\\nA cool feature is that we can enable Hardware-Accelerated for calculating Lumen (which replaces Hardware Ray Tracing), and tested with a RTX 3070 makes it even more beauty at a really low GPU cost.\\n\\n\\n### Technical\\n\\nIn the technical aspect, the biggest changes Unreal 5 brings are:\\n\\n- **Lumen** (Dynamic Global Illumination)\\n- **Nanite** (Mesh Virtualization)\\n- **Chaos** (new Physics Engine)\\n- and also not less important, the new features regarding World/Level creation (**One File Per Actor** and **World Partition**)\\n\\nWhile Lumen, Nanite and World features can be toggled on or off (we can choose to use it or not), the same truth is not valid for **Chaos**. Unreal is completely removing PhysX and replacing by it\'s new Physics Engine: **Chaos**. Although we are open to new things, unfortunately Chaos doesn\'t seem to be in a totally good state, neither at least at the same level/stability as PhysX.\\n\\nWe could experience several Collision glitches, such as objects flickering, wrong \\"collision boxes\\", objects flying through walls, bugs with Rope (Cable), objects sleeping randomly, bad Hit events callbacks and so on.\\n\\nMost of the problems we could find an workaround (like applying force to some objects so they don\'t sleep, or finding a workaround on the Cables settings), but the main problem we\'ve found using Chaos is the Hit feedback event, which are totally inconsistent, sometimes they are triggered with force 0, which annoys the hit sounds and also the nanos world Hit events from being triggered, and this can break gameplay/scripting functionalities.\\n\\nNot to mention the objects flickering/disappearing/losing collisions which gives a really bad impression on the game quality.\\n\\nAnd we didn\'t even started implementing the new Chaos Vehicles, can\'t wait what we gonna find there \ud83d\ude05.\\n\\n\\n### Stability\\n\\nActually, this version of Unreal surprised us positively, it had less crashes than in early access, but still had some, but in this case it was when we were stressing the game really hard using several balloons, cables and props flying around. Although I was a little disappointed as most of the bugs I found in the Early Access were still prevent in this Preview and weren\'t yet fixed.\\n\\nAlso some rare bugs could be noticed, like suddenly being teleported to the 0, 0, 0 location, which we couldn\'t yet find the reason.\\n\\n\\n### UE5 worth it now?\\n\\nSumming up, we\'ve created a list of positive and negative points according to our view regarding if we should or not migrate to Unreal 5 \\"right now\\":\\n\\nAlso, another point to consider: we are going to migrate to Unreal Engine 5 soon or later, the decision is \\"when\\". \ud83d\ude09\\n\\n\\n#### Negative Points \ud83d\udc4e\\n\\n- Gameplay Bugs related to Physics, objects jumping, flickering, bad collisions happening, objects passing through floor/walls due **Chaos**.\\n- Visual Artifacts, not only related to Lumen, but to the standard Rendering methods as well.\\n- Random Unreal internal Crashes, which we cannot fix by ourselves.\\n- More frequent Unreal updates, much probably we are going to have other Preview version, and after the UE5 release we are going to get several hotfixes, and each one will much likely require us from rebuilding all assets and publishing a new version of them, otherwise they won\'t work in the new versions. This means the Asset Packs won\'t work in newer Unreal versions.\\n- Using Lumen has it\'s drawbacks, such as the performance, which can hit from 25% to 50% of the FPS (but can be toggled on/off).\\n\\n\\n#### Positive Points \ud83d\udc4d\\n\\n- We are going to be the first ones to explore Unreal Engine 5 (which can be bad because some problems no one figured out yet, but personally I love exploring new features and using new tools).\\n- nanos world will have a great self-marketing potential, and also can bring lots of new enthusiasts on UE5 to know, play and create with the game.\\n- Lumen is fun and beautiful.\\n- New World/Level tools which allows creating big maps and also improves a lot the co-creations pipelines using the **One File Per Actor** system and **World Partition**!\\n- New Unreal Editor which has a fresh and pleasing look.\\n- Lots of new tools and technology to use, including Nanite, Chaos Destruction, Animation tools (which can help us from dynamically linking your custom Animation Blueprint) and the new MetaSounds.\\n- It\'s really hard to convert nanos world from scratch every update to test it\'s stability, I can\'t reuse the previous conversion because many changes are in blueprints (UI) that I can\'t merge and lots had changed since then. So converting once and right now we can already start digging, fixing stuff and the next unreal updates will be easier and faster to test and maintain.\\n\\n\\nUnlike Early Access, this version seemed to have more positives than negatives points, and it seems like a better opportunity than before to officially migrate nanos world. Come to our [Discord](https://discord.nanos-world.com) to discuss this idea with us! We are going to make a poll to bring all feedback from the community!\\n\\n\\n## Community Spotlight\\n\\nHere we\'d like to share all amazing stuff our community is doing the last weeks!\\n\\n\\nTimmy is doing an amazing job, and is sharing it\'s new Inventory System:\\n\\n![](/img/blog/february/timmy-inventory.jpg)\\n\\nAlso Timmy created a nice smooth Weather system transition:\\n\\n<VideoExternal path=\\"/blog/february/timmy-weather-01.webm\\" />\\n<VideoExternal path=\\"/blog/february/timmy-weather-02.webm\\" />\\n\\n\\nMegaThorx released it\'s brand new [EGUI](https://store.nanos.world/packages/egui/) library. A Package for creating GUIs from scripting! It also contains it\'s own complete [documentation](https://nanos-world.github.io/egui-docs/)!\\n\\n![](/img/blog/february/megathorx-egui.jpg)\\n\\n\\nVoltaism shared a very cool implementation of Bots playing his game-mode VZombies by themselves with no Players:\\n\\n<VideoExternal path=\\"/blog/february/voltaism-bots.mp4\\" />"},{"id":"january-2022","metadata":{"permalink":"/pt-BR/blog/january-2022","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2022-02-09-january.md","title":"Jan: Store & Vault!","description":"Introducing Store, New Classes and all Retroactive Updates!","date":"2022-02-09T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":9.86,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"january-2022","title":"Jan: Store & Vault!","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Feb: UE5 & Network Authority!","permalink":"/pt-BR/blog/february-2022"},"nextItem":{"title":"Nov: Unreal Engine 5?","permalink":"/pt-BR/blog/november-2021"}},"content":"**Introducing Store, New Classes and all Retroactive Updates!**\\n\\n\x3c!--truncate--\x3e\\n\\n\\nThis blog will also summary up the highlights of everything that has been developed since the last blog in November! Detailed Changelog is available in our [Discord](https://discord.nanos-world.com)! Stay tuned!\\n\\n\\n## Introducing: Store & Vault!\\n\\n![](/img/blog/january/store-01.jpg)\\n\\nIt is with great joy that we finally announce the long-awaited **Store**! The Store is a marketplace where everyone will be able to upload their Assets, Packages, release new versions, create Teams and much more! 100% integrated with the Vault and the CLI!\\n\\n:::tip\\n\\nThe store development is being headed by **@MegaThorx**! This is the initial version and several updates will come! All feedback is appreciated!\\n\\n:::\\n\\n\\n### Features Highlights\\n\\n* Creation of **Asset Packs** & **Packages** pages, including images and description.\\n\\n![](/img/blog/january/store-03.jpg)\\n\\n* Upload of new **Versions**, with ability to tag as Draft, Beta and Stable.\\n\\n![](/img/blog/january/store-02.jpg)\\n\\n* Create a **Team** and add Team members.\\n\\n![](/img/blog/january/store-05.jpg)\\n\\n* **Tag & Category** system.\\n\\n![](/img/blog/january/store-04.jpg)\\n\\n:::tip\\n\\nCheck out the complete documentation [here](/docs/next/vault-and-store/store).\\n\\n:::\\n\\n**nanos world Store available now on https://store.nanos-world.com/**\\n\\n\\n### Server Token\\n\\nWith the addition of the Store, we\'ve got a new feature: **Server Token**.\\n\\nThis token is required when downloading any content from the Store using the CLI (and soon\u2122 when using other integration features), you must set it in your [Config.toml](/docs/next/core-concepts/server-manual/server-configuration#server-configuration-file) file as `token` setting.\\n\\nTo generate a token please refer to https://store.nanos-world.com/settings/tokens/.\\n\\n\\n## New Class: [Canvas](/docs/next/scripting-reference/classes/canvas)\\n\\n![](/img/blog/january/canvas.jpg)\\n\\nWe\'ve added a new class to completely replace our old **Render** Static Class: **Canvas**! Canvas is like a painting frame, you can draw anything onto it, from Lines, Squares to Materials and Textures!\\n\\nYou can also use it as UI or paint any object with a Canvas using `:SetMaterialFromCanvas()`!\\n\\nNow it\'s way easier to create a basic UI!\\n\\n```lua\\n-- Spawns a Canvas\\nlocal canvas = Canvas(true, Color.TRANSPARENT, 0, true)\\n\\n-- Subscribes for Update, we can only Draw inside this event\\ncanvas:Subscribe(\\"Update\\", function(self, width, height)\\n  -- Draws a Text in the middle of the screen\\n  self:DrawText(\\"Hello World!\\", Vector2D(width / 2, height / 2))\\n\\n  -- Draws a red line Horizontally\\n  self:DrawLine(Vector2D(0, height / 2), Vector2D(width, height / 2), 10, Color.RED)\\nend)\\n```\\n\\nThe [Basic HUD (Canvas) Tutorial](/docs/next/getting-started/tutorials-and-examples/basic-hud-canvas) has been updated as well!\\n\\n\\n## Steam Input + Controller\\n\\n![](/img/blog/january/controller.jpg)\\n\\nWe\'ve managed to integrate Steam Input. If you are not familiar with that, Steam Input allows you to set up and play with any Controller, and also configure it through Steam Interface.\\n\\nIt is a nice integration because it\'s a relatively simple implementation that allows nanos world to be played with controllers, and it gives users the possibility to customize bindings and share with the community.\\n\\nAn initial version has been released in the latest update, more bindings and configurations will come next.\\n\\n\\n## New built-in Key Glyphs\\n\\n![](/img/blog/january/glyphs.jpg)\\n\\nWe\'ve added a utility method to retrieve a Glyph/Image from a given Key. Just use `Input.GetKeyIcon(key_name)` and it will return the path of the image which can be used as Texture or as an usual image `<img>` in the HTML!\\n\\nYou can use it combined with `Input.GetMappedKey()` to dynamically get the Key Glyph based on the user\'s key binding configuration.\\n\\n\\n## Bullet Trails Improvement\\n\\n<VideoExternal path=\\"/blog/january/bullet-trail.webm\\" />\\n\\nWe have reworked our default Bullet Trail particles. Before, depending on the point of view you could see a big sphere passing through and also several glitches in the sky. Now it was reworked to be more realistic and without any artifact!\\n\\n\\n## New Map Configurations\\n\\nNow it is possible to create individual Configuration files for each Map, in which you can define all compatible game-modes, spawn locations and add custom data as well!\\n\\nAlso, it is possible to set up a complete Package which will automatically load when this map is loaded.\\n\\n```toml title=\\"Map.toml\\"\\n# map configurations\\n[map]\\n    # compatible game-modes\\n    compatible_game_modes = [\\n        \\"sandbox\\",\\n        \\"deathmatch\\"\\n    ]\\n\\n    # list of spawn points\\n    spawn_points = [\\n        { location = \\"Vector(100, 200, 100)\\", rotation = \\"Rotator(0, 90, 0)\\" },\\n        { location = \\"Vector(200, 300, 100)\\", rotation = \\"Rotator(0, 90, 0)\\" },\\n    ]\\n\\n[custom_data]\\n    whatever = \\"anything\\"\\n\\n```\\n\\nCheck the complete documentation at [Map Script & Data](/docs/next/assets-modding/creating-assets/maps-and-levels/importing-maps).\\n\\n\\n:::tip\\n\\nThe following changes were added back in **1.1.0-1.3.0** update, we gonna highlight the best ones here!\\n\\n:::\\n\\n## Interactive CLI\\n\\n![](/img/blog/january/interactive-cli.jpg)\\n\\nAn amazing and extremely useful functionality that has been added to the CLI is the creation of Asset Packs & Packages interactively.\\n\\nUse `add [package|assets] NAME` and it will create the Asset Pack or Package interactively, it will create the Configuration and Default files as well!\\n\\n\\n## Actor Tags\\n\\nAt the request of our testers, we implemented a interface to access Unreal\'s Actor Tags, with `Actor.SetActorTag()` and `Actor.GetActorTag()` you can set/get unreal Actor Tags directly from Scripting (client side).\\n\\nActor Tags are just an array of strings which can be accessed from anywhere, including from Unreal Blueprint. This small addition increases the range of possibilities for integration with blueprints and external implementations.\\n\\n\\n## New Class: [SceneCapture](/docs/next/scripting-reference/classes/scene-capture)\\n\\nThis is a very cool feature released back in **1.1.0** update.\\n\\n**SceneCapture** is a Camera Actor which captures the environment in real time, and we can get the outputted result with `:SetMaterialFromSceneCapture()` into any other Actor!\\n\\n<VideoExternal path=\\"/blog/january/scene-capture.webm\\" />\\n\\nIt has several configurable performance tweaks which makes it more efficient if you are not looking at the actors and also reduces the capture rate if you are too far!\\n\\n\\n## Assets Caching\\n\\nWe\'ve implemented a great feature which improves the performance and reduce stuttering when (re)loading Assets in runtime. Stuttering usually happen when using HDD and when loading something from Disk. Now every loaded asset (including files from disk - **.ogg** and **.jpg**) is cached and reused when loading again automatically. We still intend to add some options to auto load all assets from all loaded Asset Packs when entering a server and also a scriptable option to async load an Asset prior the use to further improve the stuttering and add more freedom to the scripters.\\n\\n\\n## Light Profiles\\n\\n![](/img/blog/january/light-profile.jpg)\\n\\nWe\'ve added a new cool setting for Lights: **Light Profile**, which allows changing the Light Profile Texture of a Light with [Light:SetTextureLightProfile()](/docs/next/scripting-reference/classes/light#settexturelightprofile).\\n\\nIt is possible to set to one of our built-in [Light Profiles](/docs/next/scripting-reference/glossary/enums#lightprofile). All built-in Light Profiles were imported from [IES Light Profile Pack](https://www.unrealengine.com/marketplace/en-US/product/ies-light-profile-pack).\\n\\nThis can add a realistic Flashlight effect to your Lights for example.\\n\\n\\n## Vehicle Improvements\\n\\nNow it is possible to manually control if the Vehicle Engine is started or not, also if it auto starts when a driver gets in with `Vehicle:SetAutoStartEngine()`.\\n\\nAlso we added a small detail: **Taillights**, it gets Red when braking and White when going backwards, it is customizable with `Vehicle:SetTaillightsSetup()`:\\n\\n<VideoExternal path=\\"/blog/january/vehicle-taillight.webm\\" />\\n\\n:::note\\n\\nThe Vehicle Mesh colors are still not in sync with the Headlights neither the Taillights, this will be improved in the next updates!\\n\\n:::\\n\\n\\n## Parachute Customization\\n\\n![](/img/blog/january/parachute.jpg)\\n\\nWe\'ve added an useful customization to the built-in parachute, now it\'s possible to change it\'s texture with `Character:SetParachuteTexture(texture)`. Also, all built-in Textures can be found at `nanos-world/NanosWorld/Content/NanosWorld/Textures/Parachute/` and used like `assets://nanos-world/Textures/Parachute`.\\n\\n\\n## Community Spotlight\\n\\nOur community has been working hard on several amazing stuff, we would like to share it with you!\\n\\n### T-Drones\\n\\n*by Timmy*\\n\\nTimmy worked on very cool fully functional Drone package, check it out! Fully integrated with the new SceneCapture for a \\"3D Camera System\\". Also the Drone has a function to back to home! Amazing!\\n\\n> T-Drones is a script designed to emulate the behavior of hobby drones, and thought to run on the vast majority of game-modes.\\n> \\n> It has been conceived to be as modular as possible and to adapt to the needs of anyone who wants to make modifications or additions easily.\\n\\n<iframe width=\\"620\\" height=\\"347\\" src=\\"https://www.youtube-nocookie.com/embed/TEzEKiGgDo0?vq=hd1080\\" title=\\"YouTube video player\\" frameBorder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n\\n### KOTOR RP\\n\\n*by ERO Team (NegativeName, Mougel, False & Tark)*\\n\\nThe ERO Team is working hard on a blasting Star Wars RP game-mode (KOTOR RP), this gonna be dope! Here\'s some screenshots of the worlds and the Combo system of the Light Saber!\\n\\n> Star Wars KOTOR RP is a french role-play game-mode in the Star Wars universe.\\n> \\n> You will play a character in this distant galaxy. Your role will depend on you. Will you join the Sith Empire to enslave the galaxy, protect it by joining the Galactic Republic, or take no side.\\n> \\n> The choice is yours! Become a Jedi, a Sith, a soldier, a mercenary, or a simple merchant.\\n\\n\\n![](/img/blog/january/star-wars-01.jpg)\\n\\n![](/img/blog/january/star-wars-02.jpg)\\n\\n![](/img/blog/january/star-wars-03.jpg)\\n\\n\\n### T-Bomber\\n\\n*by Timmy*\\n\\nAlso Timmy is creating a Bomberman game-mode! Excellent work, I can\'t wait to play it!\\n\\n> T-Bomber is a Bomberman-like game-mode Heavily inspired by the famous maze game.\\n> \\n> It aims to replicate the original Bomberman experience with some extra spice, and to show off some of the scripting possibilities of nanos world.\\n> \\n> The rules are very simple, the last one alive wins!\\n\\n\\n<VideoExternal path=\\"/blog/january/timmy-bomberman-01.webm\\" />\\n\\n<VideoExternal path=\\"/blog/january/timmy-bomberman-03.webm\\" />\\n\\n<VideoExternal path=\\"/blog/january/timmy-bomberman-02.webm\\" />\\n\\n\\n### VZombies\\n\\n*by Voltaism*\\n\\nVoltaism is working on his Zombies game-mode based on COD\'s one. It\'s incredibly fun and horrifying!\\n\\n> Nearly finished game-mode that is basically a clone of the classic Call Of Duty: Zombies mode where you have to survive against zombies the longer as you can!\\n> \\n> This game-mode also has bots that can play with you.\\n\\n![](/img/blog/january/vzombies-01.jpg)\\n\\n![](/img/blog/january/vzombies-02.jpg)\\n\\n\\n### nanos BattleField 2043\\n\\n*by LighterChu, Trevor & MemeFrug*\\n\\n> Battlefield 2042 came out, we expected the best. Why did we make nanos battlefield 2043, well it is not just Battlefield 2042 it\'s all battlefields mixed in the future of combine titles are here.\\n\\n<VideoExternal path=\\"/blog/january/battlefield-01.webm\\" />\\n\\n![](/img/blog/january/battlefield-01.jpg)\\n\\n\\n## Conclusion\\n\\nThank you again for your feedback and support, every suggestion and bug found makes the nanos world wheel spin faster and faster!\\n\\n:::note\\n\\nThis blog contained several highlights of our progress in the last month. Note that countless improvements, bug fixes and some other new features are available in the changelog on our [Discord](https://discord.nanos-world.com) and also in-game.\\n\\n:::\\n\\nWe are aware of your biggest requests and we want to implement them as soon as possible to make the nanos world API more and more complete. We still have a long roadmap to go through, and we have big pillars of goals to bring new types of vehicles (including air and sea), customizable characters (any skeleton), direct Blueprint support and more!\\n\\nRight away we desire to rework our Steam Store Page, it was left behind due to some technical issues and we want to revive it, with that we desire to do a rebranding of the nanos world, we know that logos and great capsule images that relate to the game theme are of great importance for Steam self-marketing to attract new players!\\n\\nSee you in the next! Thank you!"},{"id":"november-2021","metadata":{"permalink":"/pt-BR/blog/november-2021","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2021-12-01-unreal-engine-5.md","title":"Nov: Unreal Engine 5?","description":"New Classes, Unreal Engine 5 Experiments and Scripting Improvements!","date":"2021-12-01T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":6.97,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"november-2021","title":"Nov: Unreal Engine 5?","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Jan: Store & Vault!","permalink":"/pt-BR/blog/january-2022"},"nextItem":{"title":"Oct: Alpha released!","permalink":"/pt-BR/blog/alpha-released"}},"content":"New Classes, Unreal Engine 5 Experiments and Scripting Improvements!\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## New Class: [Decal](/docs/scripting-reference/classes/decal)\\n\\n![](/img/blog/november/decal.jpg)\\n\\nWe\'ve added a new class to spawning **Decals**! Decals are Materials that are projected onto meshes in your level, including Static Meshes and Skeletal Meshes. You can load any `.jpg` from disk during runtime and use it as parameter in your Decal Material!\\n\\nAs Decals are inherited from Actors, you can change it\'s location, rotation, attach it or call any method from [Base Actor](/docs/scripting-reference/classes/base-classes/actor) on it!\\n\\n\\n## New Class: [Billboard](/docs/scripting-reference/classes/billboard)\\n\\n![](/img/blog/november/billboard.jpg)\\n\\nWe\'ve added another new class to spawning **Billboards**! A Billboard is a 2D Material that will be rendered always facing the camera. It\'s possible to use all custom methods from Paintable as well and spawning custom textures on it. You can tweak it\'s material properties with [Base Paintable](/docs/scripting-reference/classes/base-classes/paintable) or even use a material of your own.\\n\\nAs Billboards are inherited from Actors, you can change it\'s location, rotation, attach it or call any method from [Base Actor](/docs/scripting-reference/classes/base-classes/actor) on it!\\n\\n\\n## New Class: [Melee](/docs/scripting-reference/classes/melee)\\n\\n![](/img/blog/november/melee.jpg)\\n\\nWe are getting a brand new very-requested class: **Melee**! The Melee is coming to replace the former **Item** class.\\n\\n**Melee** is a new Class (which works exactly as the old **Item**) but now with ability to attack with it. It is possible to add custom animations, a cooldown and tweak the damage of it. The attack physics is procedurally based on the animation, this means you can stab, slash or even smash things only by changing the animation and then the hit will be based on that!\\n\\nThe results are quite fun, the hit/damage also affects the environment dynamically \ud83d\ude0a\\n\\n<VideoExternal path=\\"/blog/november/melee.webm\\" />\\n\\n\\n## Scripting Improvements\\n\\nWe\'ve listen to your demand and we\'re finally bringing long-awaited new amazing scripting features!\\n\\n### Real Hot Reload\\n\\n![](/img/blog/november/hotreload.jpg)\\n\\nAfter several requests, we\'ve started implementing a real Hot Reload feature!\\n\\nThe real **Hot Reloading** is an amazing feature which allows you loading new scripting code without needing to lose all the current memory state of your Packages. It works by loading the scripting files over the current running Lua VM.\\n\\nCurrently it works by manually triggering it in the console:\\n\\n```shell\\npackage hotreload [PACKAGE_NAME|all]\\n```\\n\\nThis will update the clients with the newer files version and load the `Index.lua` files from the packages. It will keep the current memory state of the packages as it is. It will also unsubscribe from all registered Events in that package.\\n\\nIn the future, it would be possible to add a real-time checker to automatically update the modified files after saving them.\\n\\n\\n### Extending Classes\\n\\n![](/img/blog/november/extending.jpg)\\n\\nA new cool feature that is being added is Extending and Inheriting nanos world Classes. *This is still experimental and we want to collect your feedback and find remaining bugs.*\\n\\nIt is now possible to **Add new Methods** to nanos world Classes, **Override existing Methods** and even **Override __index and __newindex**.\\n\\nAdding a new method to a class is easy like this:\\n\\n```lua\\n-- Adding a new method \'AddScore\' to Player class\\nfunction Player:AddScore(score)\\n    self:SetValue(\\"score\\", self:GetValue(\\"score\\", 0) + score)\\nend\\n\\n-- Using it\\nmy_player:AddScore(10)\\n```\\n\\nRead the full documentation [here](/docs/core-concepts/scripting/extending-classes).\\n\\n\\n## New View Mode: TopDown\\n\\nWe created a new native View Mode: **TopDown**!\\n\\nThis ViewMode allows you to fully control Characters from a TopDown perspective.\\n\\nWith just a single line:\\n\\n```lua\\nmy_character:SetViewMode(ViewMode.TopDown)\\n```\\n\\nnanos world becomes a completely different game, the mouse is now a crosshair which the Character aims to. Mechanics of picking up Weapons, grabbing Props and interacting with stuff was slightly modified to work with the ViewMode. Also driving is fully supported as well! \ud83e\udd29\\n\\nIt also is possible to dynamically change the view mode and switch between them during game-play and also tweak settings such as camera distance and so on.\\n\\n<VideoExternal path=\\"/blog/november/top-down.webm\\" />\\n\\n\\n## New Camera Methods\\n\\nPlayer got a bunch of new Camera methods: `Player:SetCameraSocketOffset()`, `Player:SetCameraArmLength()`.\\n\\nAnd also ability to detach and attach it to other actors (\ud83d\udc40 including Props): `Player:AttachCameraTo()` and `Player:ResetCamera()`. It will attach including a Camera SpringArm component!\\n\\nNote: **Spectate** methods from **Client** has been moved to **Player**: `Player:Spectate()`.\\n\\n\\n## [TextRender](/docs/scripting-reference/classes/text-render) on Server Side\\n\\nNow the Class `TextRender` now can be spawned on Server Side as well!\\n\\n\\n## Other Changes\\n\\nBesides the major topics covered here, we\'ve got several other new features which were been added during the month:\\n\\n- Added a new method for Character: `Character:Follow()` which will make the AI follow other actor.\\n- Added a new Utils method: `NanosUtils.Benchmark()` which will take a function as parameter and test the performance of it.\\n- Now `Subscribe` will return the callback function (which can be used to Unsubscribe afterwards).\\n- Fixed tons of bugs, detailed information can be found in the Discord Changelog channel.\\n\\n\\n## Unreal Engine 5\\n\\n![](/img/blog/november/ue5.jpg)\\n\\nLastly, it is already known we have a big objective of porting nanos world to Unreal Engine 5. Personally this is something I wanted to do as soon as possible because Unreal Engine 5 features are amazing, not to mention the publicity and marketing bonuses we would get for nanos world.\\n\\nIn this month, we decided to give a try: we tested porting nanos world to Unreal 5, at first we had some problems because of some Unreal modules have been completely renamed or even removed. And also we got some Unreal methods deprecated by the newer version, so we needed to update them and even reimplement some small stuff.\\n\\nCurrently Unreal Engine 4 uses PhysX physics and in Unreal 5 all the Physics Engine have been replaced by [Unreal\'s Chaos](https://docs.unrealengine.com/5.0/en-US/PhysicsFeatures/ChaosVSPhysxOverview/), which is a new Engine replacing the NVIDIA\'s PhysX.\\n\\nThis made us need to disable Vehicles for this test, as Unreal vehicles are very dependent on the PhysX engine and I would need to reimplement them using the new Chaos API for vehicles (I believe that our Vehicles API will need to change a bit as well once we fully update it).\\n\\nBut after half of dozen adaptions and disabled Vehicles, the results were surprisingly good! nanos world worked on Unreal Engine 5! Personally I got very happy and proud that the biggest problems I had was updating deprecate methods and updating some Unreal modules, thanks to the architecture developed so far in nanos world!\\n\\n\\n### Graphical Results\\n\\nnanos world on Unreal Engine 5 is beautiful, joying with Lumen and Global Illumination is really fun!\\n\\nThere were some graphical artifacts (such as changing the time of day too fast causing a delay/ghosting effect), but I believe they will improve them for the final Unreal Engine 5 version.\\n\\nCheck it out some screenshots taken during the tests trying the Global Illumination and Lumen:\\n\\n![](/img/blog/november/ue5-outside.jpg)\\n\\n![](/img/blog/november/ue5-inside-gas-01.jpg)\\n\\n![](/img/blog/november/ue5-inside-gas-02.jpg)\\n\\n![](/img/blog/november/ue5-inside-flash-01.jpg)\\n\\n![](/img/blog/november/ue5-inside-flash-02.jpg)\\n\\n![](/img/blog/november/ue5-inside-flash-03.jpg)\\n\\n\\n### Stability\\n\\nUnfortunately the stability was extremely bad. It didn\'t surprise me too much as Unreal Engine 5 is on Early Access, so bugs and crashes would happen. Several random crashes occurred during gameplay, I could notice mostly of them were caused by the new Chaos Engine (related to Physics).\\n\\n\\n### What now?\\n\\nI was really happy in being able to port nanos world to Unreal Engine 5, this attempt made us be sure that this would be possible. But I decided that currently is not time yet. During the tests we had several crashes (random ones, related to the low-level of Unreal, mainly coming from Chaos Engine and from Water) that made us conclude that is better to wait a better stable version because it makes nanos world really unplayable. Those random crashes are extremely bad as sometimes it\'s hard to know if it\'s my or Unreal\'s fault.\\n\\nFortunately, with this we could prove ourselves that nanos world will, when the time comes, be compatible and updated to Unreal Engine 5!"},{"id":"alpha-released","metadata":{"permalink":"/pt-BR/blog/alpha-released","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2021-11-03-alpha-released.md","title":"Oct: Alpha released!","description":"We proudly present...","date":"2021-11-03T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":13.11,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"alpha-released","title":"Oct: Alpha released!","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Nov: Unreal Engine 5?","permalink":"/pt-BR/blog/november-2021"},"nextItem":{"title":"Bonus Blog: Weapons Improvements!","permalink":"/pt-BR/blog/weapons-improvements"}},"content":"![](/img/blog/alpha/alpha-release.jpg)\\n\\nWe proudly present...\\n\\n...The big long list of Alpha updates!\\n\\n\x3c!--truncate--\x3e\\n\\n\\n\\n## Initial Thoughts\\n\\nThank you everyone for all the support this last month! Our community has grown a lot and it\'s lovely to see how nice and friendly it is becoming \ud83e\udd70!\\n\\nThe Playtest session in the Sunday was amazing! We were able to test the stability of the game very well. I can say that most of the crashes we had were related to external integration issues (WebUI or Unreal itself), which shows a great maturity of our Core system. I think about doing it more often, it was a lot of fun playing Halloween mode and testing the community game-modes!\\n\\nFrom now on, all updates will start to be versioned (finally!), small updates/non break-changes will get a PATCH version and break-changing will get a MINOR version.\\n\\n\\n:::note\\n\\nThe following changelog contains all features since last officially announced release 0.73.0. Many of the next items were already in the bleeding-edge branch.\\n\\n:::\\n\\n<iframe className=\\"steam-widget\\" src=\\"https://store.steampowered.com/widget/1841660/\\" frameBorder=\\"0\\" width=\\"620\\" height=\\"190\\" loading=\\"lazy\\"></iframe>\\n\\n\\n## Materials\\n\\n![](/img/blog/alpha/material.jpg)\\n\\nNow nanos world supports Materials Assets! \ud83c\udfa8\\n\\nThis means you can configure your own materials in your Assets.toml and reference them using [Paintable](/docs/scripting-reference/classes/base-classes/paintable) methods!\\n\\nThe function `:SetDefaultMaterial()` has been replaced with `:SetMaterial()`. You can see a list of all built-in Materials read to use [here](/docs/next/assets-modding/default-asset-pack/default-materials).\\n\\nAlso it is now possible to get the WebUI material and set it to any surface (read more below)!\\n\\nSome existing methods are suffering a rework due that, e.g. [Pickables](/docs/scripting-reference/classes/base-classes/pickable) got a new method `:SetCrosshairMaterial()`, so you can set the Crosshair from a Material (and not from a predefined list anymore), also all old Crosshair have been converted into materials which you can find [here](/docs/scripting-reference/classes/base-classes/pickable#list-of-crosshairs-materials-included-in-default-asset-pack).\\n\\n\\n## Improved WebUI\\n\\n![](/img/blog/alpha/webui.jpg)\\n\\nThe [WebUI](/docs/scripting-reference/classes/web-ui) received several improvements, including the ability to run HTML5 Audio and Videos! \ud83d\udcfd\\n\\n:::caution\\n\\nWe are using a Beta version of Ultralight, which supports Audio and Video, crashes **WILL** happen, also the Audio is currently 2D only. Ultralight is working on a solution so I can implement 3D audio.\\n\\n:::\\n\\nThe **WebUI** constructor received some new parameters: **is_transparent**, **auto_resize**, **width** and **height**. Width and Height will only be used if Auto Resize is **OFF**, this is useful if you want to spawn a WebUI to use as Material to any surface (and don\'t want it to be the size of the screen).\\n\\nAlso it received new methods: [:SetFreeze()](/docs/scripting-reference/classes/web-ui#setfreeze), [:Resize()](/docs/scripting-reference/classes/web-ui#resize) and [:SetAutoResize()](/docs/scripting-reference/classes/web-ui#setautoresize).\\n\\nA new Searcher has been added onto it, improving how it can load your .html files, they are now looked in the following order:\\n1. Relative to `current-file-path/`\\n2. Relative to `current-package/Client/`\\n3. Relative to `current-package/`\\n4. Relative to `Packages/`\\n\\nIt is now possible to spawn a Material from a WebUI, which renders dynamic and automatically into **any** surface: `:SetMaterialFromWebUI()` (method from Actors).\\n\\n\\n## Actors\\n\\nNew additions for [Actors](/docs/scripting-reference/classes/base-classes/actor):\\n\\n* Added new method for all actors: [:SetLifeSpan(time)](/docs/scripting-reference/classes/base-classes/actor#setlifespan) which will automatically destroy this actor after `time` seconds.\\n* Added new method for all actors: [:IsBeingDestroyed()](/docs/scripting-reference/classes/base-classes/actor#isbeingdestroyed) which will return if this actor is being destroyed (useful to check from inside other Events such as `Drop` or `Ungrab`).\\n* Added new parameter for all actors [:AttachTo()](/docs/scripting-reference/classes/base-classes/actor#attachto) method: `lifespan_when_detached`, which will destroy the actor after `time` seconds after it\'s detached.\\n* Now event [TakeDamage](/docs/scripting-reference/classes/base-classes/actor#takedamage) has a new argument: `causer` (the object/actor which caused the damage). Also added new damage types: `RunOverVehicle` and `RunOverProp`.\\n* Now event [Hit](/docs/scripting-reference/classes/base-classes/actor#hit) has new arguments: `impact_force`, `normal_impulse`, `impact_location` and `velocity`.\\n* Now [:SetLocation()](/docs/scripting-reference/classes/base-classes/actor#setlocation) will try to find the better spot to teleport the Actor (to avoid collisions).\\n\\n\\n## Character\\n\\n![](/img/blog/alpha/character.jpg)\\n\\nNew additions for [Characters](/docs/scripting-reference/classes/character):\\n\\n**Character Methods additions/improvements:**\\n* Added several new Getters from it\'s properties.\\n* Added [:SetDamageMultiplier()](/docs/scripting-reference/classes/character#setdamagemultiplier) change the damage multiplier depending on the bone damaged.\\n* Added [:SetHiddenBone()](/docs/scripting-reference/classes/character#sethiddenbone) to make invisible any part of the body.\\n* Added [:SetJumpZVelocity()](/docs/scripting-reference/classes/character#setjumpzvelocity) to make the character jump higher.\\n* Improved [:PlayAnimation()](/docs/scripting-reference/classes/character#playanimation) got new parameters (blend times, loop and play rate), and now it supports loading any type of animation (Montage or Sequence).\\n* Removed `:SetInitialLocation()`, it has been replaced with [:Respawn()](/docs/scripting-reference/classes/character#respawn).\\n\\n**Character Events additions/improvements:**\\n* Added [AttemptEnterVehicle](/docs/scripting-reference/classes/character#attemptentervehicle) called when Character tries to enter a vehicle, returns false to prevent it.\\n* Added [AttemptLeaveVehicle](/docs/scripting-reference/classes/character#attemptleavevehicle) called when Character tries to leave a vehicle, returns false to prevent it.\\n* Added [AttemptReload](/docs/scripting-reference/classes/character#attemptreload) called when Character tries to reload it\'s weapon, returns false to prevent it.\\n* Added [Interact](/docs/scripting-reference/classes/character#interact) called when Characters tries to Pick Up a Pickable or Grab a Prop.\\n* Added [Highlight](/docs/scripting-reference/classes/character#highlight) called when Characters looks at a Prop or Pickable being able to pick up it.\\n\\nSome Characters animations have been renamed from `AM_` to `A_` in the Default Asset Pack (as they are not Montages anymore). Also lots of new Animations have been added.\\n\\n\\n## Weapons\\n\\n![](/img/blog/alpha/weapon.jpg)\\n\\nNew additions for [Weapons](/docs/scripting-reference/classes/weapon):\\n\\n**Weapon Methods additions/improvements:**\\n* Added several new Getters from it\'s properties.\\n* Added [:SetRecoil()](/docs/scripting-reference/classes/weapon#setrecoil) how much the weapon recoils physically.\\n* Added [:SetWallbangSettings()](/docs/scripting-reference/classes/weapon#setwallbangsettings) configure if bullets wallbangs walls.\\n* Added [:SetAnimationFire()](/docs/scripting-reference/classes/weapon#setanimationfire) animation on Weapon Skeletal when firing.\\n* Added [:SetSoundFireLastBullets()](/docs/scripting-reference/classes/weapon#setsoundfirelastbullets) sound when `N` last bullets are remaining in the clip.\\n* Improved [:SetAnimationReload()](/docs/scripting-reference/classes/weapon#setanimationreload) now has `play_rate` parameter.\\n\\n**Additional stuff:**\\n* Now weapons are hidden when Characters are driving.\\n* Added sounds of Shell Dropping & hitting the ground for the built-in Shell particles (this is a procedural and 100% precise sound \ud83d\ude09).\\n* Added sounds when picking up or dropping weapons, also it will slightly throw the weapon to the front when dropping it.\\n\\n\\n## Grenades\\n\\n![](/img/blog/alpha/grenade.jpg)\\n\\nAll Properties from [Grenades](/docs/scripting-reference/classes/grenade) have been deprecated, now access must be done through Methods.\\n\\nWe\'ve added a special Particle for Grenades `nanos-world::P_Grenade_Special` which will explode different particles depending on the ground the grenade is. I.e. will explode a \\"grass explosion\\" particle if grenade is over a grass surface, and a \\"water explosion\\" particle if it\'s under water. **Note:** This particle only works for Grenades.\\n\\n\\n## Sounds\\n\\n![](/img/blog/alpha/sound.jpg)\\n\\nNew additions for [Sounds](/docs/scripting-reference/classes/sound):\\n\\nNow it is possible to load `.ogg` sounds at runtime! You can store them in any Package or Asset Pack and load it using our new pattern for `SpecialPath` (`assets://asset-pack-name/path.ogg` or `package://package-name/path.ogg`).\\n\\nAdded `loop_mode` parameter to constructor (can loop any sound forever now).\\n\\nAlso, it is possible to pass `.ogg` using the SpecialPath in any Sound parameter.\\n\\n**Sound Methods additions/improvements:**\\n* Added [:GetDuration()](/docs/scripting-reference/classes/sound#getduration).\\n* Improved [:FadeIn()](/docs/scripting-reference/classes/sound#fadein) and [:FadeOut()](/docs/scripting-reference/classes/sound#fadeout) parameters.\\n\\n\\n## Input\\n\\n![](/img/blog/alpha/input.jpg)\\n\\nAdded a new class: [Input](/docs/scripting-reference/static-classes/input)!\\n\\nNow you can control, create and customize KeyBindings in a proper way! Example:\\n\\n```lua\\n-- Registers the binding_name \'SpawnMenu\' with default key \'Q\'\\n-- This will add \'SpawnMenu\' to user KeyBinding Settings automatically\\nInput.Register(\\"SpawnMenu\\", \\"Q\\")\\n\\n-- Subscribes for Pressing the key\\nInput.Bind(\\"SpawnMenu\\", InputEvent.Pressed, function()\\n    -- Opens the Spawn Menu\\nend)\\n\\n-- Subscribes for Releasing the key\\nInput.Bind(\\"SpawnMenu\\", InputEvent.Released, function()\\n    -- Closes the Spawn Menu\\nend)\\n```\\n\\n\\n## HTTP\\n\\n![](/img/blog/alpha/http.jpg)\\n\\nAdded a new class: [HTTP](/docs/scripting-reference/static-classes/http)!\\n\\nNow we have a proper standalone class for making HTTP requests. Is also features Async HTTP requests (and thread safe!)\\n\\n\\n## Performance Optimization\\n\\n![](/img/blog/alpha/performance.jpg)\\n\\nWe have worked hard on performance techniques for Alpha update. Here\'s the highlights:\\n\\n* Now Basic Structs [Vector](/docs/scripting-reference/structs/vector) and [Rotator](/docs/scripting-reference/structs/rotator) are automatically compressed when sending through the Network. Reducing it\'s size up to 90% in the best case! This was a great gain for network use.\\n* A new setting was added `Profiling` which you can enable with `--profiling` on server and in Settings on Client. This will log all the time elapsed to run operations/scripting events and some other stuff in the Console.\\n* Now HTTP requests (a.k.a. downloading files when joining a server) are automatically compressed, which may reduce the network usage when downloading big files!\\n* Now Actors which are very far or not on screen will be synchronized/updated half the time to improve performance. We still want to tweak it and make it more aggressive on some cases.\\n* The Assets Loading system have been reworked and is much faster now.\\n* Small [Props](/docs/scripting-reference/classes/prop) (radius < 200) will not collide with players or dynamic objects anymore. Also Bigger props will have CCD disabled by default (which drastically improved performance), this can be enabled in the Prop constructor.\\n* Now VOIP uses Steam system, which provides a great compression and also custom settings through Shift+Tab menu.\\n* Several improvements were made on our low-level Lua code to boost scripting performance.\\n\\n\\n## Server\\n\\nNew additions to [Server](/docs/scripting-reference/static-classes/server) static class:\\n\\n* Added new console command: `map [MAP_NAME]` to change the game map, this will also reload all packages and reconnect all players (like restarting the server).\\n* Added new methods [Server.GetVersion()](/docs/scripting-reference/static-classes/server#getversion), [Server.GetIP()](/docs/scripting-reference/static-classes/server#getip), [Server.GetPort()](/docs/scripting-reference/static-classes/server#getport), [Server.GetQueryPort()](/docs/scripting-reference/static-classes/server#getqueryport) and several missing getters.\\n\\n\\n## Client\\n\\nNew additions to [Client](/docs/scripting-reference/static-classes/client) static class:\\n\\n* New parameters have been added to [Client.SetCameraLocation()](/docs/scripting-reference/static-classes/client#setcameralocation) and [Client.SetCameraRotation()](/docs/scripting-reference/static-classes/client#setcamerarotation) to enable smooth movements with camera in a certain time.\\n* New methods for drawing debug shapes in 3D world: [Client.DrawDebug...()](/docs/scripting-reference/static-classes/client#drawdebug).\\n* Changed [Client.SetHighlight()](/docs/scripting-reference/static-classes/client#sethighlight) parameters, now it takes a Enum to define how the highlight will be.\\n* Added new method [Client.SetSteamRichPresence()](/docs/scripting-reference/static-classes/client#setsteamrichpresence) to customize the message in Steam Friends list.\\n\\nNow when joining a server, a Progress Bar will be displayed in the Taskbar, and also it will Flash once the loading is done:\\n\\n![](/img/blog/alpha/progress-taskbar.jpg)\\n\\n\\n## In-game Console\\n\\nNow it is possible to access Server Console from within the game!\\n\\nIf you open it, 2 tabs will appear: **client** and **server**. You can read all server logs, and also input commands.\\n\\n:::note\\n\\nNot all logs will appear in there, only the ones outputted while you are connected to the server.\\n\\n:::\\n\\n![](/img/blog/alpha/console.jpg)\\n\\n\\n## Timer\\n\\nNew additions to [Timer](/docs/scripting-reference/static-classes/timer):\\n\\n* Added new method: [Timer.Bind(timer_id, actor)](/docs/scripting-reference/static-classes/timer#bind) - this will associate a timer to an actor, when the actor is destroyed, this timer is destroyed too and will never be called.\\n* Added new method: [Timer.IsValid(timer_id)](/docs/scripting-reference/static-classes/timer#isvalid).\\n\\n\\n## CLI\\n\\n* Now it is possible to download multiple Assets/Packages at once with [CLI](/docs/core-concepts/server-manual/command-line-interface), just separate them by spaces, e.g.: `cli assets install quaternius city-park`.\\n\\n\\n## Steam Achievements\\n\\n![](/img/blog/alpha/achievements.jpg)\\n\\nWith Steam integration, we are making use of every feature possible it allows \ud83d\ude05!\\n\\nAnd this includes the **Achievements**! We are counting on the support of a talented friend [Esther](https://www.instagram.com/estherhoffmann/) who is drawing the amazing arts for them!\\n\\nLittle by little we will be creating more achievements and releasing them! We also count on your ideas for more!\\n\\n\\n## Scripting Improvements\\n\\n* Added new Searchers to [Package.Require()](/docs/scripting-reference/static-classes/package#require), we now currently support 5 searchers, which are looked in the following order:\\n    1. Relative to `current-file-path/`\\n    2. Relative to `current-package/Client/` or `current-package/Server/` *(depending on your side)*\\n    3. Relative to `current-package/Shared/`\\n    4. Relative to `current-package/`\\n    5. Relative to `Packages/`\\n\\n* [Package.Require()](/docs/scripting-reference/static-classes/package#require) now can be called in runtime and at any moment.\\n* [Package.RequirePackage()](/docs/scripting-reference/static-classes/package#requirepackage) now will load a package as a library inside the current package, it means the package loaded will now be automatically sent to clients, and all paths it loads is relative to the package itself (and not to the one which is requiring it anymore).\\n* Verbose logs will now display the current thread ID.\\n\\n\\n## Renamed Default Packages\\n\\nThe default Packages `NanosWorldWeapons` and `NanosWorldVehicles` were renamed to `nanos-world-weapons` and `nanos-world-vehicles`, following the new correct pattern for Packages and Assets names. Including them now should be made like `Package.RequirePackage(\\"nanos-world-weapons\\")`, the usage keeps the same (`NanosWorldWeapons.AK47()`).\\n\\n\\n## General Changes\\n\\n* [Cable](/docs/scripting-reference/classes/cable) got new methods: `:GetAttachedStartTo()` and `:GetAttachedEndTo()` to get if it\'s attached at any end.\\n* [Player](/docs/scripting-reference/classes/player) got new methods: `:SetVOIPVolume()`, `:GetSteamID()`,\\n* [Pickables](/docs/scripting-reference/classes/base-classes/pickable) got new events: `ReleaseUse`, `PullUse` when Character pulls or releases its usage (i.e. trigger for weapons)\\n* Improved the way the interact trigger enables for [Pickables](/docs/scripting-reference/classes/base-classes/pickable) and [Props](/docs/scripting-reference/classes/prop).\\n* [Trigger](/docs/scripting-reference/classes/trigger) got new method: `:ForceOverlapChecking()` which will checks for overlaps in the game thread and immediately dispatch events.\\n* Added new methods for [Quaternions](/docs/scripting-reference/structs/quat) (+, -, Normalize).\\n* Added new method for generating a random [Rotator](/docs/scripting-reference/structs/rotator): `Rotator.Random()`.\\n* Added lots of new Sounds, Animations, Props, Meshes in the Default Asset Pack.\\n* Added Steam Login.\\n* All .config files had it\'s `tabs` replaced with `spaces`.\\n* `.GetPairs()` now only supports `pairs`.\\n* Added Resolutions graphic settings.\\n* Make Day button from In-game menu has been removed.\\n* Added new Splash Effects when Props or objects enter the Water.\\n* `:GetValue()` now has an additional parameter: `fallback` which will be returned if the value doesn\'t exist.\\n* Probably many other things that were being added and were forgotten \ud83d\ude1c.\\n\\n\\n## Bug Fixes\\n\\n* Fixed `World.SetFogDensity()` not working.\\n* Fixed `Client.SetCameraLocation` not working.\\n* Fixed `Actors.RotateTo()` not doing properly math.\\n* Fixed `StaticMesh.GetBounds()` not working.\\n* Fixed Cables methods being able to be called on client side.\\n* Fixed several **Character** properties not syncing.\\n* Fixed a crash when changing Map at runtime.\\n* Fixed Characters not reseting the life to `max_health` when Respawning.\\n* Fixed dead ragdolls still moving around (from `MoveTo()`).\\n* Fixed infinite recursion with `LogEntry` event.\\n* Fixed **Characters** Morph Targets not syncing.\\n* Fixed Discord custom integration not working sometimes.\\n* Fixed a crash when a player had no Steam Profile image.\\n* Fixed Server Announce checkbox being disabled when unchecked on New Game screen.\\n* Fixed a crash when destroying entities from inside `Interact` event.\\n* Fixed hell lot of other Crashes \ud83d\udca5. Thanks for the Crash Reports!"},{"id":"weapons-improvements","metadata":{"permalink":"/pt-BR/blog/weapons-improvements","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2021-10-06-weapons-improvements.md","title":"Bonus Blog: Weapons Improvements!","description":"One of our main focus for nanos world is having fun, and we believe that the small details are the big support for the experience to be complete. In the past weeks, we\'ve been working on improving and adding small features to common actions such as firing, picking up objects and even how you perceive them happening. Here\'s the highlights!","date":"2021-10-06T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":2.15,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"weapons-improvements","title":"Bonus Blog: Weapons Improvements!","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Oct: Alpha released!","permalink":"/pt-BR/blog/alpha-released"},"nextItem":{"title":"Setembro: Melhorias de Sandbox!","permalink":"/pt-BR/blog/melhorias-de-sandbox"}},"content":"One of our main focus for nanos world is having fun, and we believe that the small details are the big support for the experience to be complete. In the past weeks, we\'ve been working on improving and adding small features to common actions such as firing, picking up objects and even how you perceive them happening. Here\'s the highlights!\\n\\n\x3c!--truncate--\x3e\\n\\n\\n\\n## New Weapon Animations\\n\\nSince the beginning, our weapons were stiff when shooting giving an impression of rigidity and lack of fluidity. With the simple improvement of adding firing animations to that, look how it looks better:\\n\\n<VideoExternal path=\\"/blog/weapons-improvements/m1911.webm\\" />\\n\\n<VideoExternal path=\\"/blog/weapons-improvements/makarov.webm\\" />\\n\\n\\n## New effects for Bullet Shells\\n\\nBesides new animations, we added a subtle detail: **Bullet Shells Drop SFX**. And not that simple! The sound is precisely played in the location and moment the shells hit the ground or any surface, listen:\\n\\n<VideoExternal path=\\"/blog/weapons-improvements/bullet-shell-drop.webm\\" />\\n\\nCheck out a complete before and after comparison of some of the weapons, you can notice all the improvements in detail!\\n\\n<iframe width=\\"620\\" height=\\"347\\" src=\\"https://www.youtube-nocookie.com/embed/ln4AUntcyLM\\" title=\\"YouTube video player\\" frameBorder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n<br />\\n<br />\\n\\nNote that nanos world weapons animations and aiming are completely generated procedurally, that means when you are in First Person, the weapon sight location is calculated dynamically to be positioned right in the middle of your eyes, in a true first person mode.\\n\\n\\n## SFX when Picking Up objects\\n\\nA subtle sound detail added when you grab and drop a Weapon, and also now the object is slightly thrown to forward:\\n\\n<VideoExternal path=\\"/blog/weapons-improvements/picking-up.webm\\" />\\n\\n\\n## Scopes\\n\\nIs is really easy to add attachable objects in any Weapon, for example attaching a AWP Scope, we use the `SM_Scope_25x56` mesh for that:\\n\\n```lua\\n-- Spawns a AWP Weapon\\nlocal weapon = Weapon(location or Vector(), rotation or Rotator(), \\"nanos-world::SK_AWP\\")\\n\\n-- Attaches a Scope mesh, with configured offset to be perfectly aligned\\nweapon:AddStaticMeshAttached(\\"sight\\", \\"nanos-world::SM_Scope_25x56\\", \\"\\", Vector(20, 0, 11))\\n\\n-- Adjusts Sight Location to put the Sniper at exact location where the scope center will be when ADS\\nweapon:SetSightTransform(Vector(-15, 0, -4.6), Rotator(0, 0, 0))\\n```\\n\\n<VideoExternal path=\\"/blog/weapons-improvements/sniper-scope.webm\\" />\\n\\nThis is completely procedural, it also uses the 3D Mesh scope materials!\\n\\n\\n:::tip\\n\\nYou can also check the [Official Weapons Package](https://github.com/nanos-world/nanos-world-weapons), and see how a RedDot has been added to a P90!\\n\\n:::\\n\\nThat\'s it! Thank you all!"},{"id":"melhorias-de-sandbox","metadata":{"permalink":"/pt-BR/blog/melhorias-de-sandbox","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2021-10-01-sandbox-improvements.md","title":"Setembro: Melhorias de Sandbox!","description":"V\xe1rias melhorias no modo Sandbox foram implementadas no \xfaltimo m\xeas, aqui v\xe3o os destaques!","date":"2021-10-01T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":3.35,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"melhorias-de-sandbox","title":"Setembro: Melhorias de Sandbox!","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Bonus Blog: Weapons Improvements!","permalink":"/pt-BR/blog/weapons-improvements"},"nextItem":{"title":"Aug: Coming to Alpha!","permalink":"/pt-BR/blog/alpha"}},"content":"V\xe1rias melhorias no modo Sandbox foram implementadas no \xfaltimo m\xeas, aqui v\xe3o os destaques!\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Interface e & experi\xeancia de usu\xe1rio do menu de invoca\xe7\xe3o retrabalhadas\\n\\nN\xf3s pensamos muito sobre como fazer a experi\xeancia do modo Sandbox ainda melhor. E com isso fizemos algumas melhorias, incluindo a adi\xe7\xe3o de categorias na barra lateral, novas abas e at\xe9 mesmo novas coisas para invocar! Sem mencionar a corre\xe7\xe3o de alguns problemas e a melhoria geral de usabilidades! Sem mais bloqueios de movimento quando abrir o menu de invoca\xe7\xe3o!\\n\\n<VideoExternal path=\\"/blog/sandbox-improvements/new-sandbox-ui.webm\\" />\\n\\n\\n## Novos Props \ud83d\udce6\\n\\nEstamos importando um grande pacote de props que vir\xe3o com o jogo base.\\n\\nEstivemos debatendo muito sobre qual o limite entre lan\xe7ar o jogo alguns props ou lan\xe7\xe1-lo sem props e permitir ao jogador a baixar o que eles quiserem do Vault. \xc9 uma decis\xe3o dif\xedcil, mas por enquanto decidimos entregar um pacote b\xe1sico com algumas coisas legais, incluindo as novas ** Props de Constru\xe7\xe3o**, **Frutas**, **Ferramentas** e at\xe9 novas **Armas**!\\n\\n![](/img/blog/sandbox-improvements/new-props.jpg)\\n\\n\\n## NPCs \ud83e\udd16\\n\\nJ\xe1 foi implementado h\xe1 algum tempo, mas gostar\xedamos de destacar! O menu de invoca\xe7\xe3o agora possui uma aba que permite que jogadores invoquem NPCs.\\n\\nEsses NPCs possuem funcionalidades b\xe1sicas definidas em Lua, eles caminham de forma aleat\xf3ria e at\xe9 fogem quando est\xe3o sob amea\xe7a! Insano!\\n\\n<VideoExternal path=\\"/blog/sandbox-improvements/npcs.webm\\" />\\n\\n## Novas Armas \ud83d\udd2b\\n\\nIsso n\xe3o est\xe1 estritamente relacionado ao modo Sandbox, mas al\xe9m dos novos Props, n\xf3s estamos adicionando Armas novas e configuradas no `nanos-world-weapons` pacote b\xe1sico!\\n\\nEntre elas est\xe3o a P90, a UMP-45, a pistola M1911 e muitas outras!\\n\\n<VideoExternal path=\\"/blog/sandbox-improvements/new-weapons.webm\\" />\\n\\n\\n## Padr\xf5es de Armas \ud83c\udfa8\\n\\nAl\xe9m das categorias no lado esquerdo, estamos come\xe7ando a adicionar a nova sess\xe3o como nossa \\"se\xe7\xe3o de op\xe7\xf5es\\", iniciando por adicionar a nova op\xe7\xe3o na aba de Armas: **Padr\xf5es**.\\n\\n![](/img/blog/sandbox-improvements/weapon-pattern.jpg)\\n\\n![](/img/blog/sandbox-improvements/weapon-pattern-floor.jpg)\\n\\n![](/img/blog/sandbox-improvements/weapon-pattern-infernoo.jpg)\\n\\nVoc\xea pode mudar e selecionar qualquer padr\xe3o entre as centenas inclusas no jogo para ser aplicado na sua arma (ela \xe9 sincronizada com outros jogadores tamb\xe9m)! \xc9 bem f\xe1cil de adicionar o seu pr\xf3prio `.jpg` como padr\xe3o no menu!\\n\\n<VideoExternal path=\\"/blog/sandbox-improvements/weapons-pattern.webm\\" />\\n\\n\\n## Props destru\xedveis\ud83c\udf49\\n\\nEssa \xe9 uma funcionalidade incr\xedvel que eu estive trabalhando nas \xfaltimas semanas, \xe9 algo 100% feito pelo script, e eu ainda n\xe3o tenho certeza se isso \xe9 algo que deve ser implementado.\\n\\n<VideoExternal path=\\"/blog/sandbox-improvements/breakable-watermelon.webm\\" />\\n\\nMas agora, no modo Sandbox, \xe9 poss\xedvel configurar os Props para serem destru\xeddos quando atingidos ou quando receberem dano! Tamb\xe9m \xe9 poss\xedvel configurar facilmente quais os detritos que ser\xe3o gerados, sua aleatoriedade e muito mais. Veja no exemplo:\\n\\n```lua\\nSetBreakableProp(\\"nanos-world::SM_Fruit_Watermelon_01\\", 700, {\\n    { mesh = \\"nanos-world::SM_Fruit_Watermelon_01_Half_01\\", rotation = Rotator() },\\n    { mesh = \\"nanos-world::SM_Fruit_Watermelon_01_Half_01\\", rotation = Rotator(180, 0, 0) },\\n    { mesh = \\"nanos-world::SM_Fruit_Watermelon_01_Crust_01\\" },\\n    { mesh = \\"nanos-world::SM_Fruit_Watermelon_01_Slice_01\\" },\\n    { mesh = \\"nanos-world::SM_Fruit_Watermelon_01_Slice_01\\" },\\n})\\n```\\n\\nE voila, toda vez que uma melancia for selecionada pelo menu de invoca\xe7\xe3o, ela ser\xe1 quebr\xe1vel!\\n\\n\\n## Props Explosivos \ud83d\udca5\\n\\nComo uma sub-categoria dos Props Destru\xedveis, n\xf3s podemos adicionar alguns para Explodir! Que n\xe3o s\xf3 s\xe3o destru\xeddos quando recebem dano ou s\xe3o atingidos, mas tamb\xe9m EXPLODEM! Causando dano, e at\xe9 iniciando uma cadeia de explos\xf5es!\\n\\n<VideoExternal path=\\"/blog/sandbox-improvements/chain-explosions.webm\\" />\\n\\n<VideoExternal path=\\"/blog/sandbox-improvements/gas-house-explosion.webm\\" />\\n\\n<VideoExternal path=\\"/blog/sandbox-improvements/gas-explosion-danger.webm\\" />\\n\\nComo voc\xea pode ver, pode ser perigoso brincar com fogo! \ud83d\ude05\\n\\n\\n## Pr\xf3ximas novidades! \ud83d\udca1\\n\\nNo momento, estamos trabalhando para preparar tudo para o lan\xe7amento oficial da vers\xe3o Alpha 1.0.0! Estamos come\xe7ando a distribuir chaves Beta para alguns testers, assim poderemos corrigir alguns \xfaltimos problemas calmamente e dar os toques finais antes do lan\xe7amento completo!\\n\\nTamb\xe9m implementamos MUITO conte\xfado novo para mods & scripting que ainda ser\xe1 anunciado nas pr\xf3ximas semanas! Isso vai acabar gerando uma lista de mudan\xe7as ENORME ent\xe3o provavelmente eu irei destacar todas as funcionalidades em not\xedcias separadas no Blog!\\n\\nIsso \xe9 tudo por essa postagem! Muito obrigado por todo o seu apoio! \ud83e\udd70\\n\\n<VideoExternal path=\\"/blog/sandbox-improvements/watch-teaser.webm\\" />"},{"id":"alpha","metadata":{"permalink":"/pt-BR/blog/alpha","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2021-09-01-alpha.md","title":"Aug: Coming to Alpha!","description":"Muito tempo se passou desde que come\xe7amos a desenvolver o Nanos World. No final de 2017, come\xe7amos a cavar sobre essa ideia ambiciosa, sonh\xe1vamos em criar uma experi\xeancia de jogo sandbox de mundo aberto sem as limita\xe7\xf5es de jogos de engenharia reversa como Just Cause 3 ou Grand Theft Auto. Ent\xe3o decidimos criar um jogo do zero, mas s\xf3 em meados de 2019 come\xe7amos a trabalhar muito, foi uma ideia muito entusiasmada, mas depois de muito sangue, amor e suor estamos chegando l\xe1! \ud83e\udd70","date":"2021-09-01T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":2.99,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"alpha","title":"Aug: Coming to Alpha!","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Setembro: Melhorias de Sandbox!","permalink":"/pt-BR/blog/melhorias-de-sandbox"},"nextItem":{"title":"Nova Docs","permalink":"/pt-BR/blog/new-docs"}},"content":"![](/img/blog/alpha/alpha-banner.jpg)\\n\\nMuito tempo se passou desde que come\xe7amos a desenvolver o Nanos World. No final de 2017, come\xe7amos a cavar sobre essa ideia ambiciosa, sonh\xe1vamos em criar uma experi\xeancia de jogo sandbox de mundo aberto sem as limita\xe7\xf5es de jogos de engenharia reversa como Just Cause 3 ou Grand Theft Auto. Ent\xe3o decidimos criar um jogo do zero, mas s\xf3 em meados de 2019 come\xe7amos a trabalhar muito, foi uma ideia muito entusiasmada, mas depois de muito sangue, amor e suor estamos chegando l\xe1! \ud83e\udd70\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Alpha 1.0.0!\\n\\nAnd we\'re finally reaching the long-awaited Alpha announcement! Lots of things have happened, lots of iterations have been done (and lots will come \ud83d\ude1c) and thanks to all the support from our community and your feedback, we\'re getting closer and closer to releasing nanos world!\\n\\nThe official Alpha 1.0.0 update will come with tons of scripting and gaming news!\\n\\n## Steam!\\n\\n![](/img/blog/alpha/steam-guy.jpg)\\n\\nAlong with the Alpha announcement, we have LOTS of other surprises! As you may have noticed, now [nanos world is on STEAM](https://store.steampowered.com/app/1841660/nanos_world?utm_source=docs&utm_campaign=alpha_announcement)!!! Itch was very good and helped us a lot at the time, and we will always be grateful that their service and support has always been free! But then we made the decision to take this next step moving to the biggest game platform!\\n\\n:::tip\\n\\n\ud83c\udf8b Please don\'t forget to **WISHLIST** and share [nanos world steam page](https://store.steampowered.com/app/1841660/nanos_world?utm_source=docs&utm_campaign=alpha_announcement)!\\n\\n:::\\n\\n<iframe className=\\"steam-widget\\" src=\\"https://store.steampowered.com/widget/1841660/\\" frameBorder=\\"0\\" width=\\"620\\" height=\\"190\\" loading=\\"lazy\\"></iframe>\\n\\n## New Website!\\n\\n![](/img/blog/alpha/new-website.jpg)\\n\\nWe\'ve created a brand new website which contains a lot of information about nanos world which will help us marketing it! If you didn\'t yet, please take a look at [https://nanos-world.com](https://nanos-world.com)!\\n\\n## Lot of news to come!\\n\\nIn the meantime since the last update (0.73.0), we\'ve accumulated **A LOT** of new content for nanos world. Most couldn\'t be released as we were working alongside the Steam integration.\\n\\n### \ud83d\udd22 Versions\\n\\n![](/img/blog/alpha/betas.jpg)\\n\\nWith the arrival of Steam, there will be several changes to how we distribute updates! We will now have two branches `stable/latest` and `bleeding-edge`, we intend to keep the default branch as stable as possible, while working in upcoming content in the *bleeding-edge* branch.\\n\\nBy default all testers will have access to *bleeding-edge* to be able to help us testing the new features before releasing them officially! Also in the docs we are going to have two versions which represent each of the branch!\\n\\n:::info\\n\\nThe version **a1.0.0** is already present in *bleeding-edge* branch and will come to *stable* as soon as possible! Really soon we will start publishing the full changelog of that!\\n\\n:::\\n\\n### \ud83e\uddea Testers\\n\\n![](/img/blog/alpha/manny.jpg)\\n\\nWith this new stage we decided to start fresh and restart our Tester subscriptions. Please check out [Sign Up for Alpha Testing](/docs/signing-up-alpha) for more information on how to become a Tester.\\n\\nIf you already a Tester, please reach us in discord so you can get a Steam key. We will prioritize active members in the community!\\n\\n### \ud83d\udd2e Future plans\\n\\nWe\'ve also created a new [Roadmap](/docs/roadmap) page with all our plans and redirecting to our official Roadmap boards!\\n\\nIn the coming weeks we will gradually start distributing some Steam Keys and as soon we will release the first Steam update with a lot of new content!\\n\\nStay tuned! And thank you so much for all your support!"},{"id":"new-docs","metadata":{"permalink":"/pt-BR/blog/new-docs","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2021-08-27-new-docs.md","title":"Nova Docs","description":"H\xe1 algum tempo atr\xe1s, n\xf3s lan\xe7amos nossa nova vers\xe3o da docs, escrita em Markdown! Est\xe1vamos usando os servi\xe7os do Gitbook para criar e hospedar, tivemos um grande salto da antiga vers\xe3o, escrita com Sphinx.","date":"2021-08-27T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":1.69,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"new-docs","title":"Nova Docs","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Aug: Coming to Alpha!","permalink":"/pt-BR/blog/alpha"},"nextItem":{"title":"Atualiza\xe7\xe3o do Sandbox","permalink":"/pt-BR/blog/sandbox"}},"content":"![](/img/docs/new-docs.webp)\\n\\nH\xe1 algum tempo atr\xe1s, n\xf3s lan\xe7amos nossa nova vers\xe3o da docs, escrita em Markdown! Est\xe1vamos usando os servi\xe7os do Gitbook para criar e hospedar, tivemos um grande salto da antiga vers\xe3o, escrita com Sphinx.\\n\\n\x3c!--truncate--\x3e\\n\\n\\nDesde ent\xe3o estivemos explorando outras possibilidades do mercado para docs, testamos Readme, ReType e at\xe9 MdBook.\\n\\nE ent\xe3o finalmente encontramos Docusaurus! Uma docs open source que permite muita customiza\xe7\xe3o, e inclusive tem muitas funcionalidades inclu\xeddas que podemos usar! Este \xe9 o pr\xf3ximo passo para o sucesso!\\n\\nVeja todas as novas funcionalidades do post completo!\\n\\n\x3c!--truncate--\x3e\\n\\n![Docusaurus](https://d33wubrfki0l68.cloudfront.net/ea8e37a6a30e9c260a8936d95c579af4a2dd3df7/6ee7e/img/docusaurus_keytar.svg)\\n\\n## Novas Funcionalidades\\n\\n### Dark Mode!\\n\\nNossos olhos agradecem! Agora podemos trocar do Light para Dark no canto superior direito da tela!\\n\\n![](/img/blog/new-docs/dark-mode.jpg)\\n\\n### Melhor Busca\\n\\nO Docusaurus fornece v\xe1rios mecanismos de busca para usar, n\xf3s vamos iterar entre todos eles para encontrar o melhor!\\n\\n![](/img/blog/new-docs/search.jpg)\\n\\n### Versionamento\\n\\n![](/img/blog/new-docs/versions.jpg)\\n\\nAgora nossa documenta\xe7\xe3o pode ter vers\xf5es diferentes! Com anteced\xeancia em rela\xe7\xe3o a alguns planos que temos em mente, poderemos ter diferentes vers\xf5es para serem lidas!\\n\\n### Multi-idioma\\n\\nAgora suportamos v\xe1rias l\xednguas! A tradu\xe7\xe3o \xe9 fornecida pelo Crowdin, uma solu\xe7\xe3o baseada na nuvem que simplifica a localiza\xe7\xe3o! Todos podem colaborar em traduzir as p\xe1ginas e at\xe9 mesmo os posts do blog!\\n\\n![](/img/blog/new-docs/languages.jpg)\\n\\nPara isso, por favor, v\xe1 para [nanos world official Crowdin](https://crowdin.com/project/nanos-world-docs), crie uma conta e nos ajude a traduzir as p\xe1ginas! Neste momento, temos Portugu\xeas, Alem\xe3o e Franc\xeas, mas \xe9 poss\xedvel adicionar mais!\\n\\n![](/img/blog/new-docs/crowdin.jpg)\\n\\n### P\xe1gina de blog!\\n\\nVoc\xea j\xe1 deve estar lendo, mas agora podemos ter uma p\xe1gina blog integrada! Novidades sempre e toda hora!\\n\\n### 100% da personaliza\xe7\xe3o\\n\\nPodemos incorporar o poder do React no Markdown, permitindo modularizar e automatizar as cria\xe7\xf5es de p\xe1ginas! Menos esfor\xe7o para n\xf3s! Tamb\xe9m podemos criar nossos pr\xf3prios Componentes melhorando muito o UX!\\n\\n\\nFique atento porque nas pr\xf3ximas semanas vamos fazer GRANDES an\xfancios!\\n\\nAproveite e nos d\xea um feedback!"},{"id":"sandbox","metadata":{"permalink":"/pt-BR/blog/sandbox","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2021-06-18-sandbox.md","title":"Atualiza\xe7\xe3o do Sandbox","description":"","date":"2021-06-18T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":0.03,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"sandbox","title":"Atualiza\xe7\xe3o do Sandbox","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Nova Docs","permalink":"/pt-BR/blog/new-docs"},"nextItem":{"title":"Atualiza\xe7\xe3o da Vault","permalink":"/pt-BR/blog/vault"}},"content":"![](/img/blog/updates/sandbox.webp)\\n\\n\x3c!--truncate--\x3e"},{"id":"vault","metadata":{"permalink":"/pt-BR/blog/vault","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2021-04-03-vault-update.md","title":"Atualiza\xe7\xe3o da Vault","description":"","date":"2021-04-03T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":0.03,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"vault","title":"Atualiza\xe7\xe3o da Vault","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Atualiza\xe7\xe3o do Sandbox","permalink":"/pt-BR/blog/sandbox"},"nextItem":{"title":"Atualiza\xe7\xe3o da \xc1gua","permalink":"/pt-BR/blog/water"}},"content":"![](/img/blog/updates/vault.webp)\\n\\n\x3c!--truncate--\x3e"},{"id":"water","metadata":{"permalink":"/pt-BR/blog/water","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2021-01-11-water-update.md","title":"Atualiza\xe7\xe3o da \xc1gua","description":"","date":"2021-01-11T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":0.03,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"water","title":"Atualiza\xe7\xe3o da \xc1gua","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Atualiza\xe7\xe3o da Vault","permalink":"/pt-BR/blog/vault"},"nextItem":{"title":"Atualiza\xe7\xe3o dos Ve\xedculos","permalink":"/pt-BR/blog/vehicles"}},"content":"![](/img/blog/updates/water.webp)\\n\\n\x3c!--truncate--\x3e"},{"id":"vehicles","metadata":{"permalink":"/pt-BR/blog/vehicles","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2020-12-21-vehicles-update.md","title":"Atualiza\xe7\xe3o dos Ve\xedculos","description":"","date":"2020-12-21T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":0.03,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"vehicles","title":"Atualiza\xe7\xe3o dos Ve\xedculos","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Atualiza\xe7\xe3o da \xc1gua","permalink":"/pt-BR/blog/water"},"nextItem":{"title":"Halloween","permalink":"/pt-BR/blog/halloween"}},"content":"![](/img/blog/updates/transformers.webp)\\n\\n\x3c!--truncate--\x3e"},{"id":"halloween","metadata":{"permalink":"/pt-BR/blog/halloween","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2020-10-24-halloween.md","title":"Halloween","description":"","date":"2020-10-24T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":0.03,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"halloween","title":"Halloween","authors":"gtnardy","tags":["updates"]},"unlisted":false,"prevItem":{"title":"Atualiza\xe7\xe3o dos Ve\xedculos","permalink":"/pt-BR/blog/vehicles"}},"content":"![](/img/blog/updates/halloween.webp)\\n\\n\x3c!--truncate--\x3e"}]}}')}}]);