"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[67829],{20713:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/house-keeping-a0a0d38e5dc0c80913ced70a3fc8280b.webp"},24585:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/github-issues-2f4b92b9e20f1ee2ad9dc5f42a03e932.webp"},26428:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/character-falling-in-place-a45df2f6c477cc50a465baaa6442698d.webp"},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>r});var a=s(96540);const i={},t=a.createContext(i);function o(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(t.Provider,{value:n},e.children)}},33652:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/may-news-76b62d6201a4db0c016f7e7bf92cd746.webp"},41895:e=>{e.exports=JSON.parse('{"permalink":"/pt-BR/blog/may-2025","editUrl":"https://crowdin.com/project/nanos-world-docs/pt-BR","source":"@site/i18n/pt-BR/docusaurus-plugin-content-blog/2025-05-07-may.md","title":"May: Big House Keeping","description":"Big House Keeping! Tons of Fixes and Improvements!","date":"2025-05-07T00:00:00.000Z","tags":[{"inline":true,"label":"updates","permalink":"/pt-BR/blog/tags/updates"}],"readingTime":10.93,"hasTruncateMarker":true,"authors":[{"name":"Gabriel \u2022 SyedMuhammad","title":"lead developer\u2122","page":{"permalink":"/pt-BR/blog/authors/gtnardy"},"description":"nanos world Lead Developer.","socials":{"x":"https://x.com/gtnardy","github":"https://github.com/gtnardy"},"imageURL":"/pt-BR/img/blog/syed.webp","key":"gtnardy"}],"frontMatter":{"slug":"may-2025","title":"May: Big House Keeping","authors":"gtnardy","tags":["updates"],"image":"/img/blog/2023-may/may-news.webp"},"unlisted":false,"prevItem":{"title":"Jun: Ticks, Netcode & Traces!","permalink":"/pt-BR/blog/june-2025"},"nextItem":{"title":"Apr: Performance & Optimization!","permalink":"/pt-BR/blog/april-2025"}}')},79565:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var a=s(41895),i=s(74848),t=s(28453);const o={slug:"may-2025",title:"May: Big House Keeping",authors:"gtnardy",tags:["updates"],image:"/img/blog/2023-may/may-news.webp"},r=void 0,l={authorsImageUrls:[void 0]},d=[{value:"New Local Event Behavior",id:"new-local-event-behavior",level:2},{value:"Cables System Rework",id:"cables-system-rework",level:2},{value:"AI Improvements",id:"ai-improvements",level:2},{value:"MoveTo",id:"moveto",level:3},{value:"AI Vehicle Avoidance",id:"ai-vehicle-avoidance",level:3},{value:"Prop Grabbing",id:"prop-grabbing",level:2},{value:"Spectating is back!",id:"spectating-is-back",level:2},{value:"Water Related",id:"water-related",level:2},{value:"Swimming Movement",id:"swimming-movement",level:3},{value:"Way Better Pontoons",id:"way-better-pontoons",level:3},{value:"AI Swimming",id:"ai-swimming",level:3},{value:"Other Water Fixes &amp; Improvements",id:"other-water-fixes--improvements",level:4},{value:"File Transfer",id:"file-transfer",level:2},{value:"Package Load/Reload",id:"package-loadreload",level:2},{value:"Ragdoll Sync",id:"ragdoll-sync",level:2},{value:"Other Improvements",id:"other-improvements",level:2},{value:"Character Falling",id:"character-falling",level:3},{value:"Props Net. Autoridade",id:"props-net-autoridade",level:3},{value:"Weapon Cadence",id:"weapon-cadence",level:3},{value:"Logs Overridden",id:"logs-overridden",level:3},{value:"New Plugins Enabled",id:"new-plugins-enabled",level:3},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Enums:a,EventReference:o,KofiButton:r,MediaLegend:l,MethodReference:d,VideoExternal:h}=n;return a||p("Enums",!0),o||p("EventReference",!0),r||p("KofiButton",!0),l||p("MediaLegend",!0),d||p("MethodReference",!0),h||p("VideoExternal",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Big House Keeping! Tons of Fixes and Improvements!"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:s(33652).A+"",width:"800",height:"320"})}),"\n",(0,i.jsx)(n.p,{children:"Welcome to our roundup of the latest updates from the last month!"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:s(20713).A+"",width:"1252",height:"1900"})}),"\n",(0,i.jsx)(n.h2,{id:"new-local-event-behavior",children:"New Local Event Behavior"}),"\n",(0,i.jsxs)(n.p,{children:["We are introducing a new behavior for some events. Now actions that are triggered by the client (e.g. changing the View Mode) that execute some kind of event (e.g. ",(0,i.jsx)(o,{type:"Class",class_name:"Character",event:"ViewModeChange"}),") will have it's event being called immediately on the client which triggered it first."]}),"\n",(0,i.jsxs)(n.p,{children:["This means if you are possessing a character and press ",(0,i.jsx)(n.code,{children:"V"})," (to switch the ",(0,i.jsx)(a,{children:"ViewMode"}),"), or then press Shift (to run), you will have the corresponding events ",(0,i.jsx)(o,{type:"Class",class_name:"Character",event:"ViewModeChange"})," or ",(0,i.jsx)(o,{type:"Class",class_name:"Character",event:"StanceModeChange"})," called on the client immediately, before having it to be called on servers then synced with all players (including you)."]}),"\n",(0,i.jsx)(n.p,{children:"All events that already have this new behavior implemented are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(o,{type:"Class",class_name:"Character",event:"ViewModeChange",show_class_name:!0}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(o,{type:"Class",class_name:"Character",event:"StanceModeChange",show_class_name:!0}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(o,{type:"Class",class_name:"Character",event:"WeaponAimModeChange",show_class_name:!0}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(o,{type:"Class",class_name:"Character",event:"FallingModeChange",show_class_name:!0}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(o,{type:"Class",class_name:"Character",event:"GaitModeChange",show_class_name:!0}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(o,{type:"Class",class_name:"Character",event:"SwimmingModeChange",show_class_name:!0}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"More events will be added in the future."})}),"\n",(0,i.jsxs)(n.p,{children:["Related ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/779",children:"Issue#779"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"cables-system-rework",children:"Cables System Rework"}),"\n",(0,i.jsx)(h,{path:"/blog/2025-may/prop-physics.webm"}),"\n",(0,i.jsx)(l,{children:"New Cables Constraint in action with Props"}),"\n",(0,i.jsxs)(n.p,{children:['Cables in nanos world had been in a rough state for a while: the physics were odd and the infamous "',(0,i.jsx)(n.em,{children:"Virus Bug"}),"\" was becoming a pandemic, they didn't behave like real ropes, and the visual representation didn't match the actual constraints being applied."]}),"\n",(0,i.jsxs)(n.p,{children:["But now, after a deep refactor and a ton of under-the-hood improvements, We're proud to say: ",(0,i.jsx)(n.strong,{children:"cables are finally great again"}),"! They now behave exactly how you'd expect realistic cables or ropes to behave! \ud83c\udf89"]}),"\n",(0,i.jsx)(n.p,{children:"We've also introduced several other improvements around them. Some highlights:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Added support for a new parameter to ",(0,i.jsx)(d,{type:"Class",class_name:"Cable",method:"SetCableSettings",show_class_name:!0}),": ",(0,i.jsx)(n.code,{children:"enable_stiffness"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Improved error logging, now shows entity names and IDs to make debugging easier."}),"\n",(0,i.jsx)(n.li,{children:"Picking up Pickables will now automatically detach any attached cables, and trying to attach a cable to a non-simulating object will throw an error (since Unreal doesn't like that)."}),"\n",(0,i.jsx)(n.li,{children:"Resizing Vehicles or Weapons will not break the Cable Physics anymore."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Related ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/975",children:"Issue#975"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/992",children:"Issue#992"})," and ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/993",children:"Issue#993"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"ai-improvements",children:"AI Improvements"}),"\n",(0,i.jsx)(n.h3,{id:"moveto",children:"MoveTo"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(d,{type:"Class",class_name:"Pawn",method:"MoveTo",show_class_name:!0})," system was heavily improved to ensure more consistency and reliability, especially regarding event handling."]}),"\n",(0,i.jsxs)(n.p,{children:["Previously, we had issues where multiple ",(0,i.jsx)(o,{type:"Class",class_name:"Pawn",event:"MoveComplete",show_class_name:!0})," events was being fired for a single MoveTo call, along with desyncs and movement data not persisting properly across sessions."]}),"\n",(0,i.jsxs)(n.p,{children:["Now, every ",(0,i.jsx)(n.code,{children:"MoveTo"})," call is associated with a ",(0,i.jsx)(n.strong,{children:"unique ID"}),", which internally helps track whether a movement has already completed, preventing duplicate ",(0,i.jsx)(n.code,{children:"MoveComplete"})," calls."]}),"\n",(0,i.jsxs)(n.p,{children:["We've also fixed cases where ",(0,i.jsx)(n.code,{children:"MoveTo"})," wouldn't resume if a player reconnected during a movement."]}),"\n",(0,i.jsxs)(n.p,{children:["Also we've fixed ",(0,i.jsx)(n.code,{children:"MoveTo"})," values are now properly ",(0,i.jsx)(n.strong,{children:"synced"})," to the client, allowing you to access movement data via scripting on both server and client sides, and a bunch of Debug and Verbose logs were added to help debugging your AI implementation."]}),"\n",(0,i.jsxs)(n.p,{children:["Related ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/714",children:"Issue#714"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"ai-vehicle-avoidance",children:"AI Vehicle Avoidance"}),"\n",(0,i.jsx)(h,{path:"/blog/2025-may/ai-vehicle-reaction.webm"}),"\n",(0,i.jsx)(l,{children:"NPCs reacting and moving away from Vehicle"}),"\n",(0,i.jsx)(n.p,{children:"We've improved how AI Characters interact with vehicles!"}),"\n",(0,i.jsx)(n.p,{children:"Due to how our ragdoll system works, we have to disable collisions between vehicles and characters to prevent vehicles from abruptly stopping when hitting a character, this way when a vehicle overlaps the character, the ragdoll mode is activated and the vehicle only hits the ragdoll mesh during physics simulation."}),"\n",(0,i.jsx)(n.p,{children:"However, this sometimes caused characters to clip through vehicles."}),"\n",(0,i.jsx)(n.p,{children:"To mitigate this, we've implemented a new system that automatically pushes characters away when vehicles get too close. And if the vehicle is moving at high speed, ragdoll is triggered as expected, creating a much more natural and realistic reaction!"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Note that it is still possible to experience characters clipping through vehicles, but this has been greatly mitigated now."})}),"\n",(0,i.jsxs)(n.p,{children:["Related ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/672",children:"Issue#672"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"prop-grabbing",children:"Prop Grabbing"}),"\n",(0,i.jsx)(h,{path:"/blog/2025-may/prop-grabbing.webm"}),"\n",(0,i.jsx)(l,{children:"Smoother Soft Prop Grabbing Physics Simulation"}),"\n",(0,i.jsx)(n.p,{children:'We are doing some experimental changes on how Props are Grabbed, before we were using "hard constraints" which was moving the Props at all costs while a character was grabbing it, making the Grabbed Prop physics to go insane and flickery in some cases.'}),"\n",(0,i.jsx)(n.p,{children:'So we decided to change it to use "soft constraints" instead, which would make them physically more accurate while being grabbed, even making you able to loose it if you don\'t grab it properly or get too far.'}),"\n",(0,i.jsx)(n.p,{children:"We are testing this new way to see if it works good. We also did several improvements in the Grabbing max distance and location to make it more realistic."}),"\n",(0,i.jsxs)(n.p,{children:["Related ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/711",children:"Issue#711"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"spectating-is-back",children:"Spectating is back!"}),"\n",(0,i.jsxs)(n.p,{children:["Our Spectator Mode (",(0,i.jsx)(d,{type:"Class",class_name:"Player",method:"Spectate",show_class_name:!0}),") had been left on the sidelines for a while, and a few issues started popping in: like the camera attaching incorrectly (it was attaching to the feet while in third person), and in first person the weapon appeared stiff and unresponsive, with no crosshair or blood screen syncing."]}),"\n",(0,i.jsxs)(n.p,{children:["We've now fixed all of these problems and also implemented proper syncing for ",(0,i.jsx)(n.strong,{children:"Crosshairs"})," and ",(0,i.jsx)(n.strong,{children:"Blood Screen effects"})," while spectating!"]}),"\n",(0,i.jsx)(n.p,{children:"There's still more work to be done, but this is a initial first step toward getting Spectator Mode fully back on track!"}),"\n",(0,i.jsxs)(n.p,{children:["Related ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/978",children:"Issue#978"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"water-related",children:"Water Related"}),"\n",(0,i.jsx)(n.h3,{id:"swimming-movement",children:"Swimming Movement"}),"\n",(0,i.jsx)(h,{path:"/blog/2025-may/swimming.webm"}),"\n",(0,i.jsx)(l,{children:"Swimming Direction being affected by camera"}),"\n",(0,i.jsx)(n.p,{children:"We've added a small but cool improvement to the swimming mechanic: now your camera angle will influence the character's swimming direction, allowing you to swim upward or downward based on where you're looking (in addition to the existing mode)!"}),"\n",(0,i.jsx)(n.h3,{id:"way-better-pontoons",children:"Way Better Pontoons"}),"\n",(0,i.jsxs)(n.p,{children:["One major change was in the calculation of ",(0,i.jsx)(n.strong,{children:"pontoons"}),": these are the invisible spheres that simulate buoyancy and allow objects to float in water. We've improved how pontoons are generated and attached, resulting in much better floating behavior across various entities sizes and weights."]}),"\n",(0,i.jsxs)(n.p,{children:["Related ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/958",children:"Issue#958"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"ai-swimming",children:"AI Swimming"}),"\n",(0,i.jsx)(h,{path:"/blog/2025-may/npc-water.webm"}),"\n",(0,i.jsx)(l,{children:"NPCs swimming in the surface"}),"\n",(0,i.jsx)(n.p,{children:"Now NPCs will always swim toward the surface instead of diving endlessly to the bottom of the ocean as it was happening before."}),"\n",(0,i.jsxs)(n.p,{children:["Related ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/891",children:"Issue#891"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"other-water-fixes--improvements",children:"Other Water Fixes & Improvements"}),"\n",(0,i.jsx)(n.p,{children:"We also got some bugs fixed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Before grabbing Props under the water was making the Prop physics to go insane, we've fixed that and Prop will be grabbed more properly while under the water."}),"\n",(0,i.jsx)(n.li,{children:"We've fixed Grenades with no buoyancy at all, now will float properly."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"file-transfer",children:"File Transfer"}),"\n",(0,i.jsx)(n.p,{children:"Our file transfer system has gone through many improvements and overhauls over time, and we improved it further!"}),"\n",(0,i.jsx)(n.p,{children:"Now, after each file is downloaded, the client will validate its integrity to ensure it wasn't corrupted during transfer, helping to prevent inconsistencies. If any file fails to download, the log now will list which files failed or were still pending, helping debugging."}),"\n",(0,i.jsx)(n.p,{children:"We've also refactored a part of the server-side logic to try and eliminate a rare bug where file packets could be sent to the wrong player during gameplay, causing Fatal Errors logs."}),"\n",(0,i.jsxs)(n.p,{children:["Related ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/947",children:"Issue#947"})," and ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/946",children:"Issue#946"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"package-loadreload",children:"Package Load/Reload"}),"\n",(0,i.jsxs)(n.p,{children:["We've made significant improvements to the package reload system. Previously, in extreme cases where multiple ",(0,i.jsx)(n.code,{children:"package load/reload/unload"})," operations were triggered in quick succession, you might have seen console errors like ",(0,i.jsx)(n.code,{children:'"Package not found to HotUnload"'})," or even inconsistencies in how the packages were being loaded and unloaded."]}),"\n",(0,i.jsxs)(n.p,{children:["To fix this, we've implemented a ",(0,i.jsx)(n.strong,{children:"queueing system"})," that ensures all load/reload/unload requests are handled in order (and in a unique way - e.g. calling ",(0,i.jsx)(n.code,{children:"unload"})," after a ",(0,i.jsx)(n.code,{children:"load/reload"})," will remove the package from the load list)."]}),"\n",(0,i.jsx)(n.p,{children:"It prevents any package from being processed multiple times sequentially, especially while file transfers are still in progress. This has resolved several errors and issues that were occurring during runtime package reloads."}),"\n",(0,i.jsxs)(n.p,{children:['We also fixed a common client-side issue where a "default map" package couldn\'t be found when executing ',(0,i.jsx)(n.code,{children:"package reload all"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Related ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/968",children:"Issue#968"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"ragdoll-sync",children:"Ragdoll Sync"}),"\n",(0,i.jsx)(h,{path:"/blog/2025-may/ragdoll-sync.webm"}),"\n",(0,i.jsx)(l,{children:"Ragdoll location and rotation being networked"}),"\n",(0,i.jsx)(n.p,{children:"Since some recent Unreal updates, ragdoll syncing became too rigid and resulted in strange movement. So we tweaked it to make the synchronization smoother and more natural when networked to other players."}),"\n",(0,i.jsx)(n.p,{children:'Additionally, we\'ve improved the rotation syncing, significantly reducing those harsh "snap" rotations that could happen when a ragdoll was standing back up (from other players perspective).'}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Ragdoll syncing is always a technical challenge, syncing it to other players will never be as natural as when it happens locally, but we try to achieve the best networking synchronization as possible when dealing with ragdolls."})}),"\n",(0,i.jsx)(n.h2,{id:"other-improvements",children:"Other Improvements"}),"\n",(0,i.jsx)(n.h3,{id:"character-falling",children:"Character Falling"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:s(26428).A+"",width:"1145",height:"413"})}),"\n",(0,i.jsx)(l,{children:"Character Falling in Place"}),"\n",(0,i.jsxs)(n.p,{children:["The infamous issue where characters would randomly ",(0,i.jsx)(n.em,{children:"fall in place"})," has haunted us for years, and we finally found the culprit and fixed it!"]}),"\n",(0,i.jsxs)(n.p,{children:["Related ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/809",children:"Issue#809"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"props-net-autoridade",children:"Props Net. Autoridade"}),"\n",(0,i.jsx)(h,{path:"/blog/2025-may/explosion-net-auth.webm"}),"\n",(0,i.jsx)(l,{children:"Explosion affecting non Network Authority Props (marked as white)"}),"\n",(0,i.jsxs)(n.p,{children:["We've improved how ",(0,i.jsx)(n.strong,{children:"network authority"})," is handled for Props. Previously, if someone who wasn't the network authority shot or threw a grenade at a Prop, it wouldn't react at all, only the authority could affect it."]}),"\n",(0,i.jsxs)(n.p,{children:["Now, the system properly transfers ",(0,i.jsx)(n.strong,{children:"network authority"})," to the player causing the damage (like shooting or throwing a grenade), making Props fly away as expected when they are damaged."]}),"\n",(0,i.jsx)(n.h3,{id:"weapon-cadence",children:"Weapon Cadence"}),"\n",(0,i.jsx)(n.p,{children:"We've improved the weapon's cadence across different frame-rates, fixing inconsistent firing rates."}),"\n",(0,i.jsx)(n.p,{children:"We did this by compensating the cooldown between shots with the time spent in the last frame, which was not being taken into consideration before."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Note that in extreme low fps cases, the weapon will still be limited by the FPS. We always recommend setting the Weapon cadence value to a minimum of ",(0,i.jsx)(n.code,{children:"0.05"}),", this will make sure that even someone at 20 fps will be able to shoot properly."]})}),"\n",(0,i.jsxs)(n.p,{children:["Related ",(0,i.jsx)(n.a,{href:"https://github.com/nanos-world/issues/issues/730",children:"Issue#730"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"logs-overridden",children:"Logs Overridden"}),"\n",(0,i.jsxs)(n.p,{children:["We've fixed an issue where ",(0,i.jsx)(n.strong,{children:"asynchronous logs"})," were overriding other log entries in both the console and log files when logs were being written from separate async threads."]}),"\n",(0,i.jsxs)(n.p,{children:["Now, all logs are properly ",(0,i.jsx)(n.strong,{children:"synchronized"})," and appended in sequence, ensuring they are not overlapped."]}),"\n",(0,i.jsx)(n.h3,{id:"new-plugins-enabled",children:"New Plugins Enabled"}),"\n",(0,i.jsxs)(n.p,{children:["We enabled two new Plugins: ",(0,i.jsx)(n.code,{children:"CommonUI"})," and ",(0,i.jsx)(n.code,{children:"ModelViewViewModel"})," for UGC usage."]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"This month was all about fixing long standing issues, improving existing systems and doing some good old housekeeping."}),"\n",(0,i.jsxs)(n.p,{children:["Our ",(0,i.jsx)(n.a,{href:"https://issues.nanos-world.com/",children:"GitHub Issues"})," had been abandoned for quite some time, a lot of reports were collecting dust and had gone unresolved for way too long. So this month I decided to cleanup it: I went through most of every single issue, closing outdated ones and working on the ones that were still relevant."]}),"\n",(0,i.jsxs)(n.p,{children:["I'm proud to say I managed to get through over 40 issues this month! Most of the relevant ones got a proper fix, and a few were moved over to the ",(0,i.jsx)(n.a,{href:"http://feedback.nanos-world.com/",children:"Feedback Board"}),", since they were more about missing features than actual bugs. There are still more issues already in my plans to be worked soon, my goal is to reach zero open issues!"]}),"\n",(0,i.jsx)(n.p,{children:"And with this cleanup, we've officially passed the 1,000 closed issues milestone (with most of those properly fixed)! \ud83c\udf89 And we are not even counting the many bugs reported casually on Discord."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:s(24585).A+"",width:"1255",height:"64"})}),"\n",(0,i.jsx)(l,{children:"GitHub Issues count reached 1000 closed issues"}),"\n",(0,i.jsx)(n.p,{children:"There's still a lot I want to improve. Some technical parts of the game aren't yet at the level of quality I desire, and we're undergoing many internal structural and organizational changes that will keep improving nanos world even further!"}),"\n",(0,i.jsxs)(n.p,{children:["Ah, if you find any bugs, please post them on our ",(0,i.jsx)(n.a,{href:"https://issues.nanos-world.com/",children:"GitHub Issues"}),", and if you have suggestions for improvements or new scripting features you'd love to see, drop them on our ",(0,i.jsx)(n.a,{href:"https://feedback.nanos-world.com/",children:"Feedback Board"}),"!"]}),"\n",(0,i.jsx)(n.p,{children:"Thank you so much for the whole support! There's plenty more being worked on behind the scenes that we haven't announced just yet. So stay tuned, because more exciting stuff is coming!"}),"\n",(0,i.jsx)(r,{})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);