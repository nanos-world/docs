"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[4432],{28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var i=s(96540);const t={},r=i.createContext(t);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(r.Provider,{value:n},e.children)}},37419:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"core-concepts/scripting/events-guide","title":"Events Guide","description":"All you need to know about Events","source":"@site/docs/core-concepts/scripting/events-guide.md","sourceDirName":"core-concepts/scripting","slug":"/core-concepts/scripting/events-guide","permalink":"/docs/next/core-concepts/scripting/events-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/nanos-world/docs/edit/master/docs/core-concepts/scripting/events-guide.md","tags":[{"inline":true,"label":"scripting","permalink":"/docs/next/tags/scripting"}],"version":"current","lastUpdatedBy":"Gabriel Tanasovici Nardy","lastUpdatedAt":1751026970000,"sidebarPosition":1,"frontMatter":{"title":"Events Guide","description":"All you need to know about Events","sidebar_position":1,"tags":["scripting"]},"sidebar":"main","previous":{"title":"Classes Guide","permalink":"/docs/next/core-concepts/scripting/classes-guide"},"next":{"title":"Authority Concepts","permalink":"/docs/next/core-concepts/scripting/authority-concepts"}}');var t=s(74848),r=s(28453);const c={title:"Events Guide",description:"All you need to know about Events",sidebar_position:1,tags:["scripting"]},a=void 0,l={},o=[{value:"Classes Events",id:"classes-events",level:2},{value:"Subscribing for Class Events",id:"subscribing-for-class-events",level:3},{value:"Unsubscribing of Class Events",id:"unsubscribing-of-class-events",level:3},{value:"Unsubscribing from all Events",id:"unsubscribing-from-all-events",level:4},{value:"Unsubscribing from a specific Event Callback",id:"unsubscribing-from-a-specific-event-callback",level:4},{value:"Entity Events",id:"entity-events",level:2},{value:"Subscribing for Entity Events",id:"subscribing-for-entity-events",level:3},{value:"Unsubscribing of Entity Events",id:"unsubscribing-of-entity-events",level:3},{value:"Unsubscribing from all Entity Events",id:"unsubscribing-from-all-entity-events",level:4},{value:"Unsubscribing from a specific Entity Event Callback",id:"unsubscribing-from-a-specific-entity-event-callback",level:4},{value:"Custom Events",id:"custom-events",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components},{MethodReference:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("MethodReference",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"All you need to know about Events."}),"\n",(0,t.jsx)(n.h2,{id:"classes-events",children:"Classes Events"}),"\n",(0,t.jsxs)(n.p,{children:["In nanos world, all actions performed by Players or Entities can be obtained through ",(0,t.jsx)(n.strong,{children:"events"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The most basic event to bring an example is the ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"Spawn"})}),". Every time an entity is spawned, the event ",(0,t.jsx)(n.code,{children:"Spawn"})," will be triggered."]}),"\n",(0,t.jsx)(n.h3,{id:"subscribing-for-class-events",children:"Subscribing for Class Events"}),"\n",(0,t.jsxs)(n.p,{children:["Registering for events is very easy and straightforward using the method ",(0,t.jsx)(s,{type:"Class",class_name:"Entity",method:"Subscribe",is_base:!0}),", let's say we want to know when a Player has joined the server:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",metastring:"showLineNumbers",children:'Player.Subscribe("Spawn", function(player)\n    Console.Log(player:GetName() .. " has joined!")\nend)\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Most events are triggered on both Client and Server sides, only a few rare exceptions which will be elicited by the ",(0,t.jsx)(n.a,{href:"/docs/next/core-concepts/scripting/authority-concepts#methods-and-events-availability",children:"Availability"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"unsubscribing-of-class-events",children:"Unsubscribing of Class Events"}),"\n",(0,t.jsx)(n.p,{children:"Currently there is two ways of unsubscribing from events:"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," Unsubscribing events will ",(0,t.jsx)(n.strong,{children:"always"})," only unregister from events which were registered in the Package you are."]})}),"\n",(0,t.jsx)(n.h4,{id:"unsubscribing-from-all-events",children:"Unsubscribing from all Events"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",metastring:"showLineNumbers",children:'-- This will unregister from all "Spawn" events of Player registered in this Package\nPlayer.Unsubscribe("Spawn")\n'})}),"\n",(0,t.jsx)(n.h4,{id:"unsubscribing-from-a-specific-event-callback",children:"Unsubscribing from a specific Event Callback"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Declares the Callback beforehand\nfunction OnSpawnPlayer(player)\n    Console.Log(player:GetName() .. " has joined!")\nend\n\n-- Subscribes the event, passing the Callback\nPlayer.Subscribe("Spawn", OnSpawnPlayer)\n\n-- Subscribes for the same event, twice\nPlayer.Subscribe("Spawn", function(player)\n    Console.Log(player:GetName() .. " has joined again!")\nend)\n\n-- Unsubscribes only from the first Callback\nPlayer.Unsubscribe("Spawn", OnSpawnPlayer)\n\n-- This will keep triggering "player has joined again" but will not trigger\n-- "player has joined" anymore\n'})}),"\n",(0,t.jsx)(n.h2,{id:"entity-events",children:"Entity Events"}),"\n",(0,t.jsx)(n.p,{children:"In nanos world it is possible to register for events on specific Entities as well, this way the callback will only be triggered if that specific entity is the event reason."}),"\n",(0,t.jsx)(n.h3,{id:"subscribing-for-entity-events",children:"Subscribing for Entity Events"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",metastring:"showLineNumbers",children:'-- Spawns a Character\nlocal my_character = Character()\n\nmy_character:Subscribe("EnterVehicle", function(self, vehicle)\n    -- my_character entered vehicle\nend)\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Note that once the entity is destroyed, all events registered for it will be unregistered automatically!"})}),"\n",(0,t.jsx)(n.h3,{id:"unsubscribing-of-entity-events",children:"Unsubscribing of Entity Events"}),"\n",(0,t.jsx)(n.p,{children:"Currently there is two ways of unsubscribing from events:"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," Unsubscribing events will ",(0,t.jsx)(n.strong,{children:"always"})," only unregister from events which were registered in the Package you are."]})}),"\n",(0,t.jsx)(n.h4,{id:"unsubscribing-from-all-entity-events",children:"Unsubscribing from all Entity Events"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",metastring:"showLineNumbers",children:'-- This will unregister from all "EnterVehicle" events of this specific Character\n-- registered in this Package\nmy_character:Unsubscribe("EnterVehicle")\n'})}),"\n",(0,t.jsx)(n.h4,{id:"unsubscribing-from-a-specific-entity-event-callback",children:"Unsubscribing from a specific Entity Event Callback"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",metastring:"showLineNumbers",children:'-- Declares the Callback beforehand\nfunction OnCharacterEnteredVehicle(character, vehicle)\n    -- Entered vehicle!\nend\n\n-- Subscribes the event, passing the Callback\nmy_character:Subscribe("EnterVehicle", OnCharacterEnteredVehicle)\n\n-- Subscribes for the same event, twice\nmy_character:Subscribe("EnterVehicle", function(character, vehicle)\n    -- Entered vehicle again!\nend)\n\n-- Unsubscribes only from the first Callback\nmy_character:Unsubscribe("EnterVehicle", OnCharacterEnteredVehicle)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"custom-events",children:"Custom Events"}),"\n",(0,t.jsxs)(n.p,{children:["In nanos world, it is possible to define and call Custom Events. Please refer to ",(0,t.jsx)(n.a,{href:"/docs/next/scripting-reference/static-classes/events",children:"Events"})," Static Class for the technical documentation."]}),"\n",(0,t.jsx)(n.p,{children:"Custom events are user-created events which you can subscribe or call to all other Packages."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);