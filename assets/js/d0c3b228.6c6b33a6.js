"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[4879],{28453:(t,e,a)=>{a.d(e,{R:()=>o,x:()=>i});var n=a(96540);const c={},s=n.createContext(c);function o(t){const e=n.useContext(s);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(c):t.components||c:o(t.components),n.createElement(s.Provider,{value:e},t.children)}},53713:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>r,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"scripting-reference/static-classes/trace","title":"\ud83d\udd0d Trace","description":"Trace a ray against the world and get collided objects information.","source":"@site/docs/scripting-reference/static-classes/trace.mdx","sourceDirName":"scripting-reference/static-classes","slug":"/scripting-reference/static-classes/trace","permalink":"/docs/next/scripting-reference/static-classes/trace","draft":false,"unlisted":false,"editUrl":"https://github.com/nanos-world/docs/edit/master/docs/scripting-reference/static-classes/trace.mdx","tags":[{"inline":true,"label":"static-class","permalink":"/docs/next/tags/static-class"}],"version":"current","lastUpdatedBy":"Gabriel Tanasovici Nardy","lastUpdatedAt":1755090988000,"frontMatter":{"title":"\ud83d\udd0d Trace","description":"Trace a ray against the world and get collided objects information.","tags":["static-class"]},"sidebar":"main","previous":{"title":"\u23f1\ufe0f Timer","permalink":"/docs/next/scripting-reference/static-classes/timer"},"next":{"title":"\ud83d\udcfa Viewport","permalink":"/docs/next/scripting-reference/static-classes/viewport"}}');var c=a(74848),s=a(28453);const o={title:"\ud83d\udd0d Trace",description:"Trace a ray against the world and get collided objects information.",tags:["static-class"]},i=void 0,r={},l=[{value:"\ud83c\udf92\xa0Examples",id:"examples",level:2},{value:"\ud83d\uddff\xa0Static Functions",id:"static-functions",level:2},{value:"\ud83d\ude80\xa0Events",id:"events",level:2}];function d(t){const e={code:"code",h2:"h2",pre:"pre",...(0,s.R)(),...t.components},{EventsDeclaration:a,HeaderDeclaration:n,StaticFunctionsDeclaration:o}=e;return a||p("EventsDeclaration",!0),n||p("HeaderDeclaration",!0),o||p("StaticFunctionsDeclaration",!0),(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n,{type:"StaticClass",name:"Trace",is_static:!0}),"\n",(0,c.jsx)(e.h2,{id:"examples",children:"\ud83c\udf92\xa0Examples"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-lua",metastring:'title="Client/Index.lua"',children:'\t-- Gets the local player\n\tlocal local_player = Client.GetLocalPlayer()\n\n\t-- Gets the camera rotation and location\n\tlocal camera_rotation = local_player:GetCameraRotation()\n\tlocal start_location = local_player:GetCameraLocation()\n\n\t-- Calculates the direction vector based on the camera rotation\n\tlocal direction =  camera_rotation:GetForwardVector()\n\n\t-- Calculates the end location of the trace\n\t-- (start location + 20000 units in the direction of the camera)\n\tlocal end_location = start_location + direction * 20000\n\n\t-- Filter everything we want to trace (e.g. WorldStatic, WorldDynamic, PhysicsBody, Vehicle)\n\tlocal collision_trace = CollisionChannel.WorldStatic | CollisionChannel.WorldDynamic | CollisionChannel.PhysicsBody | CollisionChannel.Vehicle\n\n\t-- Define the parameters for the trace\n\t-- TraceMode.TraceOnlyVisibility means we only want to trace against objects that are visible\n\t-- TraceMode.DrawDebug means we want to draw debug lines for the trace for visualization\n\t-- TraceMode.TraceComplex means we want to trace against complex collision shapes\n\t-- TraceMode.ReturnEntity means we want to return the entity that was hit by the trace\n\tlocal trace_mode = TraceMode.TraceOnlyVisibility | TraceMode.DrawDebug | TraceMode.TraceComplex | TraceMode.ReturnEntity\n\n\t-- Do the trace\n\tlocal trace_result = Trace.LineSingle(start_location, end_location, collision_trace, trace_mode)\n\n\t-- If the trace was successful\n\tif (trace_result.Success) then\n\t\t-- And we got an entity, print the name of the collided entity, otherwise just print the location\n\t\tif (trace_result.Entity) then\n\t\t\tConsole.Log("Trace Success! Entity: " .. trace_result.Entity:GetClass():GetName() .. ". Location: " .. tostring(trace_result.Location))\n\t\telse\n\t\t\tConsole.Log("Trace Success! Location: " .. tostring(trace_result.Location))\n\t\tend\n\telse\n\t\t-- If the trace was not successful, print a message\n\t\tConsole.Log("Failed to trace")\n\tend\n'})}),"\n",(0,c.jsx)(e.h2,{id:"static-functions",children:"\ud83d\uddff\xa0Static Functions"}),"\n",(0,c.jsx)(o,{type:"StaticClass",name:"Trace"}),"\n",(0,c.jsx)(e.h2,{id:"events",children:"\ud83d\ude80\xa0Events"}),"\n",(0,c.jsx)(a,{type:"StaticClass",name:"Trace"})]})}function u(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,c.jsx)(e,{...t,children:(0,c.jsx)(d,{...t})}):d(t)}function p(t,e){throw new Error("Expected "+(e?"component":"object")+" `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);