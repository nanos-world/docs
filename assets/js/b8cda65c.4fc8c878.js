"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[14973],{28453:(e,s,o)=>{o.d(s,{R:()=>a,x:()=>l});var i=o(96540);const t={},n=i.createContext(t);function a(e){const s=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(n.Provider,{value:s},e.children)}},86459:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"core-concepts/scripting/voip","title":"Voice over IP (VOIP)","description":"How VOIP system works in nanos world","source":"@site/docs/core-concepts/scripting/voip.mdx","sourceDirName":"core-concepts/scripting","slug":"/core-concepts/scripting/voip","permalink":"/docs/next/core-concepts/scripting/voip","draft":false,"unlisted":false,"editUrl":"https://github.com/nanos-world/docs/edit/master/docs/core-concepts/scripting/voip.mdx","tags":[{"inline":true,"label":"scripting","permalink":"/docs/next/tags/scripting"},{"inline":true,"label":"voip","permalink":"/docs/next/tags/voip"},{"inline":true,"label":"audio","permalink":"/docs/next/tags/audio"}],"version":"current","lastUpdatedBy":"Gabriel Tanasovici Nardy","lastUpdatedAt":1755888270000,"sidebarPosition":8,"frontMatter":{"title":"Voice over IP (VOIP)","description":"How VOIP system works in nanos world","sidebar_position":8,"tags":["scripting","voip","audio"]},"sidebar":"main","previous":{"title":"Inheriting Classes","permalink":"/docs/next/core-concepts/scripting/inheriting-classes"},"next":{"title":"Dimensions","permalink":"/docs/next/core-concepts/scripting/dimensions"}}');var t=o(74848),n=o(28453);const a={title:"Voice over IP (VOIP)",description:"How VOIP system works in nanos world",sidebar_position:8,tags:["scripting","voip","audio"]},l="Voice over IP (VOIP)",r={},c=[{value:"VOIP Audio Types",id:"voip-audio-types",level:2},{value:"Local/Proximity",id:"localproximity",level:3},{value:"Global",id:"global",level:3},{value:"High/Low Pass filters",id:"highlow-pass-filters",level:2},{value:"VOIP Settings",id:"voip-settings",level:2},{value:"Muting",id:"muting",level:2},{value:"Configuring Microphone",id:"configuring-microphone",level:2}];function h(e){const s={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",strong:"strong",...(0,n.R)(),...e.components},{Enums:i,MethodReference:a}=s;return i||p("Enums",!0),a||p("MethodReference",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"voice-over-ip-voip",children:"Voice over IP (VOIP)"})}),"\n",(0,t.jsx)(s.p,{children:"How VOIP works in nanos world and how to use it."}),"\n",(0,t.jsx)(s.p,{children:"nanos world provides a built-in Voice over IP (VOIP) system using Steam's native implementation that allows players to communicate with each other in-game through voice. The VOIP system is highly customizable and can be configured to use local/proximity chat, global channels, or both."}),"\n",(0,t.jsx)(s.h2,{id:"voip-audio-types",children:"VOIP Audio Types"}),"\n",(0,t.jsxs)(s.p,{children:["The VOIP system is based on two main types: ",(0,t.jsx)(s.strong,{children:"local/proximity"})," and ",(0,t.jsx)(s.strong,{children:"global"}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"localproximity",children:"Local/Proximity"}),"\n",(0,t.jsx)(s.p,{children:"Local VOIP simulates uses a 3D spatialized audio to output the Player's voice. Usually this is attached to the possessing Player's Character and simulates a realistic audio environment where players can only hear each other if they are close by."}),"\n",(0,t.jsxs)(s.p,{children:["You can enable or disable local chat for a player using ",(0,t.jsx)(a,{type:"Class",class_name:"Player",method:"SetVOIPLocalSetting",show_class_name:!0}),". The volume of the local chat can be adjusted with ",(0,t.jsx)(a,{type:"Class",class_name:"Player",method:"SetVOIPLocalVolume",show_class_name:!0}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"global",children:"Global"}),"\n",(0,t.jsx)(s.p,{children:"Global VOIP allows players to communicate with each other regardless of their location in the game world. There are 31 global channels available (1-31). Players can be configured to listen or speak on specific channels."}),"\n",(0,t.jsxs)(s.p,{children:["You can configure a player's settings for a specific global channel using ",(0,t.jsx)(a,{type:"Class",class_name:"Player",method:"SetVOIPGlobalChannelSetting",show_class_name:!0})," or for all channels at once with ",(0,t.jsx)(a,{type:"Class",class_name:"Player",method:"SetVOIPGlobalAllChannelsSetting",show_class_name:!0}),". Also the volume of the global chat can be adjusted with ",(0,t.jsx)(a,{type:"Class",class_name:"Player",method:"SetVOIPLocalVolume",show_class_name:!0}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"highlow-pass-filters",children:"High/Low Pass filters"}),"\n",(0,t.jsxs)(s.p,{children:["In the Global Channels, it is possible to set filters on the Global audio with the methods ",(0,t.jsx)(a,{type:"Class",class_name:"Player",method:"SetVOIPGlobalHighPassFilter",show_class_name:!0})," and ",(0,t.jsx)(a,{type:"Class",class_name:"Player",method:"SetVOIPGlobalLowPassFilter",show_class_name:!0}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["We can simulate a ",(0,t.jsx)(s.strong,{children:"Radio Effect"})," by setting a High Pass filter like ",(0,t.jsx)(s.code,{children:"player:SetVOIPGlobalHighPassFilter(8000)"}),"."]}),"\n",(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsx)(s.p,{children:"High/Low Pass filters are only available in the Global Channels."})}),"\n",(0,t.jsx)(s.h2,{id:"voip-settings",children:"VOIP Settings"}),"\n",(0,t.jsxs)(s.p,{children:["The VOIP settings for both local and global channels are configured using the ",(0,t.jsx)(i,{children:"VOIPSetting"})," enum. It is possible to define if the player will just listen, speak or both on each Local Global Channels!"]}),"\n",(0,t.jsx)(s.h2,{id:"muting",children:"Muting"}),"\n",(0,t.jsxs)(s.p,{children:["It is possible to mute a certain player using the ",(0,t.jsx)(a,{type:"Class",class_name:"Player",method:"SetVOIPMuted",show_class_name:!0})," method. If this is called on Server side, the Player will be muted for everyone, but it can also be called on client side for a local mute."]}),"\n",(0,t.jsx)(s.h2,{id:"configuring-microphone",children:"Configuring Microphone"}),"\n",(0,t.jsx)(s.p,{children:"As we use Steam implementation, you can configure your microphone in the Steam's settings, which can be accessed through the Steam client or Shift+Tab Overlay. This allows you to adjust your microphone volume, test your microphone, and set other audio preferences."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"WebUI results",src:o(89884).A+"",width:"857",height:"734"})})]})}function d(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}function p(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},89884:(e,s,o)=>{o.d(s,{A:()=>i});const i=o.p+"assets/images/voip-33f3dee644f6ec9c9772240344f07c37.webp"}}]);