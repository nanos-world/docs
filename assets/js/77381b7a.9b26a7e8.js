"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[72541],{26217:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"core-concepts/scripting/dimensions","title":"Dimensions","description":"All you need to know about Dimensions","source":"@site/docs/core-concepts/scripting/dimensions.md","sourceDirName":"core-concepts/scripting","slug":"/core-concepts/scripting/dimensions","permalink":"/docs/next/core-concepts/scripting/dimensions","draft":false,"unlisted":false,"editUrl":"https://github.com/nanos-world/docs/edit/master/docs/core-concepts/scripting/dimensions.md","tags":[{"inline":true,"label":"scripting","permalink":"/docs/next/tags/scripting"}],"version":"current","lastUpdatedBy":"Gabriel Tanasovici Nardy","lastUpdatedAt":1758287149000,"frontMatter":{"title":"Dimensions","description":"All you need to know about Dimensions","tags":["scripting"]},"sidebar":"main","previous":{"title":"Voice over IP (VOIP)","permalink":"/docs/next/core-concepts/scripting/voip"},"next":{"title":"Discord Integration","permalink":"/docs/next/core-concepts/scripting/discord-integration"}}');var t=i(74848),o=i(28453);const r={title:"Dimensions",description:"All you need to know about Dimensions",tags:["scripting"]},a=void 0,c={},l=[{value:"What is a Dimension",id:"what-is-a-dimension",level:2},{value:"How to use",id:"how-to-use",level:2},{value:"Actor Hierarchy",id:"actor-hierarchy",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"All you need to know about Dimensions"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:i(69607).A+"",width:"2000",height:"1125"})}),"\n",(0,t.jsx)(n.h2,{id:"what-is-a-dimension",children:"What is a Dimension"}),"\n",(0,t.jsx)(n.p,{children:"Dimensions are separated worlds in the client-side, where players and actors are separated. In nanos world, they are represented by numbers. It is possible to have up to 65.535 different dimensions."}),"\n",(0,t.jsxs)(n.p,{children:["By default all players and entities are in the dimension ",(0,t.jsx)(n.code,{children:"1"}),". By moving a Player to another dimension, all entities that are not from that dimension will be destroyed to that player, and all entities in the new dimension will spawn for him."]}),"\n",(0,t.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,t.jsx)(n.p,{children:"To send an actor to another dimension, the API is very simple:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"actor:SetDimension(number)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Also we've got a new method to facilitate the use of events, this will be sent to all players in that dimension:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"Events.BroadcastRemoteDimension(dimension, event_name, params...)\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["If you send an entity through remote events that is not in the same dimension as the Player, the argument will be replaced by ",(0,t.jsx)(n.code,{children:"nil"})," and a warning will show up."]})}),"\n",(0,t.jsx)(n.h2,{id:"actor-hierarchy",children:"Actor Hierarchy"}),"\n",(0,t.jsx)(n.p,{children:'By sending an entity, their "children" will be moved to that dimension too, for example:'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When sending an ",(0,t.jsx)(n.strong,{children:"Actor"}),", all the other attached ",(0,t.jsx)(n.strong,{children:"Actors"})," will move as well."]}),"\n",(0,t.jsxs)(n.li,{children:["When sending a ",(0,t.jsx)(n.strong,{children:"Player"}),", the ",(0,t.jsx)(n.strong,{children:"Character"})," will move too."]}),"\n",(0,t.jsxs)(n.li,{children:["When sending a ",(0,t.jsx)(n.strong,{children:"Character"}),", the ",(0,t.jsx)(n.strong,{children:"Player"})," is not moved together, but the grabbing ",(0,t.jsx)(n.strong,{children:"Weapons"})," or ",(0,t.jsx)(n.strong,{children:"Props"})," (and attached ",(0,t.jsx)(n.strong,{children:"Actors"}),") will."]}),"\n",(0,t.jsxs)(n.li,{children:["When sending a ",(0,t.jsx)(n.strong,{children:"Vehicle"}),", all ",(0,t.jsx)(n.strong,{children:"Characters"})," will leave the vehicle (this will be improved soon\u2122)."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(96540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},69607:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/dimensions-edbd8ff8503cd2fd0d18772e32841aa7.webp"}}]);