"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[8005],{28453:(e,t,o)=>{o.d(t,{R:()=>i,x:()=>s});var n=o(96540);const r={},a=n.createContext(r);function i(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(a.Provider,{value:t},e.children)}},92538:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"getting-started/tutorials-and-examples/doors","title":"Doors","description":"How to create a simple and automatic door when Characters move in","source":"@site/versioned_docs/version-latest/getting-started/tutorials-and-examples/doors.md","sourceDirName":"getting-started/tutorials-and-examples","slug":"/getting-started/tutorials-and-examples/doors","permalink":"/docs/getting-started/tutorials-and-examples/doors","draft":false,"unlisted":false,"editUrl":"https://github.com/nanos-world/docs/edit/master/docs/getting-started/tutorials-and-examples/doors.md","tags":[{"inline":true,"label":"tutorial-example","permalink":"/docs/tags/tutorial-example"},{"inline":true,"label":"scripting","permalink":"/docs/tags/scripting"}],"version":"latest","lastUpdatedBy":"Gabriel T. Nardy (Syed)","lastUpdatedAt":1750151881000,"frontMatter":{"title":"Doors","description":"How to create a simple and automatic door when Characters move in","tags":["tutorial-example","scripting"]},"sidebar":"main","previous":{"title":"Blueprint Communication","permalink":"/docs/getting-started/tutorials-and-examples/blueprint-communication"},"next":{"title":"Fireworks","permalink":"/docs/getting-started/tutorials-and-examples/fireworks"}}');var r=o(74848),a=o(28453);const i={title:"Doors",description:"How to create a simple and automatic door when Characters move in",tags:["tutorial-example","scripting"]},s=void 0,d={},l=[{value:"Final result",id:"final-result",level:3},{value:"Code Snippet",id:"code-snippet",level:3}];function c(e){const t={code:"code",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components},{VideoExternal:o}=t;return o||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("VideoExternal",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"How to create a simple and automatic door when Characters move in."}),"\n",(0,r.jsx)(t.h3,{id:"final-result",children:"Final result"}),"\n",(0,r.jsx)(o,{path:"/docs/tutorials/doors-01.mp4"}),"\n",(0,r.jsx)(o,{path:"/docs/tutorials/doors-02.webm"}),"\n",(0,r.jsx)(t.h3,{id:"code-snippet",children:"Code Snippet"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",metastring:'title="Server/Index.lua" showLineNumbers',children:'-- Let\'s spawn a SM_Plane to be our door, and an empty (SM_None) StaticMesh to be our Hinge.\n-- As the SM_Plane has it\'s pivot at the center of the mesh, we need to have a Hinge to make it rotate properly.\n-- This is not needed if your Door Mesh already has the pivot at the correct Hinge location.\n\n-- Spawns the Hinge (which we rotated 90\xba to stand up)\nlocal door = StaticMesh(Vector(0, 0, 100), Rotator(0, 0, 90), "nanos-world::SM_None")\n\n-- Spawns the Door mesh, scales it to be in the format of a door, and attaches it to the Hinge\nlocal door_mesh = StaticMesh(Vector(), Rotator(), "nanos-world::SM_Plane")\ndoor_mesh:SetScale(Vector(1, 2, 1))\n\n-- Attaches to the Hinge at a relative location of 50 units (to be at the hinge location)\ndoor_mesh:AttachTo(door)\ndoor_mesh:SetRelativeLocation(Vector(50, 0, 0))\n\n-- Spawns our trigger at the center of the Door\nlocal trigger = Trigger(Vector(0, 0, 100), Rotator(), 150)\n\n-- Registers the trigger when a Character moves in\ntrigger:Subscribe("BeginOverlap", function(trigger, actor)\n    if (actor:GetType() ~= "Character") then return end\n\n    -- Plays an opening door animation on the Character\n    actor:PlayAnimation("nanos-world::AM_Mannequin_DoorOpen_01", AnimationSlotType.UpperBody)\n\n    -- Rotates the door -90\xba smoothly\n    door:RotateTo(Rotator(0, -90, 90), 1)\nend)\n\n-- Registers the trigger when a Character moves out\ntrigger:Subscribe("EndOverlap", function(trigger, actor)\n    if (actor:GetType() ~= "Character") then return end\n\n    -- Rotates the door back to original position, smoothly\n    door:RotateTo(Rotator(0, 0, 90), 1)\nend)\n'})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);