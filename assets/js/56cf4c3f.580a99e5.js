"use strict";(self.webpackChunkdocs_docusaurus=self.webpackChunkdocs_docusaurus||[]).push([[3185],{8850:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/canvas-3c5a447821b2c235a21ca04c524c4bf3.webp"},28453:(e,a,t)=>{t.d(a,{R:()=>s,x:()=>c});var n=t(96540);const r={},o=n.createContext(r);function s(e){const a=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(o.Provider,{value:a},e.children)}},44219:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"getting-started/tutorials-and-examples/basic-hud-canvas","title":"Basic HUD (Canvas)","description":"How to add a basic HUD using Render\'s Canvas features, to display the character\'s Health and Ammo character\'s Health and Ammo","source":"@site/versioned_docs/version-latest/getting-started/tutorials-and-examples/basic-hud-canvas.md","sourceDirName":"getting-started/tutorials-and-examples","slug":"/getting-started/tutorials-and-examples/basic-hud-canvas","permalink":"/docs/getting-started/tutorials-and-examples/basic-hud-canvas","draft":false,"unlisted":false,"editUrl":"https://github.com/nanos-world/docs/edit/master/docs/getting-started/tutorials-and-examples/basic-hud-canvas.md","tags":[{"inline":true,"label":"tutorial-example","permalink":"/docs/tags/tutorial-example"},{"inline":true,"label":"scripting","permalink":"/docs/tags/scripting"},{"inline":true,"label":"ui","permalink":"/docs/tags/ui"}],"version":"latest","lastUpdatedBy":"Gabriel Tanasovici Nardy","lastUpdatedAt":1750881731000,"frontMatter":{"title":"Basic HUD (Canvas)","description":"How to add a basic HUD using Render\'s Canvas features, to display the character\'s Health and Ammo character\'s Health and Ammo","tags":["tutorial-example","scripting","ui"]},"sidebar":"main","previous":{"title":"\ud83d\udcd1 Complete Tutorials List","permalink":"/docs/getting-started/tutorials-and-examples/"},"next":{"title":"Basic HUD (HTML)","permalink":"/docs/getting-started/tutorials-and-examples/basic-hud-html"}}');var r=t(74848),o=t(28453);const s={title:"Basic HUD (Canvas)",description:"How to add a basic HUD using Render's Canvas features, to display the character's Health and Ammo character's Health and Ammo",tags:["tutorial-example","scripting","ui"]},c=void 0,i={},l=[];function d(e){const a={a:"a",admonition:"admonition",code:"code",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.p,{children:"How to add a basic HUD using Render's Canvas features, to display the character's Health and Ammo."}),"\n",(0,r.jsx)(a.admonition,{type:"tip",children:(0,r.jsxs)(a.p,{children:["You can also create complete and complex UIs using HTML + JavaScript + CSS, check it out: ",(0,r.jsx)(a.a,{href:"/docs/getting-started/tutorials-and-examples/basic-hud-html",children:"Basic HUD (HTML)"}),"."]})}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{src:t(8850).A+"",width:"1919",height:"1079"})}),"\n",(0,r.jsx)(a.p,{children:"A Canvas is a painting fabric which can be drawn to. The following code shows how to add a basic UI using Canvas:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-lua",metastring:'title="Client/Index.lua" showLineNumbers',children:'-- Spawns the Canvas\nHUDCanvas = Canvas(true, Color.TRANSPARENT, 0, true)\n\n-- Subscribes for Update event, we can only draw inside this event\nHUDCanvas:Subscribe("Update", function(self, width, height)\n    -- Gets the Local Player\n    local local_player = Client.GetLocalPlayer()\n    if (not local_player) then return end\n\n    -- Gets the Local Character (possessed by the Local Player)\n    local local_character = local_player:GetControlledCharacter()\n    if (not local_character) then return end\n\n    -- Draws the Health\n    self:DrawText(tostring(local_character:GetHealth()), Vector2D(100, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n    -- Gets the Local Weapon\n    local character_weapon = local_character:GetPicked()\n    if (character_weapon and character_weapon:GetType() == "Weapon") then\n        -- Draws the Ammo Clip\n        self:DrawText(tostring(character_weapon:GetAmmoClip()), Vector2D(width - 200, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n        -- Draws the Ammo Bag\n        self:DrawText("/ " .. tostring(character_weapon:GetAmmoBag()), Vector2D(width - 140, height - 87), FontType.PoiretOne, 15, Color.WHITE)\n    end\nend)\n'})}),"\n",(0,r.jsx)(a.p,{children:"The example above re-renders and updates all health/ammo information ever tick, which could be bad for performance. Gladly we can fast improve it by limiting the auto repaint rate by changing it in the constructor:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-lua",metastring:"showLineNumbers",children:"-- Instead of 0 in the auto_repaint_rate parameter\nHUDCanvas = Canvas(true, Color.TRANSPARENT, 0, true)\n\n-- Use 0.033, so it only updates every 0.033ms (i.e. at 30 fps)\n-- highlight-next-line\nHUDCanvas = Canvas(true, Color.TRANSPARENT, 0.033, true)\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Another further optimization is to only update when needed, for this case we will need to implement some additional code. In this case, we set ",(0,r.jsx)(a.code,{children:"auto_repaint_rate"})," to -1 to disable it from being auto repainted:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-lua",metastring:"showLineNumbers",children:'-- We set -1 to never auto repaint\nHUDCanvas = Canvas(true, Color.TRANSPARENT, -1, true)\n\n-- Subscribes for Update event, we can only draw inside this event (as usual)\nHUDCanvas:Subscribe("Update", function(self, width, height)\n    -- Gets the Local Player\n    local local_player = Client.GetLocalPlayer()\n    if (not local_player) then return end\n\n    -- Gets the Local Character (possessed by the Local Player)\n    local local_character = local_player:GetControlledCharacter()\n    if (not local_character) then return end\n\n    -- Draws the Health\n    self:DrawText(tostring(local_character:GetHealth()), Vector2D(100, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n    -- Gets the Local Weapon\n    local character_weapon = local_character:GetPicked()\n    if (character_weapon and character_weapon:GetType() == "Weapon") then\n        -- Draws the Ammo Clip\n        self:DrawText(tostring(character_weapon:GetAmmoClip()), Vector2D(width - 200, height - 100), FontType.PoiretOne, 25, Color.WHITE)\n\n        -- Draws the Ammo Bag\n        self:DrawText("/ " .. tostring(character_weapon:GetAmmoBag()), Vector2D(width - 140, height - 87), FontType.PoiretOne, 15, Color.WHITE)\n    end\nend)\n\n\n-- Now we subscribe for when we want it to be updated:\n\n-- When LocalPlayer spawns, sets an event on it to trigger when we possesses a new character, to store the local controlled character locally. This event is only called once, see Package.Subscribe("Load") to load it when reloading a package\nClient.Subscribe("SpawnLocalPlayer", function(local_player)\n    local_player:Subscribe("Possess", function(player, character)\n        UpdateLocalCharacter(character)\n    end)\nend)\n\n-- When package loads, verify if LocalPlayer already exists (eg. when reloading the package), then try to get and store it\'s controlled character\nPackage.Subscribe("Load", function()\n    local local_player = Client.GetLocalPlayer()\n    if (local_player  ~= nil) then\n        UpdateLocalCharacter(local_player:GetControlledCharacter())\n    end\nend)\n\n-- Function to set all needed events on local character (to update the UI when it takes damage or dies)\nfunction UpdateLocalCharacter(character)\n    -- Verifies if character is not nil (eg. when GetControllerCharacter() doesn\'t return a character)\n    if (character == nil) then return end\n\n    -- Sets on character an event to update the health\'s UI after it takes damage\n    character:Subscribe("TakeDamage", function(charac, damage, type, bone, from_direction, instigator, causer)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update the health\'s UI after it dies\n    character:Subscribe("Death", function(charac)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update his grabbing weapon (to show ammo on UI)\n    character:Subscribe("PickUp", function(charac, object)\n        if (object:GetType() == "Weapon") then\n            HUDCanvas:Repaint()\n        end\n    end)\n\n    -- Sets on character an event to remove the ammo ui when he drops it\'s weapon\n    character:Subscribe("Drop", function(charac, object)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update the UI when he fires\n    character:Subscribe("Fire", function(charac, weapon)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Sets on character an event to update the UI when he reloads the weapon\n    character:Subscribe("Reload", function(charac, weapon, ammo_to_reload)\n        HUDCanvas:Repaint()\n    end)\n\n    -- Updates the UI immeditelly\n    HUDCanvas:Repaint()\nend\n\n-- Updates the UI positions when the Viewport (screen) is resized\nClient.Subscribe("ViewportResized", function(NewSize)\n    HUDCanvas:Repaint()\nend)\n'})})]})}function h(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);